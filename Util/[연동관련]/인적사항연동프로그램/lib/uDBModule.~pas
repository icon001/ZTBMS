unit uDBModule;

interface

uses
  SysUtils, Classes, DB, ADODB,ActiveX,forms,
  uCommonVariable;

type
  TdmDBModule = class(TDataModule)
    ADOConnection: TADOConnection;
    ADOQuery: TADOQuery;
    ADOTempQuery: TADOQuery;
  private
    FOnAdoConnected: TAdoConnectedEvent;
    FDBConnected: Boolean;
    { Private declarations }
    {SQLLOG저장}
    procedure SQLErrorLog(aSQL:string);
    procedure SetDBConnected(const Value: Boolean);
  public
    { Public declarations }
    Function ProcessExecSQL(aSql:String;bUpdateResult:Boolean=False): Boolean;
  public
    Function InsertTB_HonikMappingJijum(aLEVEL1,aCompanyCode,aJijumCode,aLEVEL1_NAME,aChange:string):Boolean;
    Function InsertTB_HonikMappingPosi(aGUBUN,aCompanyCode,aPosiCode,aGUBUN_NAME,aChange:string):Boolean;
    Function UpdateTB_HonikTempTable2(aCAMPUS,aKEY,aLEVEL1,aLEVEL1_NAME,aLEVEL2,aLEVEL2_NAME,aGUBUN,aGUBUN_NAME,aNAME,aCARD_CNT,aCurChange,aCurMode:string):Boolean;
    Function UpdateTB_HonikMappingDepart(aLEVEL1,aLEVEL2,aLEVEL2_NAME,aChange:string):Boolean;
    Function UpdateTB_HonikMappingJijum(aLEVEL1,aLEVEL1_NAME,aChange:string):Boolean;
    Function UpdateTB_HonikMappingPosi(aGUBUN,aGUBUN_NAME,aChange:string):Boolean;

  published
    property DBConnected : Boolean read FDBConnected write SetDBConnected;
    property OnAdoConnected:      TAdoConnectedEvent read FOnAdoConnected       write FOnAdoConnected;
  end;

var
  dmDBModule: TdmDBModule;

implementation

{$R *.dfm}

{ TdmDBModule }



function TdmDBModule.CheckTB_HonikMappingJijum(aLEVEL1: string;
  var aName: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_HonikMappingJijum  where K_LEVEL1 = ''' + aLEVEL1 + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDBModule.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;

      result := 0;
      if recordcount < 1 then Exit;
      aName := FindField('K_LEVEL1_NAME').AsString;
      result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmDBModule.InsertTB_HonikMappingDepart(aLEVEL1, aLEVEL2,
  aCompanyCode, aJijumCode, aDepartCode, aLEVEL2_NAME,
  aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_HonikMappingDepart ( ';
  stSql := stSql + '  K_LEVEL1 ,';
  stSql := stSql + '  K_LEVEL2 ,';
  stSql := stSql + '  CO_COMPANYCODE ,';
  stSql := stSql + '  CO_JIJUMCODE ,';
  stSql := stSql + '  CO_DEPARTCODE ,';
  stSql := stSql + '  K_LEVEL2_NAME ,';
  stSql := stSql + '  K_CHANGE ,';
  stSql := stSql + '  K_CHANGEDATE ';               //구분
  stSql := stSql + ') ';
  stSql := stSql + ' Values(';
  stSql := stSql + '''' + aLEVEL1 + ''',';
  stSql := stSql + '''' + aLEVEL2 + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + aLEVEL2_NAME + ''',';
  stSql := stSql + '''' + aChange + ''',';
  stSql := stSql + 'getdate())';
  result := ProcessExecSQL(stSql);
end;

function TdmDBModule.InsertTB_HonikMappingJijum(aLEVEL1, aCompanyCode,
  aJijumCode, aLEVEL1_NAME, aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_HonikMappingJijum ( ';
  stSql := stSql + '  K_LEVEL1 ,';
  stSql := stSql + '  CO_COMPANYCODE ,';
  stSql := stSql + '  CO_JIJUMCODE ,';
  stSql := stSql + '  K_LEVEL1_NAME ,';
  stSql := stSql + '  K_CHANGE ,';
  stSql := stSql + '  K_CHANGEDATE ';               //구분
  stSql := stSql + ') ';
  stSql := stSql + ' Values(';
  stSql := stSql + '''' + aLEVEL1 + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aLEVEL1_NAME + ''',';
  stSql := stSql + '''' + aChange + ''',';
  stSql := stSql + 'getdate())';
  result := ProcessExecSQL(stSql);
end;

function TdmDBModule.InsertTB_HonikMappingPosi(aGUBUN, aCompanyCode,
  aPosiCode, aGUBUN_NAME, aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_HonikMappingPosi ( ';
  stSql := stSql + '  K_GUBUN ,';
  stSql := stSql + '  CO_COMPANYCODE ,';
  stSql := stSql + '  PO_POSICODE ,';
  stSql := stSql + '  K_GUBUN_NAME ,';
  stSql := stSql + '  K_CHANGE ,';
  stSql := stSql + '  K_CHANGEDATE ';               //구분
  stSql := stSql + ') ';
  stSql := stSql + ' Values(';
  stSql := stSql + '''' + aGUBUN + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aPosiCode + ''',';
  stSql := stSql + '''' + aGUBUN_NAME + ''',';
  stSql := stSql + '''' + aChange + ''',';
  stSql := stSql + 'getdate())';
  result := ProcessExecSQL(stSql);
end;

function TdmDBModule.ProcessExecSQL(aSql: String;
  bUpdateResult: Boolean): Boolean;
var
  ExecQuery :TADOQuery;
  nResult : integer;
begin
  Result:= False;
  //OleInitialize(nil);
  Try
    //FCS.Enter;
    CoInitialize(nil);
    ExecQuery := TADOQuery.Create(nil);
    ExecQuery.Connection := ADOConnection;
    ExecQuery.DisableControls;
    //if DBTYPE = 'MDB' then ADOConnection.BeginTrans;
    with ExecQuery do
    begin
      Close;
      //SQL.Clear;
      SQL.Text:= aSql;
      try
        nResult := ExecSQL;
//SQLErrorLog(aSql);
      except
      ON E: Exception do
        begin
          SQLErrorLog('DBError('+ E.Message + ')' + aSql);
          
          if Pos('no connection to the server',E.Message) > 0 then
          begin
            DBConnected := False;
          end else if Pos('out of memory',E.Message) > 0 then
          begin
            DBConnected := False;
          end else if Pos('server closed the connection',E.Message) > 0 then
          begin
            DBConnected := False;
          end else if Pos('connection dead',E.Message) > 0 then
          begin
            DBConnected := False;
          end else if Pos('연결을 실패했습니다',E.Message) > 0 then
          begin
            DBConnected := False;
          end;
          Exit;
        end
      end;
    end;
  Finally
    ExecQuery.EnableControls;
    ExecQuery.Free;
    CoUninitialize;
  End;
  //if DBTYPE = 'MDB' then ADOConnection.CommitTrans;

  if bUpdateResult then
  begin
    if nResult > 0 then Result := True
    else
    begin
      Result := False;
      SQLErrorLog('DBError:'+ aSql);
    end;
  end else
  begin
    Result:= True;
  end;
end;

procedure TdmDBModule.SetDBConnected(const Value: Boolean);
begin
  if FDBConnected = Value then Exit;
  FDBConnected := Value;
  if Assigned(FOnAdoConnected) then
  begin
    OnAdoConnected(Self,Value);
  end;
end;

procedure TdmDBModule.SQLErrorLog(aSQL: string);
Var
  f: TextFile;
  st: string;
  aFileName: String;
begin

//  if SaveLogData < 1 then Exit;
  if Application.Terminated then Exit;
  {$I-}
  //Critical_SaveLog.Acquire;
  aFileName:= ExtractFileDir(Application.ExeName) + '\..\log\DBerr'+ FormatDateTIme('yyyymmdd',Now)+'.log';
  AssignFile(f, aFileName);
  Append(f);
  if IOResult <> 0 then Rewrite(f);
  st := FormatDateTIme('hh:nn:ss:zzz">"   ',Now) + #13#10 + aSQL;
  WriteLn(f,st);
  System.Close(f);
  //Critical_SaveLog.Release;
  {$I+}
end;



function TdmDBModule.UpdateTB_HonikMappingDepart(aLEVEL1, aLEVEL2,
  aLEVEL2_NAME, aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_HonikMappingDepart set ';
  stSql := stSql + '  K_LEVEL2_NAME =''' + aLEVEL2_NAME + ''',';  
  stSql := stSql + '  K_CHANGE =''' + aChange + ''', ';      //변경시 Y 미변경시 N
  stSql := stSql + '  K_CHANGEDATE = getdate() ';
  stSql := stSql + ' where K_LEVEL1 = ''' + aLEVEL1 + ''' ';       //단과대코드( 소속 )
  stSql := stSql + ' AND K_LEVEL2 = ''' + aLEVEL2 + ''' ';      

  result := ProcessExecSQL(stSql);
end;

function TdmDBModule.UpdateTB_HonikMappingJijum(aLEVEL1, aLEVEL1_NAME,
  aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_HonikMappingJijum set ';
  stSql := stSql + '  K_LEVEL1_NAME =''' + aLEVEL1_NAME + ''',';  //단과대명칭( 소속명 )
  stSql := stSql + '  K_CHANGE =''' + aChange + ''', ';      //변경시 Y 미변경시 N
  stSql := stSql + '  K_CHANGEDATE = getdate() ';
  stSql := stSql + ' where K_LEVEL1 = ''' + aLEVEL1 + ''' ';       //단과대코드( 소속 )

  result := ProcessExecSQL(stSql);

end;

function TdmDBModule.UpdateTB_HonikMappingPosi(aGUBUN, aGUBUN_NAME,
  aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_HonikMappingPosi set ';
  stSql := stSql + '  K_GUBUN_NAME =''' + aGUBUN_NAME + ''',';  //단과대명칭( 소속명 )
  stSql := stSql + '  K_CHANGE =''' + aChange + ''', ';      //변경시 Y 미변경시 N
  stSql := stSql + '  K_CHANGEDATE = getdate() ';
  stSql := stSql + ' where K_GUBUN = ''' + aGUBUN + ''' ';       //단과대코드( 소속 )

  result := ProcessExecSQL(stSql);
end;

function TdmDBModule.UpdateTB_HonikTempTable2(aCAMPUS, aKEY, aLEVEL1,
  aLEVEL1_NAME, aLEVEL2, aLEVEL2_NAME, aGUBUN, aGUBUN_NAME, aNAME,
  aCARD_CNT, aCurChange, aCurMode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_HonikTempTable2 set ';
  stSql := stSql + '  K_LEVEL1 = ''' + aLEVEL1 + ''',';        //단과대코드( 소속 )
  stSql := stSql + '  K_LEVEL1_NAME =''' + aLEVEL1_NAME + ''',';  //단과대명칭( 소속명 )
  stSql := stSql + '  K_LEVEL2 = ''' + aLEVEL2 + ''',';         //학과코드 ( 소속2)
  stSql := stSql + '  K_LEVEL2_NAME = ''' + aLEVEL2_NAME + ''',';  //학과명칭 (소속2명)
  stSql := stSql + '  K_GUBUN = ''' + aGUBUN + ''',';               //구분
  stSql := stSql + '  K_GUBUN_NAME = ''' + aGUBUN_NAME + ''', ';   //구분명 ( 1:교수, 2:강사, 3:조교, 4: 대학원생, 5:학부생, 6:직원 )
  stSql := stSql + '  K_NAME = ''' + aNAME + ''',';        //성명
  stSql := stSql + '  K_CARD_CNT =''' + aCARD_CNT + ''',';      //카드발급차수
  stSql := stSql + '  K_STATE = ' + aCurMode  + ', ';      //변경 모드 1.입력,2.수정,3.삭제
  stSql := stSql + '  K_CHANGE =''' + aCurChange + ''' ';      //변경시 Y 미변경시 N
  if aCurChange = 'Y' then stSql := stSql + '  ,K_RELAY = ''N'' ';
  if aCurChange = 'Y' then stSql := stSql + '  ,K_CHANGEDATE = getdate() ';
  stSql := stSql + ' where K_CAMPUS  = ' + aCAMPUS + '';    //캠퍼스 구분 1:서울 2:세종
  stSql := stSql + ' and K_KEY = ''' + aKEY + ''' ';       //학번 ( 종번 )

  result := ProcessExecSQL(stSql);
end;

end.
