unit uZeronEventDBFunction;

interface

uses
  Windows,System.SysUtils, System.Classes,Winapi.ActiveX,Data.Win.ADODB,DB,
  uLoginVariable;

type
  TdmZeronEventDBFunction = class(TDataModule)
  private
    function CheckTB_ACCESSDEVICE_NodeNo(aNodeNo: string): integer;
    { Private declarations }
  public
    function CheckTB_ACCESSDEVICE_DeviceID(aNodeNo,aEcuID,aOldEcuID:string):integer;
    function CheckTB_ACCESSDEVICE_ECU(aNodeNo,aEcuID:string):integer;
    function CheckTB_ACCESSDEVICE_JavaraType(aNodeNo,aECUID:string):integer;
    function CheckTB_ACCESSDEVICE_NodeIP(aNodeIP,aNodeNo:string):integer;
    function checkTB_ADMIN_UserID(aUserID:string):integer;
    function CheckTB_ALARMDEVICE_DeviceID(aNodeNo,aEcuID:string):integer;
    function CheckTB_ARMAREA_Key(aNodeNo,aEcuID,aArmAreaNo:string):integer;
    function CheckTB_ATEVENT_BussinessInTime(aDate,aNowTime,aCompanyCode,aEMCode:String):Boolean;  //복귀 시간이 이미 큰 시간이 있는지 체크
    function CheckTB_ATEVENT_BussinessOutTime(aDate,aNowTime,aCompanyCode,aEMCode:String):Boolean; //외근 시간이 이미 작은 시간이 있는지 체크
    Function CheckTB_ATEVENT_EmCode(aDate,aCompanyCode,aEMCode,aTime,aWeekCode:string):Boolean; //기준 날짜 근태 자료가 있는지 체크
    Function CheckTB_ATEVENT_Key(aDate,aCompanyCode,aEMCode:string):integer;
    function CheckTB_ATEVENT_OutTime(aDate,aNowTime,aCompanyCode,aEMCode:String):Boolean; //퇴근 시간이 이미 큰 시간이 있는지 체크
    function CheckTB_CARDFINGER_FingerNo(aFdmsNo:string;aPermit:string=''):integer;
    function CheckTB_CARD_Cardno(aCardno:string;var aCardType,aCompanyCode,aEmCode,aEmName:string):integer;
    function CheckTB_CARD_StateValue(aCardno:string;var aCompanyCode,aEmCode:string):integer;
    function CheckTB_COMPANY_Blank:integer;
    function CheckTB_CONFIG_DoorLongTime : integer;
    function CheckTB_EMPLOYEE_CompanyCodeLike(aCompanyCode,aJijumCode,aDepartCode,aGubunCode:string):integer;
    function CheckTB_EMPLOYEE_GroupCodeUse(aGroupCode:string):integer;
    function CheckTB_EMPLOYEE_PosiCode(aCompanyCode,aPosiCode:string):integer;
    function CheckTB_DEVICECARDNOEMPLOYEE_Key(aCompanyCode, aEmCode,aNodeNo, aEcuID:string):integer;
    function CheckTB_DEVICECARDNOGROUP_Code(aGroupCode,aNodeNo,aECUID:string):integer;
    function CheckTB_DEVICECARDNO_CardDevice(aCardNo,aNodeNo,aECUID:string):integer;
    function checkTB_DEVICESCHEDULE_DayCode(aNodeNo,aEcuID,aDoorNo,aDayCode:string):integer;
    function checkTB_DEVICESCHEDULE_DoorNo(aNodeNo,aEcuID,aDoorNo:string):integer;
    function CheckTB_DOOR_DoorNo(aNodeNo,aEcuID,aDoorNo,aOldDoorNo:string):integer;
    function CheckTB_DOOR_Key(aNodeNo,aEcuID,aDoorNo:string):integer;
    function CheckTB_EMPLOYEE_CompanyCode(aCompanyCode:string):integer; //회사코드 삭제시 사원등록되어 있는경우 삭제 불가
    function CheckTB_EMPLOYEE_EmCode(aCompanyCode,aEmCode:string;var aEmName:string;var aFdmsID:string):integer;
    function CheckTB_EMPLOYEE_FpmsID(aFpmsID:string):integer;
    function CheckTB_GRADEPROGRAM_ClassProgramID(aClassCode,aMenuGroup,aProgramID,aGubun:string):integer;
    function CheckTB_HOLIDAY_Date(aDate:string):integer;
    function CheckTB_PATROLALARMEVENT_Key(aDate,aPatrolSeq,aNodeNo,aEcuID,aReaderno:string):integer;
    function CheckTB_PATROLSTATE_Key(aDate,aNodeNo,aEcuID,aReaderno,aPatrolTimeSeq:string):integer;
    function CheckTB_PATROLSTATE_SeqUse(aPatrolTimeSeq:string):integer;
    function CheckTB_PATROLTIME_Key(aSeq:string):integer;
    function CheckTB_POSI_PosiName(aCompanyCode,aPosiName:string):integer;
    function CheckTB_READER_Key(aNodeNo,aEcuID,aReaderNo:string):integer;
    function CheckTB_READER_PatrolReaderUse(aNodeNo,aEcuID,aReaderNo:string):integer;
    function CheckTB_RELAYGUBUN_Name(aName:string):integer;
  public
    Function CopyTB_CARDFINGER_FingerUserID(aOrgFdmsNo,aNewFdmsid:string):Boolean;
    function CopyTB_DEVICECARDNOGROUP_ChildCode(aParentCode,aChildCode:string):Boolean;
    function CopyTB_DEVICECARDNO_Card(aOldCardNo,aNewCardNo:string):Boolean;
  public
    function GetAlarmAreaInformation(aNodeNo,aEcuID,aAlarmAreaNo:string;var aAlarmAreaName,aBuildingName:string):Boolean;
    Function GetAreaName(aBuildingCode,aFloorCode,aAreaCode:string):string;
    function GetBuildingName(aBuildingCode:string):string;
    function GetCardToEmployeeInfo(aCardNO:string;var aEmName,aCompanyName,aJijumName,aDepartName,aEmCode,aPosiName:string):Boolean;
    function GetCompanyName(aCompanyCode:string):string;
    function GetDaemonVersion : integer;
    function GetDepartName(aCompanyCode,aJijumCode,aDepartCode:string):string;
    function GetDeviceName(aNodeNo,aEcuID:string):string;
    function GetDoorInformation(aNodeNo,aEcuID,aDoorNo:string;var aDoorName,aBuildingName:string):Boolean;
    Function GetEmployeeInfo(aCardNo:string;bPassNo:Boolean; var aCompanyCode,aEMCode,aJijumCode,aDepartCode,aEmName:string ):Boolean;
    Function GetEmployeeInfo_AWCODE(aCardNo:string;bPassNo:Boolean; var aCompanyCode,aEMCode,aJijumCode,aDepartCode,aEmName,aAWCode:string ):Boolean;
    Function GetFloorName(aBuildingCode,aFloorCode:string):string;
    function GetFormName:Boolean;
    function GetJijumName(aCompanyCode,aJijumCode:string):string;
    function GetLastFpmsCardNo:int64;
    function GetNextAdminClassCode : string;
    function GetNextAreaCode(aBuildingCode,aFloorCode:string;aAreaCode:string='000';aDeepSeq:string='1'): string;
    function GetNextBuildingCode : string;
    function getNextCardPositionNumber : integer;
    function GetNextCompanyCode : string;
    function GetNextDepartCode(aCompanyCode,aJijumCode:string;aDepartCode:string='000';aDeepSeq:string='2'): string;
    function GetNextDeviceCardGroupCode:string;
    function GetNextDeviceID(aNodeNo:string): string;
    function GetNextEmployeeCode: string;
    function GetNextFloorCode(aBuildingCode:string):string;
    function GetNextFpmsCardNo:string;
    function GetNextFpmsID:string;
    function GetNextJijumCode(aCompanyCode:string): string;
    function GetNextNodeNo : string;
    function GetNextPatrolTimeSeq : string;
    function GetNextPosiCode(aCompanyCode:string): string;
    function GetNextTB_CARDGROUPCODE_ChildCAGroupCode(aParentCode:string;var aCode,aDeepSeq,aViewSeq:string):Boolean;
    function GetNextTB_RELAYGUBUN_Code:string;
    function GetPermitStateName(aPermit:string):string;
    function GetPosiName(aCompanyCode,aPosiCode:string):string;
    function GetProgramGrade(aAdminGradeCode,aProgID:string;var aInsertGrade,aUpdateGrade,aDeleteGrade:Boolean):Boolean;
    function GetTB_ACCESSDEVICE_NodeIp(aNodeNo:string):string;
    function GetTB_ALARMSTATUSCODE_CodeName(aStatusCode:string; var aStatusName:string; var aAlarmSound:integer):integer;
    function GetTB_ARMAREA_BuildingInfo(aNodeNo,aEcuID,aArmAreaNo:string; var aBuildingName,aTelNo,aMemo:string):Boolean;
    function GetTB_CARD_PatrolCardInfo(aCardNo:string;var aEmCode,aEmName:string):integer;
    function GetTB_PATROLTIME_TimeNAME(aTime:string):string;
    function GetTB_ZONEDEVICE_PortName(aNodeNo,aEcuID,aExtNo,aPortNo:string):string;
    function GetUpdateAttendType(aDate,aNowTime,aCompanyCode,aEmCode:string;var aAtInsert:Boolean):string;
    function GetUserInfoFromCardno(aCardNo:string;var aEmCode,aEmName,aCompanyName,aJijumName,aDepartName,aPosiName:string):Boolean;
  public
    function DeleteTB_ACCESSDEVICE_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_ACCESSDEVICE_NodeAll(aNodeNo:string):Boolean;
    function DeleteTB_ACCESSEVENT_ToDate(aDate:string):Boolean;
    function DeleteTB_ADMINALARMDEVICE_AlarmGrade(aUserID,aNodeNo,aEcuID:string):Boolean;
    Function DeleteTB_ADMINCOMPANY_UserIDAll(aUserID:string):Boolean;
    Function DeleteTB_ADMINCOMPANY_Value(aCompanyCode,aJijumCode,aDepartCode,aGubun,aUserID:string):Boolean;
    Function DeleteTB_ADMINDOOR_DoorGrade(aNodeNo,aECUID,aDoorNo,aUserID:string):Boolean;
    Function DeleteTB_ADMINDOOR_UserIDAll(aUserID:string):Boolean;
    Function DeleteTB_ADMINFOOD_FoodGrade(aNodeNo,aECUID,aDoorNo,aUserID:string):Boolean;
    Function DeleteTB_ADMINFOOD_UserIDAll(aUserID:string):Boolean;
    function DeleteTB_ADMIN_UserID(aUserID:string):Boolean;
    function DeleteTB_ALARMDEVICE_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_ALARMDEVICE_NodeAll(aNodeNo:string):Boolean;
    function DeleteTB_ALARMEVENT_ToDate(aDate:string):Boolean;
    Function DeleteTB_CARDFINGER_FingerUserID(aFdmsid:string):Boolean;
    function DeleteTB_CARD_CardNo(aCardNo:string):Boolean;
    function DeleteTB_CARD_EMCODE(aCompanyCode,aEmCode:string):Boolean;
    function DeleteTB_COMPANY_CompanyCodeAll(aCompanyCode:string):Boolean;
    function DeleteTB_COMPANY_DepartCodeAll(aCompanyCode,aJijumCode,aDepartCode:string):Boolean;
    function DeleteTB_COMPANY_JijumCodeAll(aCompanyCode,aJijumCode:string):Boolean;
    function DeleteTB_DEVICECARDNO_CardNo(aCardNo:string):Boolean;
    function DeleteTB_DEVICECARDNOEMPLOYEE_EMCODEAll(aCompanyCode,aEmCode:string):Boolean;
    function DeleteTB_DEVICECARDNOGROUP_GroupCode(aCode:string):Boolean;
    function DeleteTB_DOOR_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_DOOR_DoorNo(aNodeNo,aEcuID,aDoorNo:string):Boolean;
    function DeleteTB_DOOR_NodeAll(aNodeNo:string):Boolean;
    function DeleteTB_EMPLOYEE_EmCode(aCompanyCode,aEmCode:string):Boolean;
    function DeleteTB_FOOD_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_FOOD_NodeAll(aNodeNo:string):Boolean;
    function DeleteTB_GRADEPROGRAM_GradeCodeAll(aCode:string):Boolean;
    function DeleteTB_GRADEPROGRAM_ClassProgramID(aClassCode,aMenuGroupCode,aProgramid,aGubun:string):Boolean;
    function DeleteTB_GRADE_GradeCodeAll(aCode:string):Boolean;
    Function DeleteTB_HOLIDAY_Date(aDate:string):Boolean;
    function DeleteTB_LOCATION_AreaCodeAll(aBuildingCode,aFloorCode,aAreaCode:string):Boolean;
    function DeleteTB_LOCATION_BuildingCodeAll(aBuildingCode:string):Boolean;
    function DeleteTB_LOCATION_FloorCodeAll(aBuildingCode,aFloorCode:string):Boolean;
    function DeleteTB_PATROLTIME_Key(aSeq:string):Boolean;
    function DeleteTB_POSI_PosiCodeAll(aCompanyCode,aPosiCode:string):Boolean;
    function DeleteTB_READER_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_READER_NodeAll(aNodeNo:string):Boolean;
    function DeleteTB_RELAYGUBUN_Key(aCode:string):Boolean;
    function DeleteTB_ZONEDEVICE_DeviceAll(aNodeNo,aEcuID:string):Boolean;
    function DeleteTB_ZONEDEVICE_NodeAll(aNodeNo:string):Boolean;
  public
    function DupCheckTB_PATROLTIME_Time(aSeq,aStart,aEnd:string):integer;
  public
    function InsertIntoTB_ACCESSDEVICE_DeviceIDInit(aNodeNo,aEcuID,aNodeIp:string):Boolean;
    function InsertIntoTB_ACCESSDEVICE_DeviceName(aNodeNo,aEcuID,aDeviceName,aAcType,aPTType,aAtType,aFdType:string):Boolean;
    function InsertIntoTB_ACCESSDEVICE_NodeIp(aNodeNo,aNodeIp:string):Boolean;
    function InsertIntoTB_ACCESSINPUTTYPE_Value(aInputType,aInputName:string):Boolean;
    function InsertIntoTB_ADMINALARMAREA(aUserID,aNodeNo,aEcuID,aArmAreaNo,aGubun,aUpdateTime,aOperater:string):Boolean;
    function InsertIntoTB_ADMINALARMDEVICE_Value(aUserID,aNodeNo,aEcuID:string):Boolean;
    function InsertIntoTB_ADMINCOMPANY_Value(aUserID,aCompanyCode,aJijumCode,aDepartCode,aGrade:string):Boolean;
    function InsertIntoTB_ADMINDOOR_Value(aUserID,aNodeNo,aECUID,aDoorNo:string):Boolean;
    function InsertIntoTB_ADMINFOOD_Value(aUserID,aNodeNo,aECUID,aDoorNo:string):Boolean;
    function InsertIntoTB_ADMIN_Value(auserid,ausername,auserPw,aGradeCode,aMaster,aCompanyCode,aJijumCode,aDepartCode,aBuildingGrade,aDongCode,aFloorCode,aAreaCode:string):Boolean;
    function InsertIntoTB_ALARMCHECKCODE_Value(aCode ,aName:string):Boolean;
    function InsertIntoTB_ALARMCODEGROUP_Value(aAG_CODE,aAL_ALARMSTATUSCODE:string):Boolean;
    function InsertIntoTB_ALARMDEVICE_AlarmDeviceInit(aNodeNo,aEcuID,aNodeIp:string):Boolean;
    function InsertIntoTB_ALARMDEVICE_AlarmName(aNodeNo,aEcuID,aName:string):Boolean;
    Function InsertIntoTB_ALARMDEVICETYPECODE_Value(aCode,aName:string):Boolean;
    function InsertIntoTB_ALARMGUBUNCODE_Value(aCode, aName: string):Boolean;
    function InsertIntoTB_ALARMMODECODE_Value(aCode, aName: string):Boolean;
    function InsertIntoTB_ALARMMODENOTCARD_Value(aCode,aName:string):Boolean;
    function InsertIntoTB_ALARMSTATUSCODE_Value(aCode,aName,aView,aGrade,aSound:string):Boolean;
    function InsertIntoTB_ARMAREA(aNodeNo,aEcuID,aArmAreaNo,aArmAreaName,aArmAreaUse,
                             aLastMode,aVIEWSEQ,aLOCATEUSE,aTOTWIDTH,aTOTHEIGHT,
                             aCURX,aCURY,aDONGCODE,aFLOORCODE,aAREACODE:string):Boolean;
    Function InsertIntoTB_ATCODE_Value(aCode,aName,aWorkStartTime,aWorkEndTime,aInFromTime ,aInToTime,aNightTime:string):Boolean;
    Function InsertIntoTB_ATINCODE_Value(aAtInCode,aAtInName,aAtInType,aAtSystem:string):Boolean;
    Function InsertIntoTB_ATOUTCODE_Value(aAtOutCode,aAtOutName,aAtOutType,aAtSystem:string):Boolean;
    Function InsertIntoTB_ATVACODE_Value(aCode,aName,aType,aSystem:string):Boolean;
    function InsertIntoTB_ATEVENT_BACKtime(aDate,aCompanyCode,aEMCode,aWeekCode,aTime,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function InsertIntoTB_ATEVENT_Intime(aDate,aCompanyCode,aEMCode,aAttendCode,aWeekCode,aTime,aAtInCode,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function InsertIntoTB_ATEVENT_LEAVEtime(aDate,aCompanyCode,aEMCode,aWeekCode,aTime,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function InsertIntoTB_ATEVENT_Outtime(aDate,aCompanyCode,aEMCode,aAttendCode,aWeekCode,aTime,aAtOutCode,aJijumCode,aDepartCode,aEmName:string):Boolean;
    Function InsertIntoTB_CARDGROUPCODE_All(aCode,aName,aSeq,aUsed,aViewSeq:string):Boolean;
    function InsertIntoTB_CARDTYPE_Value(aCode,aName:string):Boolean;
    function insertintoTB_CARD_Value(aCardNo,aCardGubun,aCardType,aCompanycode,aEmCode,aPositionNum:string):Boolean;
    function InsertIntoTB_COMPANY_CompanyName(aCompanyCode,aName:string):Boolean;
    function InsertIntoTB_COMPANY_DepartName(aCompanyCode,aJijumCode,aDepartCode,aName:string):Boolean;
    function InsertIntoTB_COMPANY_JijumName(aCompanyCode,aJijumCode,aName:string):Boolean;
    function InsertIntoTB_COMPANY_Value(aCompanyCode,aJijumCode,aDepartCode,aGubun, aName:string):Boolean;
    Function InsertIntoTB_CONFIG_All(aCONFIGGROUP,aCONFIGCODE,aCONFIGVALUE:string;aDetail:string=''):Boolean;
    Function InsertIntoTB_CURRENTDAEMON_Value(aCode,aValue:string):Boolean;
    Function InsertIntoTB_DEVICECARDGROUPCODE_Value(aCode,aName,aApply,aUse:string):Boolean;
    Function InsertIntoTB_DEVICECARDNOEMPLOYEE_FieldName(aCompanyCode, aEmCode,aNodeNo, aEcuID,aFieldName,aValue:string):Boolean;
    Function InsertIntoTB_DEVICECARDNOGROUP_ALARM(aGroupCode,aNodeNo,aECUID,aTimCode,aPermit,aValue:string):Boolean;
    Function InsertIntoTB_DEVICECARDNOGROUP_DOOR(aGroupCode,aNodeNo,aECUID,aDoorNO,aTimCode,aPermit,aValue:string):Boolean;
    Function InsertIntoTB_DEVICECARDNOGROUP_FieldName(aCardGroup,aNodeNo, aEcuID,aFieldName,aValue:string):Boolean;
    function InsertIntoTB_DEVICESCHEDULE_All(aNodeNo,aECUID,aDOORNO,aDayCode,a1Time,a2Time,a3Time,a4Time,a5Time,a1Mode,a2Mode,a3Mode,a4Mode,a5Mode,aRcvAck:string):Boolean;
    Function InsertIntoTB_DEVICECARDNO_ALARM(aCardNo,aNodeNo,aECUID,aTimCode,aPermit,aValue:string;aArmAreaNo:string='0'):Boolean;
    Function InsertIntoTB_DEVICECARDNO_DOOR(aCardNo,aNodeNo,aECUID,aDoorNO,aTimCode,aPermit,aValue:string):Boolean;
    function InsertIntoTB_DEVICECARDNO_NotExistCardGroupCode(aCardNo,aGroupPermitCode:string):Boolean;
    Function InsertIntoTB_DEVICETYPE_Value(aType,aTypeName:string):Boolean;
    function InsertIntoTB_DOOR_DeviceDoorInit(aNodeNo,aEcuID,aDoorNo,aNodeIp:string):Boolean;
    function InsertIntoTB_DOOR_DoorName(aNodeNo,aEcuID,aDoorNo,aName:string):Boolean;
    function InsertIntoTB_DOORGUBUN_Value(aCode, aName: string):Boolean;
    function InsertIntoTB_DOORPOSICODE_Value(aPosiCode,aCodeName:string):Boolean;
    function InsertIntoTB_EMPHIS_Value(aCompanyCode,aEmpID,aFdmsID,aWorkMode,aCardNo,aRegGubun,aEmpNM,aHandphone,aCompanyName,aJijumName,aDepartName,aPosiName:string):Boolean;
    function InsertIntoTB_EMPLOYEE_Value(aEmpID, aEmpNM, aCompanyCode,aJijumCode,aDepartCode, aPosiCode, aCompanyPhone, aJoinDate, aRetireDate, aZipcode,aAddr1, aAddr2, aHomePhone, aHandphone, aEmpImg,afdmsID,aEmTypeCode,aWorkCode,aGradeType,aCardGroup,aWeekCode,aTimeCodeUse,aTimeGroup,aTime1,aTime2,aTime3,aTime4,aMaster: string): Boolean;
    Function InsertIntoTB_FIREGUBUN_Value(aCode, aName: string):Boolean;
    Function InsertIntoTB_FORMNAME_Value(aFmCode,aFmName,aFmUse:string):Boolean;
    Function InsertIntoTB_FOODCODE_Value(aCode,aName,aStartTime,aEndTime,aAmt:string):Boolean;
    Function InsertIntoTB_GRADEPROGRAM_Value(aClassCode,aMenuGroup,aProgramid,aGubun:string):Boolean;
    function InsertIntoTB_GRADE_Value(aCode,aName:string):Boolean;
    function InsertIntoTB_HOLIDAY_DayName(aDate,aName:string):Boolean;
    function InsertIntoTB_HOLIDAY_Value(aDate,aName,aACType,aATType:string):Boolean;
    Function InsertIntoTB_KTTMAPPINGCODE_Value(aDeviceType,aAlarmMode,aStatusCode,aFuncode,aEventCode:string):Boolean;
    function InsertIntoTB_LOCATION_AreaName(aBuildingCode,aFloorCode,aAreaCode,aName:string):Boolean;
    function InsertIntoTB_LOCATION_BuildingName(aBuildingCode,aName:string):Boolean;
    function InsertIntoTB_LOCATION_FloorName(aBuildingCode,aFloorCode,aName:string):Boolean;
    function InsertIntoTB_LOCATION_Value(aBuildingCode,aFloorCode,aAreaCode,aGubun,aName:string):Boolean;
    Function InsertIntoTB_NOTCARDALARMCODE_Value(aAN_CODE,aAN_MODE,aAL_STATUSCODE2:string):Boolean;
    function InsertintoTB_PATROLALARMEVENT(aDate,aTime,aPatrolSeq,aNodeNo,aEcuID,aReaderno,aAlarmName:string):Boolean;
    function InsertIntoTB_PATROLSTATE_Value(aDate,aNodeNo,aEcuID,aReaderno,aPatrolSeq,aPatrolState,aUpdateTime:string):Boolean;
    function InsertIntoTB_PATROLTIME(aCode,aName,aStartTime,aEndTime:string):Boolean;
    function InsertIntoTB_PERMITCODE_Value(aCode,aName:string):Boolean;
    function InsertIntoTB_PERRELAYCONFIG_Value(aCode,aValue,aDetail:string):Boolean;
    function InsertIntoTB_POSI_PosiName(aCompanyCode,aPosiCode,aName:string):Boolean;
    function InsertIntoTB_PROGRAMGROUP_Value(aGroupCode,aGroupName,aVisible,aGubun:string):Boolean;
    Function InsertIntoTB_PROGRAMID_Value(aProgramID,aGroupCode,aProgramName,aVisible,aViewSeq,aConfigCode,aEnable:string):Boolean;
    function InsertIntoTB_READER_PatrolValue(aNodeNo,aEcuID,aReaderNo,aPatrolUse,aReaderName,aTotWidth,aTotHeight,aCurX,aCurY:string):Boolean;
    function InsertIntoTB_READER_ReaderInit(aNodeNo,aEcuID,aReaderNo,aNodeIp:string):Boolean;
    function InsertIntoTB_RELAYGUBUN_Value(aCode, aName: string):Boolean;
    Function InsertIntoTB_SEMESTER(aCode,aUse,aStartDate,aEndDate:string):Boolean;
    Function InsertIntoTB_SMALLSETMAPPING_Value(aDeviceType,aMode,aState,aSmallSetCode,aExtCode,aUse:string):Boolean;
    Function InsertIntoTB_SONGHOFDCONFIG(aCode,aUse,aLimitCount:string):Boolean;
    function InsertIntoTB_SYSTEMLOG_log(aNodeNo,aEcuID,aType,aNumber,aCardNo,aData:string;aUserID:string=''):Boolean;
    Function InsertIntoTB_TIMECODE_Value(aGroup,aTime1,aTime2,aTime3,aTime4,aChange:string):Boolean;
    Function InsertIntoTB_WORKGUBUN_Value(aWorkCode,aWorkType,aWorkName:string):Boolean;
    function InsertIntoTB_ZONEDEVICE_ZoneInit(aNodeNo,aEcuID,aZoneNo,aNodeIP:string):Boolean;
    Function logInSave(aLogInfo:TLogInfo):Boolean;
  public
    function UpdateTB_ACCESSDEVICE_DaemonGubunAll(aGubun:string):Boolean;
    function UpdateTB_ACCESSDEVICE_DefaultNodeDeviceName(aNodeNo,aNodeIP:string):Boolean;
    function UpdateTB_ACCESSDEVICE_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_ACCESSDEVICE_DeviceName(aNodeNo,aEcuID,aName,aAcType,aPTType,aAtType,aFdType:string):Boolean;
    function UpdateTB_ACCESSDEVICE_NodeIP(aNodeNo,aNodeIP:string):Boolean;
    function UpdateTB_ACCESSDEVICE_Field_IntValue(aNodeNo,aEcuID,aFieldName,aValue:string):Boolean;
    function UpdateTB_ACCESSDEVICE_Field_StringValue(aNodeNo,aEcuID,aFieldName,aValue:string):Boolean;
    function UpdateTB_ACCESSDEVICE_SENDACKAll(aSendAck:string):Boolean;
    function UpdateTB_ACCESSEVENT_Field_StringValue(aDate,aTime,aNodeNo,aEcuID,aDoorNo,aCardNo,aFieldName,aValue:string):Boolean;
    Function UpdateTB_ADMIN_Value(auserid,ausername,auserPw,aGradeCode,aMaster,aCompanyCode,aJijumCode,aDepartCode,aBuildingGrade,aDongCode,aFloorCode,aAreaCode:string):Boolean;
    function UpdateTB_ALARMDEVICE_BuildingPosition(aNodeNo,aEcuID,aBuildingCode,aFloorCode,aAreaCode:string):Boolean;
    function UpdateTB_ALARMDEVICE_DefaultDeviceAlarmDeviceName(aNodeNo,aEcuID,aName:string):Boolean;
    function UpdateTB_ALARMDEVICE_DefaultNodeAlarmDeviceName(aNodeNo,aNodeIP:string):Boolean;
    function UpdateTB_ALARMDEVICE_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_ALARMDEVICE_DeviceName(aNodeNo,aEcuID,aName:string):Boolean;
    function UpdateTB_ALARMDEVICE_TelNumber(aNodeNo,aEcuID,aTelNumber,aMemo:string):Boolean;
    function UpdateTB_ALARMEVENT_AlarmCheck(aDate,aTime,aNodeNo,aEcuID,aMsgNo,aCheckOk,aCheckCode,aCheckUser,aCheckMessage:string):Boolean;
    function UpdateTB_ALARMEVENT_Field_StringValue(aDate,aTime,aNodeNo,aEcuID,aMsgNo,aFieldName,aValue:string):Boolean;
    function UpdateTB_ARMAREA_Field_IntValue(aNodeNo,aEcuID,aArmAreaNo,aFieldName,aValue:string):Boolean;
    function UpdateTB_ARMAREA_Field_StringValue(aNodeNo,aEcuID,aArmAreaNo,aFieldName,aValue:string):Boolean;
    function UpdateTB_ARMAREA_FromAlarmDeviceMemo :Boolean;
    function UpdateTB_ATEVENT_BACKtime(aDate,aCompanyCode,aEMCode,aTime,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function UpdateTB_ATEVENT_CompanyCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode:string):Boolean;
    function UpdateTB_ATEVENT_EmInfoInit:Boolean;
    function UpdateTB_ATEVENT_Intime(aDate,aCompanyCode,aEMCode,aAttendCode,aWeekCode,aTime,aAtInCode,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function UpdateTB_ATEVENT_LEAVEtime(aDate,aCompanyCode,aEMCode,aTime,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function UpdateTB_ATEVENT_OutTime(aDate,aCompanyCode,aEMCode,aNowTime,aAtOutCode,aJijumCode,aDepartCode,aEmName:string):Boolean;
    function UpdateTB_CARDFINGER_FingerUserIDPermit(aFdmsNo,aPermit:string):Boolean;
    function UpdateTB_CARDGROUPCODE_Field_StringValue(aCode,aFieldName,aData:string):Boolean;
    function UpdateTB_CARD_CardType(aCardNo,aCardGubun,aCardType:string):Boolean;
    function UpdateTB_CARD_CompanyCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode:string):Boolean;
    Function UpdateTB_CARD_DOORGRADEInitialize(aDoorGrade:string):Boolean; //출입권한 부여
    Function UpdateTB_CARD_EmCode(aCardNo,aCardGubun,aCardType,aCompanyCode,aEmCode:string):Boolean;
    Function UpdateTB_CARD_PoitionNum(aCardNo:string;aPositionNumber:integer):Boolean;
    function UpdateTB_COMPANY_CompanyName(aCompanyCode,aName:string):Boolean;
    function UpdateTB_COMPANY_DepartName(aCompanyCode,aJijumCode,aDepartCode,aName:string):Boolean;
    function UpdateTB_COMPANY_JijumName(aCompanyCode,aJijumCode,aName:string):Boolean;
    Function UpdateTB_CONFIG_Value(aCONFIGGROUP,aCONFIGCODE,aCONFIGVALUE:string):Boolean;
    Function UpdateTB_CURRENTDAEMON_Value(aCode,aValue:String):Boolean;
    Function UpdateTB_DEVICECARDGROUPCODE_Apply(aGroupCode,aValue:string):Boolean;
    function UpdateTB_DEVICECARDGROUPCODE_ApplyChange(aGroupPermitCode,aOldApply,aNewApply:string):Boolean;
    Function UpdateTB_DEVICECARDNOGROUP_Field_StringValue(aCardGroup,aNodeNo, aEcuID,aFieldName,aValue:string):Boolean;
    Function UpdateTB_DEVICECARDGROUPCODE_Name(aGroupCode,aName:string):Boolean;
    Function UpdateTB_DEVICECARDGROUPCODE_Use(aGroupCode,aUse:string):Boolean;
    Function UpdateTB_DEVICECARDNOEMPLOYEE_Field_StringValue(aCompanyCode, aEmCode,aNodeNo, aEcuID,aFieldName,aValue:string):Boolean;
    Function UpdateTB_DEVICECARDNOGROUP_ALARM(aGroupCode,aNodeNo,aECUID,aTimCode,aPermit,aValue:string):Boolean;
    Function UpdateTB_DEVICECARDNOGROUP_DOOR(aGroupCode,aNodeNo,aECUID,aDoorNO,aTimCode,aPermit,aValue:string):Boolean;
    Function UpdateTB_DEVICECARDNO_ALARM(aCardNo,aNodeNo,aECUID,aTimCode,aPermit,aValue:string;aArmAreaNo:string='0'):Boolean;
    Function UpdateTB_DEVICECARDNO_AllRCVACK(OrgState,NewState:String):Boolean;   //권한전송 상태 변경
    Function UpdateTB_DEVICECARDNO_CardRecv(aCardNo,aRecv:string):Boolean;
    function UpdateTB_DEVICECARDNO_CardStop(aCardNo:string):Boolean;
    function UpdateTB_DEVICECARDNO_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    Function UpdateTB_DEVICECARDNO_DOOR(aCardNo,aNodeNo,aECUID,aDoorNO,aTimCode,aPermit,aValue:string):Boolean;
    function UpdateTB_DEVICECARDNO_ExistCardGroupCode(aCardNo,aGroupPermitCode:string):Boolean;
    function UpdateTB_DEVICECARDNO_HIS_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_DEVICECARDNO_PROMISE_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function updateTB_DEVICESCHEDULE_All(aNodeNo,aECUID,aDOORNO,aDayCode,a1Time,a2Time,a3Time,a4Time,a5Time,a1Mode,a2Mode,a3Mode,a4Mode,a5Mode,aRcvAck:string):Boolean;
    function UpdateTB_DOOR_BuildingPosition(aNodeNo,aEcuID,aDoorNo,aBuildingCode,aFloorCode,aAreaCode:string):Boolean;
    function UpdateTB_DOOR_DefaultDeviceDoorName(aNodeNo,aEcuID,aName:string):Boolean;
    function UpdateTB_DOOR_DefaultNodeDoorName(aNodeNo,aNodeIP:string):Boolean;
    function UpdateTB_DOOR_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_DOOR_DoorName(aNodeNo,aEcuID,aDoorNo,aName:string):Boolean;
    function UpdateTB_Door_Field_IntValue(aNodeNo,aEcuID,aDoorNo,aFieldName,aValue:string):Boolean;
    function UpdateTB_Door_Field_StringValue(aNodeNo,aEcuID,aDoorNo,aFieldName,aValue:string):Boolean;
    function UpdateTB_DOOR_Schedule(aNodeNo,aEcuID,aDoorNo,aSchedule:string):Boolean;
    function UpdateTB_EMPLOYEE_Apply(aCompanyCode,aEmCode,aOldApply,aNewApply:string):Boolean;
    function updateTB_EMPLOYEE_CardPermitGroup(aCompanyCode,aEmCode,aCardPermitGroup,aApply:string):Boolean;
    function UpdateTB_EMPLOYEE_CompanyCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode:string):Boolean;
    function UpdateTB_EMPLOYEE_DepartCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode,aJijumCode,aDepartCode:string):Boolean;
    function UpdateTB_EMPLOYEE_EMIMAGE(aCompanyCode,aEmpID,aEmpImg:string):Boolean;
    function UpdateTB_EMPLOYEE_EmTypeChange(aOrgCompanyCode,aOrgEmCode,aEmType:string):Boolean;
    function UpdateTB_EMPLOYEE_JijumCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode,aJijumCode:string):Boolean;
    function updateTB_EMPLOYEE_LimitDate(aCompanyCode,aEmCode,aDate:string):Boolean;
    function UpdateTB_EMPLOYEE_NULLWGCODE(aCode:string):Boolean;
    function UpdateTB_EMPLOYEE_PosiCodeChange(aOrgCompanyCode,aOrgEmCode,aPosiCode:string):Boolean;
    function UpdateTB_EMPLOYEE_Field_IntValue(aCompanyCode,aEmCode,aFieldName,aValue:string):Boolean;
    function UpdateTB_EMPLOYEE_Field_StringValue(aCompanyCode,aEmCode,aFieldName,aValue:string):Boolean;
    function UpdateTB_EMPLOYEE_Value(aOldCompanyCode,aOldEmCode,aEmpID, aEmpNM, aCompanyCode,aJijumCode,aDepartCode, aPosiCode, aCompanyPhone, aJoinDate, aRetireDate, aZipcode,aAddr1, aAddr2, aHomePhone, aHandphone, aEmpImg,afdmsID,aEmTypeCode,aWorkCode, aGradeType,aCardGroup,aWeekCode,aTimeCodeUse,aTimeGroup,aTime1,aTime2,aTime3,aTime4,aMaster: string): Boolean;
    function UpdateTB_EMPLOYEE_RGCODEisNull:Boolean;
    function UpdateTB_FOODEVENT_CompanyCodeChange(aOrgCompanyCode,aOrgEmCode,aCompanyCode:string):Boolean;
    function UpdateTB_FOODEVENT_EmInfoInit:Boolean;
    function UpdateTB_FOOD_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_FTPLIST_RETRYCOUNTInitialize:Boolean;
    function UpdateTB_GRADEPROGRAM_DELETEValue(aAdminClassCode,aMenuGroup,aProgramID,aDeleteGrade:string):Boolean;
    function UpdateTB_GRADEPROGRAM_INSERTValue(aAdminClassCode,aMenuGroup,aProgramID,aInsertGrade:string):Boolean;
    function UpdateTB_GRADEPROGRAM_UPDATEValue(aAdminClassCode,aMenuGroup,aProgramID,aUpdateGrade:string):Boolean;
    function UpdateTB_GRADE_GradeName(aCode,aName:string):Boolean;
    function UpdateTB_HOLIDAY_DayName(aDate,aName:string):Boolean;
    function updateTB_HOLIDAY_Value(aDate,aName,aACType,aATType:string):Boolean;
    function UpdateTB_LOCATION_AreaName(aBuildingCode,aFloorCode,aAreaCode,aName:string):Boolean;
    function UpdateTB_LOCATION_BuildingName(aBuildingCode,aName:string):Boolean;
    function UpdateTB_LOCATION_BuildingPosition(aBuildingCode,aParentImageWidth,aParentImageHeight,aCurX,aCurY:string):Boolean;
    function UpdateTB_LOCATION_FloorName(aBuildingCode,aFloorCode,aName:string):Boolean;
    function UpdateTB_NOTCARDALARMCODE_Statuscode2(aCode,aMode,aStatusCode:string):Boolean;
    function UpdateTB_PATROLSTATE_State(aDate,aNodeNo,aEcuID,aReaderno,aPatrolSeq,aPatrolState,aUpdateTime:string):Boolean;
    function UpdateTB_PATROLTIME_Value(aSeq,aName,aStart,aEnd:string):Boolean;
    function UpdateTB_POSI_PosiName(aCompanyCode,aPosiCode,aName:string):Boolean;
    function UpdateTB_PROGRAMID_SetVisible:Boolean;
    function UpdateTB_READER_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
    function UpdateTB_READER_PatrolDelete(aNodeNo,aEcuID,aReaderNo:string):Boolean;
    function UpdateTB_READER_PatrolValue(aNodeNo,aEcuID,aReaderNo,aPatrolUse,aReaderName,aTotWidth,aTotHeight,aCurX,aCurY:string):Boolean;
    function UpdateTB_RELAYGUBUN_Field_StringValue(aCode,aFieldName,aValue:string):Boolean;
    Function UpdateTB_TIMECODE_Value(aGroup,aTime1,aTime2,aTime3,aTime4,aChange:string):Boolean;
    function UpdateTB_ZONEDEVICE_DefaultDeviceAlarmDeviceName(aNodeNo,aEcuID,aName:string):Boolean;
    function UpdateTB_ZONEDEVICE_DefaultNodeAlarmDeviceName(aNodeNo,aNodeIP:string):Boolean;
    function UpdateTB_ZONEDEVICE_DeviceIDChange(aNodeNo,aNewEcuID,aOldEcuID:string):Boolean;
  end;

var
  dmZeronEventDBFunction: TdmZeronEventDBFunction;

implementation

uses
  uCommonFunction,
  uCommonVariable,
  uDataBase,
  uDBVariable,
  uDeviceFunction,
  uFormVariable,uDataBaseConfig;

{%CLASSGROUP 'System.Classes.TPersistent'}

{$R *.dfm}

{ TDataModule1 }


{ TdmDBFunction }

function TdmZeronEventDBFunction.CheckTB_ACCESSDEVICE_DeviceID(aNodeNo, aEcuID,
  aOldEcuID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  if aEcuID = aOldEcuID then Exit;

  stSql := 'select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ACCESSDEVICE_ECU(aNodeNo,
  aEcuID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_GUBUN = ''0'' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + '';
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ACCESSDEVICE_JavaraType(aNodeNo,
  aECUID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  stSql := stSql + ' AND AC_JAVARATYPE = ''Y'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ACCESSDEVICE_NodeIP(aNodeIP,aNodeNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_MCUIP = ''' + aNodeIP + ''' ';
  stSql := stSql + ' AND AC_GUBUN = ''0'' ';
  stSql := stSql + ' AND AC_NODENO <> ' + aNodeNo + '';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ACCESSDEVICE_NodeNo(aNodeNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_GUBUN = ''0'' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + '';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.checkTB_ADMIN_UserID(aUserID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select * from TB_ADMIN ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ALARMDEVICE_DeviceID(aNodeNo,
  aEcuID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select * from TB_ALARMDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ARMAREA_Key(aNodeNo, aEcuID,
  aArmAreaNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  aArmAreaNo := FillZeroStrNum(aArmAreaNo,2);

  stSql := 'select * from TB_ARMAREA ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AR_AREANO = ''' + aArmAreaNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ATEVENT_BussinessInTime(aDate, aNowTime,
  aCompanyCode, aEMCode: String): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  result := False;
  stSql := 'Select * from TB_ATEVENT ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and ( AT_BACKTIME is null ';
  stSql := stSql + ' OR AT_BACKTIME < ''' + aNowTime + ''') ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOEventConnection;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;

      if recordCount > 0 then
      begin
        result := True;
      end;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ATEVENT_BussinessOutTime(aDate, aNowTime,
  aCompanyCode, aEMCode: String): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  result := False;
  stSql := 'Select * from TB_ATEVENT ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and ( AT_LEAVETIME is null ';
  stSql := stSql + ' OR AT_LEAVETIME > ''' + aNowTime + ''') ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOEventConnection;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;

      if recordCount > 0 then
      begin
        result := True;
      end;
    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ATEVENT_EmCode(aDate, aCompanyCode, aEMCode,
  aTime, aWeekCode: string): Boolean;
var
  stSql : string;
  stTemp : string;
  TempAdoQuery :TADOQuery;
begin
  result := False;
  stSql := 'select a.*,b.AT_INFROMTIME,b.AT_SINFROMTIME,b.AT_HINFROMTIME,b.AT_OUTRANGE,b.AT_SOUTRANGE,b.AT_HOUTRANGE from TB_ATEVENT a ';
  stSql := stSql + ' Left Join TB_ATCODE b ';
  stSql := stSql + ' ON ( a.AT_ATCODE = b.AT_ATCODE ) ';
  stSql := stSql + ' where a.AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND a.CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND a.EM_CODE = ''' + aEMCode + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      //Sql.Clear;
      Sql.Text :=  stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;  //오늘 출근
      Try
  {      if strtoint(aTime) < strtoint(aYesterDayStandTime) then   //어제 기준 시간보다 작으면 무조건 어제 퇴근으로 처리 함
        begin
          result := True;
          Exit;
        end; }
        if Not isDigit(FindField('AT_OUTRANGE').AsString) then
        begin
          result := True; //퇴근 범위가 없으면 어제 날짜로 리턴
          Exit;
        end;
        if aWeekCode = '1' then                 //1: 일요일,7:토요일
        begin
          //if (strtoint(FindField('AT_HINFROMTIME').AsString) < strtoint(aTime)) then
          //begin
            if strtoint(FindField('AT_HOUTRANGE').AsString) = 0 then result := True
            else if (strtoint(aTime) < strtoint(FindField('AT_HOUTRANGE').AsString)) then result := True;  //퇴근 범위에 있으면 퇴근으로 인식하자
          //end;
        end else if aWeekCode = '7' then
        begin
          //if (strtoint(FindField('AT_SINFROMTIME').AsString) < strtoint(aTime)) then
          //begin
            if strtoint(FindField('AT_SOUTRANGE').AsString) = 0 then result := True
            else if (strtoint(aTime) < strtoint(FindField('AT_SOUTRANGE').AsString)) then result := True;  //퇴근 범위에 있으면 퇴근으로 인식하자
          //end;
        end else
        begin
          //if (strtoint(FindField('AT_INFROMTIME').AsString) < strtoint(aTime)) then
          //begin
            if strtoint(FindField('AT_OUTRANGE').AsString) = 0 then result := True
            else if (strtoint(aTime) < strtoint(FindField('AT_OUTRANGE').AsString)) then result := True;  //퇴근 범위에 있으면 퇴근으로 인식하자
          //end;
        end;
      Except
        Exit;
      End;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ATEVENT_Key(aDate, aCompanyCode,
  aEMCode: string): integer;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin

  result := -1;
  stSql := 'Select * from TB_ATEVENT ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOEventConnection;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;
      result := 0;
      if recordCount < 1 then Exit;

      result := 1;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_ATEVENT_OutTime(aDate, aNowTime, aCompanyCode,
  aEMCode: String): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;

begin

  result := False;
  stSql := 'Select * from TB_ATEVENT ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and ( AT_OUTTIME is null ';
  stSql := stSql + ' OR AT_OUTTIME < ''' + aNowTime + ''') ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOEventConnection;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;

      if recordCount > 0 then
      begin
        result := True;
      end;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_CARDFINGER_FingerNo(aFdmsNo: string;aPermit:string=''): integer;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin

  result := -1;
  stSql := 'select * from TB_CARDFINGER ';
  stSql := stSql + ' Where FP_USERID = ' + aFdmsNo + ' ';
  if aPermit <> '' then stSql := stSql + ' AND FP_PERMIT = ''' + aPermit + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;
      result := 0;
      if Recordcount > 0 then  result := 1;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_CARD_Cardno(aCardno: string;var aCardType,aCompanyCode,aEmCode,aEmName:string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select a.*,b.EM_NAME from TB_CARD a ';
  stSql := stSql + ' Left Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON(a.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE  ';
  stSql := stSql + ' AND a.EM_CODE = b.EM_CODE ) ';
  stSql := stSql + ' Where  a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.CA_CARDNO = ''' + aCardno + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
        aCardType := FindField('CA_GUBUN').AsString;
        aCompanyCode := FindField('CO_COMPANYCODE').AsString;
        aEmCode := FindField('EM_CODE').AsString;
        aEmName := FindField('EM_NAME').AsString;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_CARD_StateValue(aCardno: string;
  var aCompanyCode, aEmCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select * from TB_CARD ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardno + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
        aCompanyCode := FindField('CO_COMPANYCODE').AsString;
        aEmCode := FindField('EM_CODE').AsString;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_COMPANY_Blank: integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_COMPANY ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_CONFIG_DoorLongTime: integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_CONFIGGROUP = ''DAEMON'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''LONGTIMECD'' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_DEVICECARDNOEMPLOYEE_Key(aCompanyCode, aEmCode,
  aNodeNo, aEcuID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_DEVICECARDNOEMPLOYEE ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_DEVICECARDNOGROUP_Code(aGroupCode, aNodeNo,
  aECUID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_DEVICECARDNOGROUP ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP = ''' + aGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_DEVICECARDNO_CardDevice(aCardNo, aNodeNo,
  aECUID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  stSql := 'select * from TB_DEVICECARDNO ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.checkTB_DEVICESCHEDULE_DayCode(aNodeNo, aEcuID, aDoorNo,
  aDayCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select * from TB_DEVICESCHEDULE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';
  stSql := stSql + ' AND DE_DAYCODE = ''' + aDayCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.checkTB_DEVICESCHEDULE_DoorNo(aNodeNo, aEcuID,
  aDoorNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;

  stSql := 'select * from TB_DEVICESCHEDULE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_DOOR_DoorNo(aNodeNo, aEcuID,
  aDoorNo,aOldDoorNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  if aDoorNo = aOldDoorNo then Exit;

  stSql := 'select * from TB_DOOR ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_DOOR_Key(aNodeNo, aEcuID,
  aDoorNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_DOOR ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_CompanyCode(
  aCompanyCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_CompanyCodeLike(aCompanyCode,
  aJijumCode, aDepartCode, aGubunCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  if strtoint(aGubunCode) > 1 then stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  if strtoint(aGubunCode) > 2 then stSql := stSql + ' AND CO_DEPARTCODE Like ''' + aDepartCode + '%'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_EmCode(aCompanyCode,
  aEmCode: string;var aEmName:string;var aFdmsID:string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        aEmName := FindField('EM_NAME').AsString;
        aFdmsID := FindField('FDMS_ID').AsString;
        result := 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_FpmsID(aFpmsID: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND FDMS_ID = ' + aFpmsID + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_GroupCodeUse(
  aGroupCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND EM_GRADETYPE = 1 ';    //0.개인별,1.그룹별,2.소속별
  stSql := stSql + ' AND CA_GROUP Like ''' + aGroupCode + '%'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_EMPLOYEE_PosiCode(aCompanyCode,
  aPosiCode: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND PO_POSICODE = ''' + aPosiCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_GRADEPROGRAM_ClassProgramID(aClassCode,
  aMenuGroup, aProgramID, aGubun: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := ' select * from TB_GRADEPROGRAM ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + '''';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aClassCode + '''';
  stSql := stSql + ' AND PR_GROUPCODE = ''' + aMenuGroup + '''';
  if Trim(aProgramid) <> '' then
    stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgramid + '''';
  stSql := stSql + ' AND GR_GUBUN = ''' +  aGubun + '''';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_HOLIDAY_Date(aDate: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_HOLIDAY ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND HO_DAY = ''' + aDate + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
        if FindField('HO_STATE').AsString = 'I' then result := 2;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_PATROLALARMEVENT_Key(aDate, aPatrolSeq, aNodeNo,
  aEcuID, aReaderno: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_PATROLALARMEVENT ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PE_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderno + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aPatrolSeq + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_PATROLSTATE_Key(aDate, aNodeNo, aEcuID,
  aReaderno, aPatrolTimeSeq: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_PATROLSTATE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PS_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderno + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aPatrolTimeSeq + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_PATROLSTATE_SeqUse(
  aPatrolTimeSeq: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_PATROLSTATE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aPatrolTimeSeq + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_PATROLTIME_Key(aSeq: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_PATROLTIME ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aSeq + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else
      begin
        result := 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_POSI_PosiName(aCompanyCode,
  aPosiName: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_POSI ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND PO_NAME = ''' + aPosiName + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_READER_Key(aNodeNo, aEcuID,
  aReaderNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_READER ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_READER_PatrolReaderUse(aNodeNo, aEcuID,
  aReaderNo: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_READER ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderNo + ''' ';
  stSql := stSql + ' AND RE_PATROLUSE = ''1'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CheckTB_RELAYGUBUN_Name(aName: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_RELAYGUBUN ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND RG_NAME = ''' + aName + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.CopyTB_CARDFINGER_FingerUserID(aOrgFdmsNo,
  aNewFdmsid: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_CARDFINGER (';
  stSql := stSql + ' FP_USERID, ';
  stSql := stSql + ' FP_CARDNO, ';
  stSql := stSql + ' FP_DATA, ';
  stSql := stSql + ' FP_PERMIT, ';
  stSql := stSql + ' FP_CHANGE  ';
  stSql := stSql + ' ) ';
  stSql := stSql + ' select ';
  stSql := stSql + '' + aNewFdmsid + ',';
  stSql := stSql + ' FP_CARDNO,';
  stSql := stSql + ' FP_DATA,';
  stSql := stSql + ' FP_PERMIT,';
  stSql := stSql + ' FP_CHANGE ';
  stSql := stSql + ' From TB_CARDFINGER ';
  stSql := stSql + ' Where FP_USERID = ' + aOrgFdmsNo + '';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.CopyTB_DEVICECARDNOGROUP_ChildCode(aParentCode,
  aChildCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DEVICECARDNOGROUP  ';
  stSql := stSql + '( GROUP_CODE, ';
  stSql := stSql + 'CA_GROUP, ';
  stSql := stSql + 'AC_NODENO, ';
  stSql := stSql + 'AC_ECUID, ';
  stSql := stSql + 'DE_DOOR1, ';
  stSql := stSql + 'DE_DOOR2, ';
  stSql := stSql + 'DE_DOOR3, ';
  stSql := stSql + 'DE_DOOR4, ';
  stSql := stSql + 'DE_DOOR5, ';
  stSql := stSql + 'DE_DOOR6, ';
  stSql := stSql + 'DE_DOOR7, ';
  stSql := stSql + 'DE_DOOR8, ';
  stSql := stSql + 'DE_USEACCESS, ';
  stSql := stSql + 'DE_USEALARM, ';
  stSql := stSql + 'DE_TIMECODE, ';
  stSql := stSql + 'DE_PERMIT, ';
  stSql := stSql + 'DE_RCVACK, ';
  stSql := stSql + 'DE_UPDATETIME, ';
  stSql := stSql + 'DE_UPDATEOPERATOR, ';
  stSql := stSql + 'AC_MCUID, ';
  stSql := stSql + 'DE_ALARM0, ';
  stSql := stSql + 'DE_ALARM1, ';
  stSql := stSql + 'DE_ALARM2, ';
  stSql := stSql + 'DE_ALARM3, ';
  stSql := stSql + 'DE_ALARM4, ';
  stSql := stSql + 'DE_ALARM5, ';
  stSql := stSql + 'DE_ALARM6, ';
  stSql := stSql + 'DE_ALARM7, ';
  stSql := stSql + 'DE_ALARM8 ) ';
  stSql := stSql + ' select ';
  stSql := stSql + ' GROUP_CODE, ';
  stSql := stSql + '''' +  aChildCode + ''', ';
  stSql := stSql + 'AC_NODENO, ';
  stSql := stSql + 'AC_ECUID, ';
  stSql := stSql + 'DE_DOOR1, ';
  stSql := stSql + 'DE_DOOR2, ';
  stSql := stSql + 'DE_DOOR3, ';
  stSql := stSql + 'DE_DOOR4, ';
  stSql := stSql + 'DE_DOOR5, ';
  stSql := stSql + 'DE_DOOR6, ';
  stSql := stSql + 'DE_DOOR7, ';
  stSql := stSql + 'DE_DOOR8, ';
  stSql := stSql + 'DE_USEACCESS, ';
  stSql := stSql + 'DE_USEALARM, ';
  stSql := stSql + 'DE_TIMECODE, ';
  stSql := stSql + 'DE_PERMIT, ';
  stSql := stSql + '''N'', ';
  stSql := stSql + 'DE_UPDATETIME, ';
  stSql := stSql + 'DE_UPDATEOPERATOR, ';
  stSql := stSql + 'AC_MCUID, ';
  stSql := stSql + 'DE_ALARM0, ';
  stSql := stSql + 'DE_ALARM1, ';
  stSql := stSql + 'DE_ALARM2, ';
  stSql := stSql + 'DE_ALARM3, ';
  stSql := stSql + 'DE_ALARM4, ';
  stSql := stSql + 'DE_ALARM5, ';
  stSql := stSql + 'DE_ALARM6, ';
  stSql := stSql + 'DE_ALARM7, ';
  stSql := stSql + 'DE_ALARM8 ';
  stSql := stSql + ' From  TB_DEVICECARDNOGROUP ';
  stSql := stSql + ' Where CA_GROUP = ''' + aParentCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.CopyTB_DEVICECARDNO_Card(aOldCardNo,
  aNewCardNo: string): Boolean;
var
  stSql : string;
begin
    stSql := ' Insert INTO TB_DEVICECARDNO (GROUP_CODE, ';
    stSql := stSql + ' AC_NODENO, ';
    stSql := stSql + ' AC_ECUID, ';
    stSql := stSql + ' CA_CARDNO, ';
    stSql := stSql + ' DE_DOOR1, ';
    stSql := stSql + ' DE_DOOR2, ';
    stSql := stSql + ' DE_USEACCESS, ';
    stSql := stSql + ' DE_USEALARM, ';
    stSql := stSql + ' DE_TIMECODE, ';
    stSql := stSql + ' DE_PERMIT, ';
    stSql := stSql + ' DE_RCVACK, ';
    stSql := stSql + ' DE_UPDATETIME, ';
    stSql := stSql + ' DE_UPDATEOPERATOR) ';
    stSql := stSql + ' select ''' + G_stGroupCode + ''', ';
    stSql := stSql + ' b.AC_NODENO, ';
    stSql := stSql + ' b.AC_ECUID, ';
    stSql := stSql + ' ''' + aNewCardNO + ''', ';
    stSql := stSql + ' b.DE_DOOR1, ';
    stSql := stSql + ' b.DE_DOOR2, ';
    stSql := stSql + ' b.DE_USEACCESS, ';
    stSql := stSql + ' b.DE_USEALARM, ';
    stSql := stSql + ' b.DE_TIMECODE, ';
    stSql := stSql + ' b.DE_PERMIT, ';
    stSql := stSql + ' ''N'', ';
    stSql := stSql + ' '''+ formatDateTime('yyyymmddHHMMSS',Now) + ''', ';
    stSql := stSql + ' '''+ G_stAdminUserID + ''' ';
    stSql := stSql + ' From TB_DEVICECARDNO B  ';
    stSql := stSql + ' where B.GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND B.CA_CARDNO = ''' + aOldCardNO + ''' ';
    stSql := stSql + ' AND NOT EXISTS ';
    stSql := stSql + ' (SELECT * FROM TB_DEVICECARDNO A ';
    stSql := stSql + ' WHERE A.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = b.AC_NODENO ';
    stSql := stSql + ' AND A.AC_ECUID = b.AC_ECUID  ';
    stSql := stSql + ' AND A.CA_CARDNO = ''' + aNewCardNO + ''')  ';

    result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ACCESSDEVICE_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ACCESSDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ACCESSDEVICE_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ACCESSDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ACCESSEVENT_ToDate(aDate: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ACCESSEVENT ';
  stSql := stSql + ' where AC_DATE <= ''' + aDate + ''' ';
  stSql := stSql + ' AND GROUP_CODE = ''' + G_stGroupCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ADMINALARMDEVICE_AlarmGrade(aUserID, aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINALARMDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + '' ;
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMINCOMPANY_UserIDAll(
  aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINCOMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ADMINCOMPANY_Value(aCompanyCode, aJijumCode,
  aDepartCode, aGubun, aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINCOMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ' ;
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_DEPARTCODE = ''' + aDepartCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''' + aGubun + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMINDOOR_DoorGrade(aNodeNo, aECUID, aDoorNo,
  aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINDOOR ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMINDOOR_UserIDAll(aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINDOOR ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMINFOOD_FoodGrade(aNodeNo, aECUID, aDoorNo,
  aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINFOOD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + ''' ';
  stSql := stSql + ' AND FO_DOORNO = ''' + aDoorNo + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMINFOOD_UserIDAll(aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Delete from TB_ADMINFOOD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ADMIN_UserID(aUserID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ADMIN ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AD_USERID = ''' + aUserID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ALARMDEVICE_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ALARMDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ALARMDEVICE_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ALARMDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ALARMEVENT_ToDate(aDate: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ALARMEVENT ';
  stSql := stSql + ' where AL_DATE <= ''' + aDate + ''' ';
  stSql := stSql + ' AND GROUP_CODE = ''' + G_stGroupCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_CARDFINGER_FingerUserID(
  aFdmsid: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_CARDFINGER ';
  stSql := stSql + ' where FP_USERID = ' + aFdmsid + '';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_CARD_CardNo(aCardNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_CARD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_CARD_EMCODE(aCompanyCode,
  aEmCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_CARD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_COMPANY_CompanyCodeAll(
  aCompanyCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_COMPANY_DepartCodeAll(aCompanyCode, aJijumCode,
  aDepartCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_DEPARTCODE Like ''' + aDepartCode + '%'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_COMPANY_JijumCodeAll(aCompanyCode,
  aJijumCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_DEVICECARDNOEMPLOYEE_EMCODEAll(aCompanyCode,
  aEmCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DEVICECARDNOEMPLOYEE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessEventExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_DEVICECARDNOGROUP_GroupCode(
  aCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DEVICECARDNOGROUP ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP = ''' + aCode + ''' ';

  result := dmDataBase.ProcessEventExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_DEVICECARDNO_CardNo(aCardNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DEVICECARDNO ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_DOOR_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DOOR ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_DOOR_DoorNo(aNodeNo, aEcuID,
  aDoorNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DOOR ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);


end;

function TdmZeronEventDBFunction.DeleteTB_DOOR_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_DOOR ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_EMPLOYEE_EmCode(aCompanyCode,
  aEmCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_EMPLOYEE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_FOOD_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_FOOD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_FOOD_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_FOOD ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_GRADEPROGRAM_ClassProgramID(aClassCode,
  aMenuGroupCode, aProgramid, aGubun: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_GRADEPROGRAM  ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + '''';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aClassCode + '''';
  stSql := stSql + ' AND PR_GROUPCODE = ''' + aMenuGroupCode + '''';
  stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgramid + '''';
  stSql := stSql + ' AND GR_GUBUN = ''' +  aGubun + '''';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_GRADEPROGRAM_GradeCodeAll(
  aCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_GRADEPROGRAM ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_GRADE_GradeCodeAll(aCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_GRADE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_HOLIDAY_Date(aDate: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_HOLIDAY set HO_STATE = ''D'', ';
  stSql := stSql + ' HO_SEND = ''N'' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND HO_DAY = ''' + aDate + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_LOCATION_AreaCodeAll(aBuildingCode, aFloorCode,
  aAreaCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_LOCATION ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_AREACODE Like ''' + aAreaCode + '%'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_LOCATION_BuildingCodeAll(
  aBuildingCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_LOCATION ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_LOCATION_FloorCodeAll(aBuildingCode,
  aFloorCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_LOCATION ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_PATROLTIME_Key(aSeq: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_PATROLTIME ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aSeq + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_POSI_PosiCodeAll(aCompanyCode,
  aPosiCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_POSI ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND PO_POSICODE = ''' + aPosiCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_READER_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_READER ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_READER_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_READER ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_RELAYGUBUN_Key(aCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_RELAYGUBUN ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND RG_CODE = ''' + aCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.DeleteTB_ZONEDEVICE_DeviceAll(aNodeNo,
  aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ZONEDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.DeleteTB_ZONEDEVICE_NodeAll(aNodeNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Delete From TB_ZONEDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;


function TdmZeronEventDBFunction.DupCheckTB_PATROLTIME_Time(aSeq, aStart,
  aEnd: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := -1;
  stSql := 'select * from TB_PATROLTIME ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_SEQ <> ' + aSeq + ' ';
  if aStart < aEnd then
  begin
    stSql := stSql + ' AND ( (PT_STRARTTIME Between ''' + aStart + ''' and ''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_ENDTIME Between ''' + aStart + ''' and ''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_STRARTTIME < ''' + aStart + ''' and PT_ENDTIME > ''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_STRARTTIME > ''' + aStart + ''' and PT_ENDTIME < ''' + aEnd + ''') ';
    stSql := stSql + ' ) ';
  end else
  begin
    stSql := stSql + ' AND ( (PT_STRARTTIME Between ''' + aStart + ''' and ''2400'') ';
    stSql := stSql + '      OR(PT_ENDTIME Between ''' + aStart + ''' and ''2400'') ';
    stSql := stSql + '      OR(PT_STRARTTIME Between ''0000'' and ''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_ENDTIME Between ''0000'' and ''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_STRARTTIME < ''' + aStart + ''' and PT_ENDTIME >''' + aEnd + ''') ';
    stSql := stSql + '      OR(PT_STRARTTIME > ''' + aStart + ''' and PT_ENDTIME < ''' + aEnd + ''') ';
    stSql := stSql + ' ) ';
  end;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordcount = 0 then result := 0
      else result := 1;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetAlarmAreaInformation(aNodeNo, aEcuID,
  aAlarmAreaNo: string; var aAlarmAreaName, aBuildingName: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  result := False;
  if Not dmDataBase.DBSessionCheck then
  begin
    TDataBaseConfig.GetObject.DBConnected := False;
    TDataBaseConfig.GetObject.DataBaseConnect;
    if TDataBaseConfig.GetObject.DBConnected then Exit;
  end;

  stSql := 'select a.*,b.LO_NAME as BUILDINGNAME,c.LO_NAME as FLOORNAME,d.LO_NAME as AREANAME from TB_ALARMDEVICE a ';
  stSql := stSql + ' Left Join TB_LOCATION b ';
  stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = b.LO_DONGCODE ';
  stSql := stSql + ' AND b.LO_GUBUN = ''0'') ';
  stSql := stSql + ' Left Join TB_LOCATION c ';
  stSql := stSql + ' ON (a.GROUP_CODE = c.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = c.LO_DONGCODE ';
  stSql := stSql + ' AND a.LO_FLOORCODE = c.LO_FLOORCODE ';
  stSql := stSql + ' AND c.LO_GUBUN = ''1'') ';
  stSql := stSql + ' Left Join TB_LOCATION d ';
  stSql := stSql + ' ON (a.GROUP_CODE = d.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = d.LO_DONGCODE ';
  stSql := stSql + ' AND a.LO_FLOORCODE = d.LO_FLOORCODE ';
  stSql := stSql + ' AND a.LO_AREACODE = d.LO_AREACODE ';
  stSql := stSql + ' AND d.LO_GUBUN = ''2'') ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND a.AC_ECUID = ''' + aEcuID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      aAlarmAreaName := FindField('AL_ZONENAME').AsString;
      aBuildingName := FillZeroStrNum(FindField('LO_DONGCODE').AsString,3) + FillZeroStrNum(FindField('LO_FLOORCODE').AsString,3)  + FillZeroStrNum(FindField('LO_AREACODE').AsString,3) ;
      aBuildingName := aBuildingName + FindField('BUILDINGNAME').AsString ;
      if FindField('FLOORNAME').AsString <> '' then
      begin
        aBuildingName := aBuildingName + '-' + FindField('FLOORNAME').AsString ;
        if FindField('AREANAME').AsString <> '' then aBuildingName := aBuildingName + '-' + FindField('AREANAME').AsString ;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetAreaName(aBuildingCode, aFloorCode,
  aAreaCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  Result := '';

  stSql := ' select * from TB_LOCATION ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_AREACODE = ''' + aAreaCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''2'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      Result :=  FindField('LO_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetBuildingName(aBuildingCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  Result := '';

  stSql := ' select * from TB_LOCATION ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''0'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      Result :=  FindField('LO_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetCardToEmployeeInfo(aCardNO: string; var aEmName,
  aCompanyName,aJijumName,aDepartName, aEmCode, aPosiName: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
  stCardNo : string;
begin
  result := False;
  stCardNo := copy(aCardNO,1,10); //KT 사옥 외에 10자리만 비교 하자.
  stSql := 'select a.CA_CARDNO,b.EM_NAME,b.EM_CODE,c.CO_NAME as COMPANYNAME,d.CO_NAME as JIJUMNAME,e.CO_NAME as DEPARTNAME,f.PO_NAME from TB_CARD a ';
  stSql := stSql + ' Inner Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON(a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
  stSql := stSql + ' AND a.EM_CODE = b.EM_CODE ) ';
  stSql := stSql + ' Left Join (select * from TB_COMPANYCODE where CO_GUBUN = ''1'') c ';
  stSql := stSql + ' ON(b.CO_COMPANYCODE = c.CO_COMPANYCODE) ';
  stSql := stSql + ' Left Join (select * from TB_COMPANYCODE where CO_GUBUN = ''2'') d ';
  stSql := stSql + ' ON(b.CO_COMPANYCODE = d.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.CO_JIJUMCODE = d.CO_JIJUMCODE) ';
  stSql := stSql + ' Left Join (select * from TB_COMPANYCODE where CO_GUBUN > ''2'') e ';
  stSql := stSql + ' ON(b.CO_COMPANYCODE = e.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.CO_JIJUMCODE = e.CO_JIJUMCODE ';
  stSql := stSql + ' AND b.CO_DEPARTCODE = e.CO_DEPARTCODE) ';
  stSql := stSql + ' Left Join TB_POSI f ';
  stSql := stSql + ' ON(b.CO_COMPANYCODE = f.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.PO_POSICODE = f.PO_POSICODE) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  if G_nDBType = POSTGRESQL then
    stSql := stSql + ' AND substring(a.ca_cardno from 1 to 10) = ''' + stCardNo + ''' '
  else stSql := stSql + ' AND substring(a.ca_cardno,1,10) = ''' + stCardNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount > 0 then
      begin
        Try
          aEmName := FindField('EM_NAME').AsString;
          aEmCode := FindField('EM_CODE').AsString;
          aCompanyName := FindField('COMPANYNAME').AsString;
          aJijumName := FindField('JIJUMNAME').AsString;
          aDepartName := FindField('DEPARTNAME').AsString;
          aPosiName := FindField('PO_NAME').AsString;
        Except
          Exit;
        End;
        result := True;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetCompanyName(aCompanyCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  result := '';
  stSql := 'select * from TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''1'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount > 0 then
      begin
        Try
          result := FindField('CO_NAME').AsString;
        Except
          Exit;
        End;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetDaemonVersion: integer;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  result := 0;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' Where CO_CONFIGGROUP = ''COMMON'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''DAEMON_VER'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount > 0 then
      begin
        Try
          result := strtoint(FindField('CO_CONFIGVALUE').AsString);
        Except
          Exit;
        End;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetDepartName(aCompanyCode, aJijumCode,
  aDepartCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  result := '';
  stSql := 'select * from TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_DEPARTCODE = ''' + aDepartCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''3'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount > 0 then
      begin
        Try
          result := FindField('CO_NAME').AsString;
        Except
          Exit;
        End;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetDeviceName(aNodeNo, aEcuID: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  Result := '';

  stSql := ' select * from TB_ACCESSDEVICE ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      Result :=  FindField('AC_DEVICENAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetDoorInformation(aNodeNo, aEcuID, aDoorNo: string;
  var aDoorName, aBuildingName: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
  bJavaraType : Boolean;
  stDoorNo : string;
begin
  bJavaraType := False;
  stDoorNo := aDoorNo;
  if CheckTB_ACCESSDEVICE_JavaraType(aNodeNo,aEcuID) = 1 then
  begin
    bJavaraType := True;
    stDoorNo := '1';
  end;

  stSql := 'select a.*,b.LO_NAME as BUILDINGNAME,c.LO_NAME as FLOORNAME,d.LO_NAME as AREANAME from TB_DOOR a ';
  stSql := stSql + ' Left Join TB_LOCATION b ';
  stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = b.LO_DONGCODE ';
  stSql := stSql + ' AND b.LO_GUBUN = ''0'') ';
  stSql := stSql + ' Left Join TB_LOCATION c ';
  stSql := stSql + ' ON (a.GROUP_CODE = c.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = c.LO_DONGCODE ';
  stSql := stSql + ' AND a.LO_FLOORCODE = c.LO_FLOORCODE ';
  stSql := stSql + ' AND c.LO_GUBUN = ''1'') ';
  stSql := stSql + ' Left Join TB_LOCATION d ';
  stSql := stSql + ' ON (a.GROUP_CODE = d.GROUP_CODE ';
  stSql := stSql + ' AND a.LO_DONGCODE = d.LO_DONGCODE ';
  stSql := stSql + ' AND a.LO_FLOORCODE = d.LO_FLOORCODE ';
  stSql := stSql + ' AND a.LO_AREACODE = d.LO_AREACODE ';
  stSql := stSql + ' AND d.LO_GUBUN = ''2'') ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND a.AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND a.DO_DOORNO = ''' + stDoorNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      aDoorName := FindField('DO_DOORNONAME').AsString;
      if bJavaraType then
      begin
        if aDoorNo = '1' then aDoorName := aDoorName + '_열림'
        else if aDoorNo = '2' then aDoorName := aDoorName + '_닫힘';
      end;
      aBuildingName := FindField('LO_DONGCODE').AsString + FindField('LO_FLOORCODE').AsString  + FindField('LO_AREACODE').AsString ;
      aBuildingName := aBuildingName + FindField('BUILDINGNAME').AsString ;
      if FindField('FLOORNAME').AsString <> '' then
      begin
        aBuildingName := aBuildingName + '-' + FindField('FLOORNAME').AsString ;
        if FindField('AREANAME').AsString <> '' then aBuildingName := aBuildingName + '-' + FindField('AREANAME').AsString ;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetEmployeeInfo(aCardNo: string; bPassNo: Boolean;
  var aCompanyCode, aEMCode, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql:string;
  TempAdoQuery : TADOQuery;
begin
  result := False;
  aCompanyCode := '000';
  aEMCode := '000';
  aJijumCode := '000';
  aDepartCode := '000';
  aEmName := '';


  if Not bPassNo then
  begin
    stSql := 'select a.CO_COMPANYCODE,a.EM_CODE,b.CO_JIJUMCODE,b.CO_DEPARTCODE,';
    stSql := stSql + 'b.EM_NAME from TB_CARD a ';
    stSql := stSql + ' Left Join TB_EMPLOYEE b ';
    stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = b.EM_CODE) ';
    stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND a.CA_CARDNO = ''' + aCardNo + ''' ' ;
  end
  else   //비밀번호인경우
  begin
    stSql := 'select CO_COMPANYCODE,EM_CODE,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME from TB_EMPLOYEE ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND EM_PASS = ''' + aCardNo + ''' ' ;
  end;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      //Sql.Clear;
      Sql.Text := stSql ;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then
      begin
        Exit;
      end;
      First;
      aCompanyCode := FindField('CO_COMPANYCODE').AsString;
      aEMCode := FindField('EM_CODE').AsString;
      aJijumCode := FindField('CO_JIJUMCODE').AsString;
      aDepartCode := FindField('CO_DEPARTCODE').AsString;
      aEmName := FindField('EM_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  result := True;
end;

function TdmZeronEventDBFunction.GetEmployeeInfo_AWCODE(aCardNo: string; bPassNo: Boolean;
  var aCompanyCode, aEMCode, aJijumCode, aDepartCode, aEmName,
  aAWCode: string): Boolean;
var
  stSql:string;
  TempAdoQuery : TADOQuery;
begin
  result := False;
  aCompanyCode := '000';
  aEMCode := '000';
  aJijumCode := '000';
  aDepartCode := '000';
  aEmName := '';


  if Not bPassNo then
  begin
    stSql := 'select a.CO_COMPANYCODE,b.EM_CODE,b.CO_JIJUMCODE,b.CO_DEPARTCODE,';
    stSql := stSql + 'b.EM_NAME,b.AW_CODE from TB_CARD a ';
    stSql := stSql + ' Left Join TB_EMPLOYEE b ';
    stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = b.EM_CODE) ';
   stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGROUPCODE + ''' ';
    stSql := stSql + ' AND a.CA_CARDNO = ''' + aCardNo + ''' ' ;
  end
  else   //비밀번호인경우
  begin
    stSql := 'select CO_COMPANYCODE,EM_CODE,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME,AW_CODE from TB_EMPLOYEE ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGROUPCODE + ''' ';
    stSql := stSql + ' AND EM_PASS = ''' + aCardNo + ''' ' ;
  end;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      //Sql.Clear;
      Sql.Text := stSql ;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then
      begin
        Exit;
      end;
      First;
      if FindField('EM_CODE').IsNull then Exit;    //사원 테이블에 사원정보 삭제 된 경우
      aCompanyCode := FindField('CO_COMPANYCODE').AsString;
      aEMCode := FindField('EM_CODE').AsString;
      aJijumCode := FindField('CO_JIJUMCODE').AsString;
      aDepartCode := FindField('CO_DEPARTCODE').AsString;
      aEmName := FindField('EM_NAME').AsString;
      aAWCode := FindField('AW_CODE').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  result := True;
end;

function TdmZeronEventDBFunction.GetFloorName(aBuildingCode, aFloorCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  Result := '';

  stSql := ' select * from TB_LOCATION ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''1'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if RecordCount < 1 then Exit;
      Result :=  FindField('LO_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetFormName: Boolean;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := False;

  stSql := 'select * from TB_FORMNAME ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + '''';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      First;
      While Not Eof do
      begin
        if FindField('FM_CODE').AsString = '001' then
        begin
          G_stFormName001 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '002' then
        begin
          G_stFormName002 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '011' then
        begin
          G_stFormName011 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '012' then
        begin
          G_stFormName012 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '021' then
        begin
          G_stFormName021 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '022' then
        begin
          G_stFormName022 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '031' then
        begin
          G_stFormName031 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '032' then
        begin
          G_stFormName032 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '041' then
        begin
          G_stFormName041 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '042' then
        begin
          G_stFormName042 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '101' then
        begin
          G_stFormName101 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '102' then
        begin
          G_stFormName102 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '103' then
        begin
          G_stFormName103 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '104' then
        begin
          G_stFormName104 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '105' then
        begin
          G_stFormName105 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '106' then
        begin
          G_stFormName106 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '901' then
        begin
          G_stFormName901 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '902' then
        begin
          G_stFormName902 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '903' then
        begin
          G_stFormName903 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '911' then
        begin
          G_stFormName911 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '912' then
        begin
          G_stFormName912 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '913' then
        begin
          G_stFormName913 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '921' then
        begin
          G_stFormName921 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '922' then
        begin
          G_stFormName922 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '923' then
        begin
          G_stFormName923 := FindField('FM_NAME').asstring;
        end else if FindField('FM_CODE').AsString = '224' then
        begin
          G_stFormName224 := FindField('FM_NAME').asstring;
        end;
        Next;
      end;
      result := True;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetJijumName(aCompanyCode, aJijumCode: string): string;
var
  stSql : string;
  TempAdoQuery : TAdoQuery;
begin
  result := '';
  stSql := 'select * from TB_COMPANY ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''2'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TAdoQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      SQL.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount > 0 then
      begin
        Try
          result := FindField('CO_NAME').AsString;
        Except
          Exit;
        End;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetLastFpmsCardNo: int64;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := 1;
  stSql := 'select * from TB_CURRENTDAEMON ';
  stSql := stSql + ' Where CU_STATECODE = ''FDMSCARD'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
       Close;
      Sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordcount > 0 then
      begin
        if Not isDigit(FindField('CU_STATEVALUE').AsString) then Exit;
        result := strtoint(FindField('CU_STATEVALUE').AsString) + 1;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  stSql := ' Update TB_CURRENTDAEMON set CU_STATEVALUE = ''' + inttostr(result) + ''' ';
  stSql := stSql + ' Where CU_STATECODE = ''FDMSCARD'' ';
  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.GetNextAdminClassCode: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nAdminClassCodeLength);
  stSql := 'select MAX(GR_GRADECODE) as GR_GRADECODE from TB_GRADE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('GR_GRADECODE').AsString) then
      begin
        result := FillZeroNumber(FindField('GR_GRADECODE').AsInteger + 1,G_nAdminClassCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextAreaCode(aBuildingCode,
  aFloorCode: string;aAreaCode:string='000';aDeepSeq:string='1'): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
  nSeq : integer;
begin
  if strtoint(aDeepSeq) = 1 then
  begin
    result := FillZeroNumber(1,G_nBuildingCodeLength);
  end else
  begin
    result := copy(aAreaCode,1,G_nBuildingCodeLength * (strtoint(aDeepSeq) - 1) ) + FillZeroNumber(1,G_nBuildingCodeLength);
  end;
  stSql := 'select MAX(LO_AREACODE) as LO_AREACODE from TB_LOCATION ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''' + inttostr(strtoint(aDeepSeq) + 1) + '''' ;
  if strtoint(aDeepSeq) > 1 then
  begin
    stSql := stSql + ' AND LO_AREACODE Like ''' + copy(aAreaCode,1,G_nCompanyCodeLength * (strtoint(aDeepSeq) - 1) ) + '%''';
  end;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if strtoint(aDeepSeq) = 1 then
      begin
        if isDigit(FindField('LO_AREACODE').AsString) then
        begin
          result := FillZeroNumber(FindField('LO_AREACODE').AsInteger + 1,G_nBuildingCodeLength);
        end;
      end else
      begin
        if isDigit(FindField('LO_AREACODE').AsString) then
        begin
          nSeq := strtoint( copy(FindField('LO_AREACODE').AsString,1 + G_nBuildingCodeLength * (strtoint(aDeepSeq) - 1),G_nBuildingCodeLength)) + 1;
          result := copy(FindField('LO_AREACODE').AsString,1,G_nCompanyCodeLength * (strtoint(aDeepSeq) - 1)) + FillZeroNumber(nSeq,G_nBuildingCodeLength);
        end;
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextBuildingCode: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nBuildingCodeLength);
  stSql := 'select MAX(LO_DONGCODE) as LO_DONGCODE from TB_LOCATION ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''0'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('LO_DONGCODE').AsString) then
      begin
        result := FillZeroNumber(FindField('LO_DONGCODE').AsInteger + 1,G_nBuildingCodeLength);
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.getNextCardPositionNumber: integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := 1;
  stSql := 'select MAX(POSITIONNUM) as POSITIONNUM from TB_CARD ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('POSITIONNUM').AsString) then
      begin
        result := FindField('POSITIONNUM').AsInteger + 1;
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextCompanyCode: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nCompanyCodeLength);
  stSql := 'select MAX(CO_COMPANYCODE) as CO_COMPANYCODE from TB_COMPANY ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('CO_COMPANYCODE').AsString) then
      begin
        result := FillZeroNumber(FindField('CO_COMPANYCODE').AsInteger + 1,G_nCompanyCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextDepartCode(aCompanyCode,
  aJijumCode:string;aDepartCode:string='000';aDeepSeq:string='2'): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
  nSeq : integer;
begin
  if strtoint(aDeepSeq) = 2 then
  begin
    result := FillZeroNumber(1,G_nCompanyCodeLength);
  end else
  begin
    result := copy(aDepartCode,1,G_nCompanyCodeLength * (strtoint(aDeepSeq) - 2) ) + FillZeroNumber(1,G_nCompanyCodeLength);
  end;
  stSql := 'select MAX(CO_DEPARTCODE) as CO_DEPARTCODE from TB_COMPANY ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''' + inttostr(strtoint(aDeepSeq) + 1) + '''' ;
  if strtoint(aDeepSeq) > 2 then
  begin
    stSql := stSql + ' AND CO_DEPARTCODE Like ''' + copy(aDepartCode,1,G_nCompanyCodeLength * (strtoint(aDeepSeq) - 2) ) + '%''';
  end;

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if strtoint(aDeepSeq) = 2 then
      begin
        if isDigit(FindField('CO_DEPARTCODE').AsString) then
        begin
          result := FillZeroNumber(FindField('CO_DEPARTCODE').AsInteger + 1,G_nCompanyCodeLength);
        end;
      end else
      begin
        if isDigit(FindField('CO_DEPARTCODE').AsString) then
        begin
          nSeq := strtoint( copy(FindField('CO_DEPARTCODE').AsString,1 + G_nCompanyCodeLength * (strtoint(aDeepSeq) - 2),G_nCompanyCodeLength)) + 1;
          result := copy(FindField('CO_DEPARTCODE').AsString,1,G_nCompanyCodeLength * (strtoint(aDeepSeq) - 2)) + FillZeroNumber(nSeq,G_nCompanyCodeLength);
        end;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextDeviceCardGroupCode: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nDeviceCardGroupLength);
  stSql := 'select MAX(DG_CODE) as DG_CODE from TB_DEVICECARDGROUPCODE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('DG_CODE').AsString) then
      begin
        result := FillZeroNumber(FindField('DG_CODE').AsInteger + 1,G_nDeviceCardGroupLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextDeviceID(aNodeNo: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,2);
  stSql := 'select MAX(AC_ECUID) as AC_ECUID from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('AC_ECUID').AsString) then
      begin
        result := FillZeroNumber(FindField('AC_ECUID').AsInteger + 1,2);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextEmployeeCode: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
  stEmCode : string;
begin
  result := 'Z-00001';
  stSql := 'select MAX(EM_CODE) as EM_CODE from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND EM_CODE Like ''Z-%'' ';
  if G_nDBType = POSTGRESQL then stSql := stSql + ' AND Length(EM_CODE) = 7 '
  else stSql := stSql + ' AND Len(EM_CODE) = 7 ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      stEmCode := FindField('EM_CODE').AsString ;
      if isDigit(copy(stEmCode,3,5)) then
      begin
        result := 'Z-' + FillZeroNumber(strtoint(copy(stEmCode,3,5)) + 1,5);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetNextFloorCode(aBuildingCode: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nFloorCodeLength);
  stSql := 'select MAX(LO_FLOORCODE) as LO_FLOORCODE from TB_LOCATION ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''1'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('LO_FLOORCODE').AsString) then
      begin
        result := FillZeroNumber(FindField('LO_FLOORCODE').AsInteger + 1,G_nFloorCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextFpmsCardNo: string;
var
  stSql : string;
  nFdms_CardNo : int64;
  nLastCardNo : int64;
  stCardNo : string;
  i : integer;
  bResult : Boolean;
  stCardType,stCompanyCode,stEmCode,stEmName :string;
begin
  //result := FillZeroNumber2(31,10);
  result := '';

  for i := 0 to 100000 do
  begin
    nLastCardNo := GetLastFpmsCardNo;
    stCardNo := FillCharString(inttostr(nLastCardNo),'2',10,True);
    if G_nCardLengthType = 0 then  //고정길이 타입이면
    begin
      if Not G_bCardTypeNumeric then  //숫자변환이 아니면 숫자 타입을 HEX타입으로 변환하자.
      begin
        stCardNo := Dec2Hex(StrtoInt64(stCardNo),8);
      end
    end else
    begin
      stCardNo := Dec2Hex(StrtoInt64(stCardNo),8);
    end ; //KT사옥용이면 그냥 빠져 나가자.
    stCardNo := dmDeviceFunction.GetFixedCardNoCheck(stCardNo,G_bCardLengthFixedUse,G_stCardFixedFillChar,G_nCardFixedPosition,G_nCardFixedLength);

    if CheckTB_CARD_Cardno(stCardNo,stCardType,stCompanyCode,stEmCode,stEmName) < 1 then break;
  end;

  result := stCardNo;
end;

function TdmZeronEventDBFunction.GetNextFpmsID: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nFPMSLength);
  stSql := 'select MAX(FDMS_ID) as FDMS_ID from TB_EMPLOYEE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('FDMS_ID').AsString) then
      begin
        result := FillZeroNumber(FindField('FDMS_ID').AsInteger + 1,G_nFPMSLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextJijumCode(aCompanyCode: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nCompanyCodeLength);
  stSql := 'select MAX(CO_JIJUMCODE) as CO_JIJUMCODE from TB_COMPANY ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('CO_JIJUMCODE').AsString) then
      begin
        result := FillZeroNumber(FindField('CO_JIJUMCODE').AsInteger + 1,G_nCompanyCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextNodeNo: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nNodeCodeLength);
  stSql := 'select MAX(AC_NODENO) as AC_NODENO from TB_ACCESSDEVICE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      result := FillZeroNumber(FindField('AC_NODENO').AsInteger + 1,G_nNodeCodeLength);

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextPatrolTimeSeq: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := '1';
  stSql := 'select MAX(PT_SEQ) as PT_SEQ from TB_PATROLTIME ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      result := inttostr(FindField('PT_SEQ').AsInteger + 1);

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextPosiCode(aCompanyCode: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nPosiCodeLength);
  stSql := 'select MAX(PO_POSICODE) as PO_POSICODE from TB_POSI ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('PO_POSICODE').AsString) then
      begin
        result := FillZeroNumber(FindField('PO_POSICODE').AsInteger + 1,G_nPosiCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetNextTB_CARDGROUPCODE_ChildCAGroupCode(
  aParentCode: string; var aCode, aDeepSeq, aViewSeq: string): Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
  nDeepSeq : integer;
  nViewSeq : integer;
  stTemp : string;
  nChildCode : integer;
begin
  aCode := '';
  aDeepSeq := '0';
  aViewSeq := '0';
  nViewSeq := 0;
  nChildCode := 0;

  stSql := 'Select * from TB_CARDGROUPCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP Like ''' + aParentCode + '%'' ';
  stSql := stSql + ' Order by CA_DEEPSEQ,CA_VIEWSEQ ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;

      while Not Eof do
      begin
        if FindField('CA_GROUP').AsString = aParentCode then
        begin
          nDeepSeq := FindField('CA_DEEPSEQ').AsInteger;
          aDeepSeq := inttostr(nDeepSeq + 1);
        end;
        if FindField('CA_DEEPSEQ').AsInteger = (nDeepSeq + 1) then
        begin
          if nViewSeq < FindField('CA_VIEWSEQ').AsInteger  then nViewSeq := FindField('CA_VIEWSEQ').AsInteger;
          stTemp := FindField('CA_GROUP').AsString;
          stTemp := copy(stTemp,1 + (((nDeepSeq) * G_nCardGroupLength) + 1 ),G_nCardGroupLength);
          Try
            if nChildCode < strtoint(stTemp)  then nChildCode := strtoint(stTemp);
          Except

          End;
        end;
        Next;
      end;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
  aViewSeq := inttostr(nViewSeq + 1);
  aCode := aParentCode + FillZeroNumber(nChildCode + 1,G_nCardGroupLength);
end;

function TdmZeronEventDBFunction.GetNextTB_RELAYGUBUN_Code: string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := FillZeroNumber(1,G_nRelayGubunCodeLength);
  stSql := 'select MAX(RG_CODE) as RG_CODE from TB_RELAYGUBUN ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if isDigit(FindField('RG_CODE').AsString) then
      begin
        result := FillZeroNumber(FindField('RG_CODE').AsInteger + 1,G_nRelayGubunCodeLength);
      end;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetPermitStateName(aPermit: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result := '미등록코드';
  stSql := ' Select * from TB_PERMITCODE ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PE_PERMITCODE = ''' + aPermit + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;

      Result := FindField('PE_PERMITNAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetPosiName(aCompanyCode, aPosiCode: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := '';
  stSql := 'select * from TB_POSI ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND PO_POSICODE = ''' + aPosiCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      result := FindField('PO_NAME').AsString ;

    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetProgramGrade(aAdminGradeCode,aProgID: string; var aInsertGrade,
  aUpdateGrade, aDeleteGrade: Boolean): Boolean;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := False;
  if G_bIsMaster then
  begin
    aInsertGrade := True;
    aUpdateGrade := True;
    aDeleteGrade := True;
    result := True;
    Exit;
  end;
  aInsertGrade := False;
  aUpdateGrade := False;
  aDeleteGrade := False;

  stSql := 'select * from TB_GRADEPROGRAM ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aAdminGradeCode + ''' ';
  stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgID + ''' ';
  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;
      Try
        Open;
      Except
        Exit;
      End;
      if recordCount < 1 then Exit;
      if FindField('GR_INSERT').AsString = 'Y' then aInsertGrade := True;
      if FindField('GR_UPDATE').AsString = 'Y' then aUpdateGrade := True;
      if FindField('GR_DELETE').AsString = 'Y' then aDeleteGrade := True;
      result := True;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetTB_ACCESSDEVICE_NodeIp(aNodeNo: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result:= '';

  stSql := 'select * from TB_ACCESSDEVICE';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND  AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_GUBUN = ''0'' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;
      result := FindField('AC_MCUIP').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetTB_ALARMSTATUSCODE_CodeName(aStatusCode: string;
  var aStatusName: string; var aAlarmSound: integer): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result:= -1;
  aStatusName := '';
  aAlarmSound := 0;

  stSql := 'select * from TB_ALARMSTATUSCODE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND  AL_ALARMSTATUSCODE = ''' + aStatusCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;
      aStatusName := FindField('AL_ALARMNAME').AsString ;
      if FindField('AL_ALARMVIEW').AsInteger > 0 then Result := 1
      else Result := 0;
      if FindField('AL_ALARMSOUND').AsInteger > 0 then aAlarmSound := 1
      else aAlarmSound := 0;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;


end;

function TdmZeronEventDBFunction.GetTB_ARMAREA_BuildingInfo(aNodeNo, aEcuID,
  aArmAreaNo: string; var aBuildingName, aTelNo, aMemo: string): Boolean;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result:= False;
  if Length(aArmAreaNo) = 1 then aArmAreaNo := '0' + aArmAreaNo;

  stSql := 'select a.*,b.LO_NAME from TB_ARMAREA ';
  stSql := stSql + ' Inner Join TB_LOCATION b ';
  stSql := stSql + ' ON(a.LO_DONGCODE = b.LO_DONGCODE ';
  stSql := stSql + ' AND a.LO_FLOORCODE = b.LO_FLOORCODE  ';
  stSql := stSql + ' AND a.LO_AREACODE = b.LO_AREACODE ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  if aNodeNo <> ''  then stSql := stSql + ' AND a.AC_NODENO = ' + aNodeNo + ' ';
  if aEcuID <> ''  then stSql := stSql + ' AND a.AC_ECUID = ''' + aEcuID + ''' ';
  if aArmAreaNo <> ''  then stSql := stSql + ' AND a.AR_AREANO = ''' + aArmAreaNo + ''' ';
  //stSql := stSql + ' AND a.CA_GUBUN = ''2'' ';    //기타 카드 - 순찰카드

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;
      result := True;
      aTelNo := FindField('AR_TELNO').AsString;
      aMemo := FindField('AR_MEMO').AsString;
      aBuildingName := FindField('LO_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetTB_CARD_PatrolCardInfo(aCardNo: string; var aEmCode,
  aEmName: string): integer;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result:= -1;

  stSql := 'select a.CA_GUBUN,a.CA_CARDNO,b.EM_CODE,b.EM_NAME from TB_CARD a ';
  stSql := stSql + ' Inner Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON(a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
  stSql := stSql + ' AND a.EM_CODE = b.EM_CODE ) ';
  stSql := stSql + ' Where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.CA_CARDNO = ''' + aCardNo + ''' ';
  //stSql := stSql + ' AND a.CA_GUBUN = ''2'' ';    //기타 카드 - 순찰카드

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      result := 0;
      if RecordCount < 1 then Exit;
      if Findfield('CA_GUBUN').AsString = '4' then result := 1;
      aEmCode := FindField('EM_CODE').AsString;
      aEmName := FindField('EM_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetTB_PATROLTIME_TimeNAME(aTime: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  result := '';
  stSql := 'select * from TB_PATROLTIME ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_STRARTTIME <= ' + aTime + ' ';
  stSql := stSql + ' AND PT_ENDTIME >= ''' + aTime + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;
      result := FindField('PT_NAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetTB_ZONEDEVICE_PortName(aNodeNo, aEcuID, aExtNo,
  aPortNo: string): string;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
begin
  Result:= '';

  stSql := 'select * from TB_ZONEDEVICE ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AL_ZONENUM = ''' + aPortNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if RecordCount < 1 then Exit;
      result := FindField('AL_ZONENAME').AsString;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

end;

function TdmZeronEventDBFunction.GetUpdateAttendType(aDate, aNowTime, aCompanyCode,
  aEmCode: string; var aAtInsert: Boolean): string;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  result := '1'; //기본으로 출근 잡는다.
  aAtInsert := True;
  stSql := 'Select * from TB_ATEVENT ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOEventConnection;
    with TempAdoQuery do
    begin
      Close;
      SQL.Clear;
      Sql.Text := stSql;

      try
        open
      except
        exit;
      end;

      if recordCount > 0 then
      begin
        aAtInsert := False;
        if FindField('AT_INTIME').IsNull then Exit;
        if FindField('AT_INTIME').AsString = '' then Exit;
        if FindField('AT_INTIME').AsString > aNowTime then Exit; //DB의 출근 시간이 현재 들어온 시간보다 크면 현재시간을 출근 시간으로 잡자.
        result := '2'; //퇴근
      end;

    end;
  Finally
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.GetUserInfoFromCardno(aCardNo: string; var aEmCode,
  aEmName, aCompanyName, aJijumName, aDepartName,aPosiName:string): Boolean;
var
  stSql : string;
  nIndex : integer;
  TempAdoQuery :TADOQuery;
begin
  Result := False;
  aEmCode := '';
  aEmName := '';
  aCompanyName := '';
  aJijumName := '';
  aDepartName := '';
  aPosiName := '';

  stSql := ' select b.EM_NAME,b.CO_COMPANYCODE,b.CO_JIJUMCODE,b.CO_DEPARTCODE,b.PO_POSICODE,b.EM_CODE,';
  stSql := stSql + ' c.CO_NAME as COMPANYNAME,d.CO_NAME as JIJUMNAME,e.CO_NAME as DEPARTNAME,f.PO_NAME from TB_CARD a ';
  stSql := stSql + ' Left Join TB_EMPLOYEE b ';
  stSql := stSql + ' ON (a.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
  stSql := stSql + ' AND a.EM_CODE = b.EM_CODE) ';
  stSql := stSql + ' Left Join TB_COMPANY c ';
  stSql := stSql + ' ON ( b.GROUP_CODE = c.GROUP_CODE ';
  stSql := stSql + ' AND b.CO_COMPANYCODE = c.CO_COMPANYCODE ';
  stSql := stSql + ' AND c.CO_GUBUN = ''1'') ';
  stSql := stSql + ' Left Join TB_COMPANY d ';
  stSql := stSql + ' ON ( b.GROUP_CODE = d.GROUP_CODE ';
  stSql := stSql + ' AND b.CO_COMPANYCODE = d.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.CO_JIJUMCODE = d.CO_JIJUMCODE ';
  stSql := stSql + ' AND d.CO_GUBUN = ''2'') ';
  stSql := stSql + ' Left Join TB_COMPANY e ';
  stSql := stSql + ' ON ( b.GROUP_CODE = e.GROUP_CODE ';
  stSql := stSql + ' AND b.CO_COMPANYCODE = e.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.CO_JIJUMCODE = e.CO_JIJUMCODE ';
  stSql := stSql + ' AND b.CO_DEPARTCODE = e.CO_DEPARTCODE ';
  stSql := stSql + ' AND e.CO_GUBUN = ''3'') ';
  stSql := stSql + ' Left Join TB_POSI f ';
  stSql := stSql + ' ON ( b.GROUP_CODE = f.GROUP_CODE ';
  stSql := stSql + ' AND b.CO_COMPANYCODE = f.CO_COMPANYCODE ';
  stSql := stSql + ' AND b.PO_POSICODE = f.PO_POSICODE) ';
  stSql := stSql + ' where a.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND a.CA_CARDNO = ''' + aCardNo + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;
    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      Try
        Open;
      Except
        Exit;
      End;

      if Recordcount < 1 then Exit;
      aEmName := FindField('EM_NAME').AsString ;
      aEmCode := FindField('EM_CODE').AsString ;
      aCompanyName := FindField('COMPANYNAME').AsString ;
      aJijumName := FindField('JIJUMNAME').AsString ;
      aDepartName := FindField('DEPARTNAME').AsString ;
      aPosiName := FindField('PO_NAME').AsString ;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;

  Result := True;
end;

function TdmZeronEventDBFunction.InsertIntoTB_ACCESSDEVICE_DeviceIDInit(aNodeNo, aEcuID,
  aNodeIp: string): Boolean;
var
  stSql : string;
  stGubun : string;
begin
  if aEcuID = '00' then stGubun := '0'
  else stGubun := '1';

  stSql := ' Insert Into TB_ACCESSDEVICE( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AC_MCUIP,';
  stSql := stSql + ' AC_MCUPORT,';
  stSql := stSql + ' AC_DEVICENAME,';
  stSql := stSql + ' AC_VIEWSEQ,';
  stSql := stSql + ' AC_ACTYPE,';
  stSql := stSql + ' AC_ATTYPE,';
  stSql := stSql + ' AC_FDTYPE,';
  stSql := stSql + ' AC_PTTYPE,';
  stSql := stSql + ' AC_JAVARATYPE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' AC_LOCATEUSE,';
  stSql := stSql + ' AC_TOTWIDTH,';
  stSql := stSql + ' AC_TOTHEIGHT,';
  stSql := stSql + ' AC_CURX,';
  stSql := stSql + ' AC_CURY,';
  stSql := stSql + ' AC_NETTYPE,';
  stSql := stSql + ' AC_GUBUN,';
  stSql := stSql + ' AC_DEVICETYPE,';
  stSql := stSql + ' SEND_ACK,';
  stSql := stSql + ' AC_CARDREADERTYPE,';
  stSql := stSql + ' AC_UPDATE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aNodeIp + ''',';
  stSql := stSql + '''3000'',';
  stSql := stSql + '''' + aNodeIp + '_' + aEcuID + ''',';
  stSql := stSql + '1,';
  stSql := stSql + '''1'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''TCPIP'',';
  stSql := stSql + '''' + stGubun + ''',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''N''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ACCESSDEVICE_DeviceName(aNodeNo, aEcuID,
  aDeviceName,aAcType,aPTType,aAtType,aFdType: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ACCESSDEVICE( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AC_MCUIP,';
  stSql := stSql + ' AC_MCUPORT,';
  stSql := stSql + ' AC_DEVICENAME,';
  stSql := stSql + ' AC_VIEWSEQ,';
  stSql := stSql + ' AC_ACTYPE,';
  stSql := stSql + ' AC_ATTYPE,';
  stSql := stSql + ' AC_FDTYPE,';
  stSql := stSql + ' AC_PTTYPE,';
  stSql := stSql + ' AC_JAVARATYPE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' AC_LOCATEUSE,';
  stSql := stSql + ' AC_TOTWIDTH,';
  stSql := stSql + ' AC_TOTHEIGHT,';
  stSql := stSql + ' AC_CURX,';
  stSql := stSql + ' AC_CURY,';
  stSql := stSql + ' AC_NETTYPE,';
  stSql := stSql + ' AC_GUBUN,';
  stSql := stSql + ' AC_DEVICETYPE,';
  stSql := stSql + ' SEND_ACK,';
  stSql := stSql + ' AC_CARDREADERTYPE,';
  stSql := stSql + ' AC_UPDATE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + ''''',';
  stSql := stSql + '''3000'',';
  stSql := stSql + '''' + aDeviceName + ''',';
  stSql := stSql + '1,';
  stSql := stSql + '''' + aAcType + ''',';
  stSql := stSql + '''' + aAtType + ''',';
  stSql := stSql + '''' + aFdType + ''',';
  stSql := stSql + '''' + aPTType + ''',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''TCPIP'',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''Y''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ACCESSDEVICE_NodeIp(aNodeNo,
  aNodeIp: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ACCESSDEVICE( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AC_MCUIP,';
  stSql := stSql + ' AC_MCUPORT,';
  stSql := stSql + ' AC_DEVICENAME,';
  stSql := stSql + ' AC_VIEWSEQ,';
  stSql := stSql + ' AC_ACTYPE,';
  stSql := stSql + ' AC_ATTYPE,';
  stSql := stSql + ' AC_FDTYPE,';
  stSql := stSql + ' AC_PTTYPE,';
  stSql := stSql + ' AC_JAVARATYPE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' AC_LOCATEUSE,';
  stSql := stSql + ' AC_TOTWIDTH,';
  stSql := stSql + ' AC_TOTHEIGHT,';
  stSql := stSql + ' AC_CURX,';
  stSql := stSql + ' AC_CURY,';
  stSql := stSql + ' AC_NETTYPE,';
  stSql := stSql + ' AC_GUBUN,';
  stSql := stSql + ' AC_DEVICETYPE,';
  stSql := stSql + ' SEND_ACK,';
  stSql := stSql + ' AC_CARDREADERTYPE,';
  stSql := stSql + ' AC_UPDATE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''00'',';
  stSql := stSql + '''' + aNodeIp + ''',';
  stSql := stSql + '''3000'',';
  stSql := stSql + '''' + aNodeIp + '_00' + ''',';
  stSql := stSql + '1,';
  stSql := stSql + '''1'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''TCPIP'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''N''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value(aInputType,
  aInputName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ACCESSINPUTTYPE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AC_INPUTTYPE,';
  stSql := stSql + ' AC_INPUTTYPENAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aInputType + ''', ';
  stSql := stSql + '''' + aInputName + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMINALARMAREA(aUserID, aNodeNo, aEcuID,
  aArmAreaNo, aGubun, aUpdateTime, aOperater: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ADMINALARMAREA( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AR_AREANO,';
  stSql := stSql + ' AD_GUBUN,';
  stSql := stSql + ' AD_UPDATETIME,';
  stSql := stSql + ' AD_UPDATEOPERATOR) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode  + ''',';
  stSql := stSql + '''' + aUserID + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + FillZeroStrNum(aArmAreaNo,2) + ''',';
  stSql := stSql + '''' + aGubun + ''',';
  stSql := stSql + '''' + aUpdateTime + ''',';
  stSql := stSql + '''' + aOperater + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMINALARMDEVICE_Value(aUserID, aNodeNo, aEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ADMINALARMDEVICE( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AD_UPDATETIME,' ;
  stSql := stSql + ' AD_UPDATEOPERATOR )' ;
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aUserID + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + '''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMINCOMPANY_Value(aUserID, aCompanyCode,
  aJijumCode, aDepartCode, aGrade: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ADMINCOMPANY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' CO_JIJUMCODE,';
  stSql := stSql + ' CO_DEPARTCODE,';
  stSql := stSql + ' CO_GUBUN,';
  stSql := stSql + ' AD_UPDATETIME,' ;
  stSql := stSql + ' AD_UPDATEOPERATOR )' ;
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aUserID + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + aGrade + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + '''';
  stSql := stSql + ')';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMINDOOR_Value(aUserID, aNodeNo, aECUID,
  aDoorNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ADMINDOOR( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' DO_DOORNO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AD_UPDATETIME,' ;
  stSql := stSql + ' AD_UPDATEOPERATOR )' ;
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aUserID + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aDoorNo + ''',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + '''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMINFOOD_Value(aUserID, aNodeNo, aECUID,
  aDoorNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ADMINFOOD( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' FO_DOORNO,';
  stSql := stSql + ' AD_UPDATETIME,' ;
  stSql := stSql + ' AD_UPDATEOPERATOR )' ;
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aUserID + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aDoorNo + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + '''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ADMIN_Value(auserid, ausername, auserPw,
  aGradeCode, aMaster, aCompanyCode, aJijumCode, aDepartCode, aBuildingGrade,
  aDongCode, aFloorCode, aAreaCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ADMIN( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AD_USERID,';
  stSql := stSql + ' AD_USERPW,';
  stSql := stSql + ' AD_USERNAME,';
  stSql := stSql + ' GR_GRADECODE,';
  stSql := stSql + ' AD_MASTER, ';
  stSql := stSql + ' CO_COMPANYCODE, ';
  stSql := stSql + ' CO_JIJUMCODE, ';
  stSql := stSql + ' CO_DEPARTCODE, ';
  stSql := stSql + ' AD_UPDATETIME,';
  stSql := stSql + ' AD_UPDATEOPERATER,';
  stSql := stSql + ' AD_BUILDINGGRADE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE )' ;
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + auserid + ''',';
  stSql := stSql + '''' + auserPw + ''',';
  stSql := stSql + '''' + ausername + ''',';
  stSql := stSql + '''' + aGradeCode + ''',';
  stSql := stSql + '''' + aMaster + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''',';
  stSql := stSql + '''' + aBuildingGrade + ''',';
  stSql := stSql + '''' + aDongCode + ''',';
  stSql := stSql + '''' + aFloorCode + ''',';
  stSql := stSql + '''' + aAreaCode + '''';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMCHECKCODE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMCHECKCODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AL_ALARMCHECKCODE,';
  stSql := stSql + ' AL_ALARMCHECKCODENAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMCODEGROUP_Value(aAG_CODE,
  aAL_ALARMSTATUSCODE: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMCODEGROUP (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AG_CODE,';
  stSql := stSql + ' AL_ALARMSTATUSCODE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aAG_CODE + ''', ';
  stSql := stSql + '''' + aAL_ALARMSTATUSCODE + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMDEVICETYPECODE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMDEVICETYPECODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AL_ALARMDEVICETYPECODE,';
  stSql := stSql + ' AL_ALARMDEVICETYPENAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMDEVICE_AlarmDeviceInit(aNodeNo, aEcuID,
  aNodeIp: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ALARMDEVICE (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'AL_ZONENAME,';
  stSql := stSql + 'AL_LOCATEUSE,';
  stSql := stSql + 'LO_DONGCODE,';
  stSql := stSql + 'LO_FLOORCODE,';
  stSql := stSql + 'LO_AREACODE,';
  stSql := stSql + 'AL_TOTWIDTH,';
  stSql := stSql + 'AL_TOTHEIGHT,';
  stSql := stSql + 'AL_CURX,';
  stSql := stSql + 'AL_CURY,';
  stSql := stSql + 'AL_VIEWSEQ )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aNodeIp + '_' + aEcuID + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '1) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMDEVICE_AlarmName(aNodeNo, aEcuID,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ALARMDEVICE (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'AL_ZONENAME,';
  stSql := stSql + 'AL_LOCATEUSE,';
  stSql := stSql + 'LO_DONGCODE,';
  stSql := stSql + 'LO_FLOORCODE,';
  stSql := stSql + 'LO_AREACODE,';
  stSql := stSql + 'AL_TOTWIDTH,';
  stSql := stSql + 'AL_TOTHEIGHT,';
  stSql := stSql + 'AL_CURX,';
  stSql := stSql + 'AL_CURY,';
  stSql := stSql + 'AL_UPDATE,';
  stSql := stSql + 'AL_VIEWSEQ )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''Y'',';
  stSql := stSql + '1) ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMGUBUNCODE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMGUBUNCODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AG_ARMCODE,';
  stSql := stSql + ' AG_ARMNAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMMODECODE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMMODECODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AL_ALARMMODECODE,';
  stSql := stSql + ' AL_ALARMMODENAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ALARMMODENOTCARD (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AN_CODE,';
  stSql := stSql + ' AN_NOTDATA) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value(aCode, aName, aView,
  aGrade, aSound: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ALARMSTATUSCODE(';
  stSql := stSql + ' AL_ALARMSTATUSCODE,';
  stSql := stSql + ' AL_ALARMNAME,';
  stSql := stSql + ' AL_ALARMVIEW,';
  stSql := stSql + ' AL_ALARMGRADE,';
  stSql := stSql + ' AL_ALARMSOUND ) ';
  stSql := stSql + ' VALUES( ';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '' + aView + ',';
  stSql := stSql + '' + aGrade + ',';
  stSql := stSql + '' + aSound + ') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ARMAREA(aNodeNo, aEcuID, aArmAreaNo,
  aArmAreaName, aArmAreaUse, aLastMode, aVIEWSEQ, aLOCATEUSE, aTOTWIDTH,
  aTOTHEIGHT, aCURX, aCURY, aDONGCODE, aFLOORCODE, aAREACODE: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ARMAREA( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AC_NODENO,';
  stSql := stSql + ' AC_ECUID,';
  stSql := stSql + ' AR_AREANO,';
  stSql := stSql + ' AR_NAME,';
  stSql := stSql + ' AR_USE,';
  stSql := stSql + ' AR_LASTMODE,';
  stSql := stSql + ' AR_VIEWSEQ,';
  stSql := stSql + ' AR_LOCATEUSE,';
  stSql := stSql + ' AR_TOTWIDTH,';
  stSql := stSql + ' AR_TOTHEIGHT,';
  stSql := stSql + ' AR_CURX,';
  stSql := stSql + ' AR_CURY,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode  + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + FillZeroStrNum(aArmAreaNo,2) + ''',';
  stSql := stSql + '''' + aArmAreaName + ''',';
  stSql := stSql + '''' + aArmAreaUse + ''',';
  stSql := stSql + '''' + aLastMode + ''',';
  stSql := stSql + '' + aVIEWSEQ + ',';
  stSql := stSql + '''' + aLOCATEUSE + ''',';
  stSql := stSql + '' + aTOTWIDTH + ',';
  stSql := stSql + '' + aTOTHEIGHT + ',';
  stSql := stSql + '' + aCURX + ',';
  stSql := stSql + '' + aCURY + ',';
  stSql := stSql + '''' + aDONGCODE + ''',';
  stSql := stSql + '''' + aFLOORCODE + ''',';
  stSql := stSql + '''' + aAREACODE + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ATCODE_Value(aCode, aName, aWorkStartTime,
  aWorkEndTime, aInFromTime, aInToTime, aNightTime: string): Boolean;
var
  stSql : string;
begin
  stSql := 'INSERT INTO  TB_ATCODE  (';
  stSql := stSql + ' GROUP_CODE ,';
  stSql := stSql + ' AT_ATCODE ,';
  stSql := stSql + ' AT_CODENAME ,';
  stSql := stSql + ' AT_WORKSTARTTIME ,';
  stSql := stSql + ' AT_WORKENDTIME ,';
  stSql := stSql + ' AT_INFROMTIME ,';
  stSql := stSql + ' AT_INTOTIME ,';
  stSql := stSql + ' AT_NIGHTTIME )';
  stSql := stSql + ' VALUES (';
  stSql := stSql + '''' + G_stGroupCode  + ''',';
  stSql := stSql + '''' + aCode  + ''',';
  stSql := stSql + '''' + aName  + ''',';
  stSql := stSql + '''' + aWorkStartTime  + ''',';
  stSql := stSql + '''' + aWorkEndTime  + ''',';
  stSql := stSql + '''' + aInFromTime  + ''',';
  stSql := stSql + '''' + aInToTime  + ''',';
  stSql := stSql + '''' + aNightTime  + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ATEVENT_BACKtime(aDate, aCompanyCode,
  aEMCode, aWeekCode, aTime, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql : string;
begin

  stSql := 'Insert into TB_ATEVENT';
  stSql := stSql + '(GROUP_CODE,AT_DATE,CO_COMPANYCODE,EM_CODE,AT_ATCODE,AT_WEEKCODE,';
  stSql := stSql + 'AT_BACKTIME,AT_INSERTTIME,AT_INCODE,AT_SUMMARY,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',' ;
  stSql := stSql + '''' + aDate + ''',' ;
  stSql := stSql + '''' + aCompanyCode + ''',' ;
  stSql := stSql + '''' + aEMCode + ''',' ;
  stSql := stSql + '''000'',' ;
  stSql := stSql + '''' + aWeekCode + ''',' ;
  stSql := stSql + '''' + aTime + ''',' ;
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',' ;
  stSql := stSql + '''000'',' ;
  stSql := stSql + '''N'', ' ;
  stSql := stSql + '''' + aJijumCode + ''',' ;
  stSql := stSql + '''' + aDepartCode + ''',' ;
  stSql := stSql + '''' + aEmName + ''') ' ;

  result := dmDataBase.ProcessEventExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ATEVENT_Intime(aDate, aCompanyCode, aEMCode,
  aAttendCode, aWeekCode, aTime, aAtInCode, aJijumCode, aDepartCode,
  aEmName: string): Boolean;
var
  stSql : string;
begin

  Result := False;

  stSql := 'Insert into TB_ATEVENT';
  stSql := stSql + '(GROUP_CODE,AT_DATE,CO_COMPANYCODE,EM_CODE,AT_ATCODE,AT_WEEKCODE,';
  stSql := stSql + 'AT_INTIME,AT_INSERTTIME,AT_INCODE,AT_SUMMARY,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',' ;
  stSql := stSql + '''' + aDate + ''',' ;
  stSql := stSql + '''' + aCompanyCode + ''',' ;
  stSql := stSql + '''' + aEMCode + ''',' ;
  stSql := stSql + '''' + aAttendCode + ''',' ;
  stSql := stSql + '''' + aWeekCode + ''',' ;
  stSql := stSql + '''' + aTime + ''',' ;
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',' ;
  stSql := stSql + '''' + aAtInCode + ''',' ;
  stSql := stSql + '''N'', ' ;
  stSql := stSql + '''' + aJijumCode + ''',' ;
  stSql := stSql + '''' + aDepartCode + ''',' ;
  stSql := stSql + '''' + aEmName + ''')' ;

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ATEVENT_LEAVEtime(aDate, aCompanyCode,
  aEMCode, aWeekCode, aTime, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert into TB_ATEVENT';
  stSql := stSql + '(GROUP_CODE,AT_DATE,CO_COMPANYCODE,EM_CODE,AT_ATCODE,AT_WEEKCODE,';
  stSql := stSql + 'AT_LEAVETIME,AT_INSERTTIME,AT_INCODE,AT_SUMMARY,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',' ;
  stSql := stSql + '''' + aDate + ''',' ;
  stSql := stSql + '''' + aCompanyCode + ''',' ;
  stSql := stSql + '''' + aEMCode + ''',' ;
  stSql := stSql + '''000'',' ;
  stSql := stSql + '''' + aWeekCode + ''',' ;
  stSql := stSql + '''' + aTime + ''',' ;
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',' ;
  stSql := stSql + '''000'',' ;
  stSql := stSql + '''N'', ' ;
  stSql := stSql + '''' + aJijumCode + ''',' ;
  stSql := stSql + '''' + aDepartCode + ''',' ;
  stSql := stSql + '''' + aEmName + ''')' ;

  result := dmDataBase.ProcessEventExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ATEVENT_Outtime(aDate, aCompanyCode,
  aEMCode, aAttendCode, aWeekCode, aTime, aAtOutCode, aJijumCode, aDepartCode,
  aEmName: string): Boolean;
var
  stSql : string;
begin
  Result := False;

  stSql := 'Insert into TB_ATEVENT';
  stSql := stSql + '(GROUP_CODE,AT_DATE,CO_COMPANYCODE,EM_CODE,AT_ATCODE,AT_WEEKCODE,';
  stSql := stSql + 'AT_OUTTIME,AT_INSERTTIME,AT_OUTCODE,AT_SUMMARY,CO_JIJUMCODE,CO_DEPARTCODE,EM_NAME) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',' ;
  stSql := stSql + '''' + aDate + ''',' ;
  stSql := stSql + '''' + aCompanyCode + ''',' ;
  stSql := stSql + '''' + aEMCode + ''',' ;
  stSql := stSql + '''' + aAttendCode + ''',' ;
  stSql := stSql + '''' + aWeekCode + ''',' ;
  stSql := stSql + '''' + aTime + ''',' ;
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',' ;
  stSql := stSql + '''' + aAtOutCode + ''',' ;
  stSql := stSql + '''N'',' ;
  stSql := stSql + '''' + aJijumCode + ''',' ;
  stSql := stSql + '''' + aDepartCode + ''',' ;
  stSql := stSql + '''' + aEmName + ''')' ;

  result := dmDataBase.ProcessEventExecSQL(stSql);
end;


function TdmZeronEventDBFunction.InsertIntoTB_ATINCODE_Value(aAtInCode, aAtInName,
  aAtInType, aAtSystem: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ATINCODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AT_INCODE,';
  stSql := stSql + ' AT_INNAME,';
  stSql := stSql + ' AT_INTYPE,';
  stSql := stSql + ' AT_SYSTEM) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aAtInCode + ''', ';
  stSql := stSql + '''' + aAtInName + ''', ';
  stSql := stSql + '''' + aAtInType + ''', ';
  stSql := stSql + '''' + aAtSystem + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ATOUTCODE_Value(aAtOutCode, aAtOutName,
  aAtOutType, aAtSystem: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ATOUTCODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AT_OUTCODE,';
  stSql := stSql + ' AT_OUTNAME,';
  stSql := stSql + ' AT_OUTTYPE,';
  stSql := stSql + ' AT_SYSTEM) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aAtOutCode + ''', ';
  stSql := stSql + '''' + aAtOutName + ''', ';
  stSql := stSql + '''' + aAtOutType + ''', ';
  stSql := stSql + '''' + aAtSystem + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_ATVACODE_Value(aCode,
  aName,aType,aSystem: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_ATVACODE(';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AT_VACODE ,';
  stSql := stSql + ' AT_VANAME , ';
  stSql := stSql + ' AT_VATYPE , ';
  stSql := stSql + ' AT_SYSTEM ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''', ';
  stSql := stSql + '''' + aType + ''', ';
  stSql := stSql + '''' + aSystem + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_CARDGROUPCODE_All(aCode, aName, aSeq, aUsed,
  aViewSeq: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_CARDGROUPCODE(';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CA_GROUP,';
  stSql := stSql + ' CA_GROUPNAME, ';
  stSql := stSql + ' CA_DEEPSEQ, ';
  stSql := stSql + ' CA_CODEUSE, ';
  stSql := stSql + ' CA_VIEWSEQ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''', ';
  stSql := stSql + '' + aSeq + ', ';
  stSql := stSql + '''' + aUsed + ''', ';
  stSql := stSql + '' + aViewSeq + ') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_CARDTYPE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_CARDTYPE(CT_CODE,CT_NAME) ';
  stSql := stSql + ' Values( '''+aCode+''',''' + aName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.insertintoTB_CARD_Value(aCardNo, aCardGubun, aCardType,
  aCompanycode, aEmCode, aPositionNum: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_CARD(';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_CARDNO,';
  stSql := stSql + 'CA_GUBUN,';
  stSql := stSql + 'CA_CARDTYPE,';
  stSql := stSql + 'EM_CODE,';
  stSql := stSql + 'CO_COMPANYCODE,';
  stSql := stSql + 'CA_UPDATETIME,';
  stSql := stSql + 'POSITIONNUM,';
  stSql := stSql + 'CA_UPDATEOPERATOR, ';
  stSql := stSql + 'CA_DOORGRADE ) ';
  stSql := stSql + ' Values ( ';
  stSql := stSql + '''' +  G_stGroupCode + ''',';
  stSql := stSql + '''' + aCardNo + ''',' ;
  stSql := stSql + '''' + aCardGubun + ''',' ;
  stSql := stSql + '''' + aCardType + ''',' ;
  stSql := stSql + '''' + aEmCode + ''',' ;
  stSql := stSql + '''' + aCompanyCode + ''',' ;
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',' ;
  stSql := stSql + aPositionNum + ',' ;
  stSql := stSql + '''' + G_stAdminUserID + ''',' ;
  stSql := stSql + '''N'')' ;

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_COMPANY_CompanyName(aCompanyCode,
  aName: string): Boolean;
var
  stSql : string;
  stJijumCode : string;
  stDepartCode : string;
begin
  stJijumCode := FillZeroNumber(0,G_nCompanyCodeLength);
  stDepartCode := FillZeroNumber(0,G_nCompanyCodeLength);
  stSql := ' Insert Into TB_COMPANY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' CO_JIJUMCODE,';
  stSql := stSql + ' CO_DEPARTCODE,';
  stSql := stSql + ' CO_NAME,';
  stSql := stSql + ' CO_GUBUN,';
  stSql := stSql + ' CO_UPDATECHECK )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + stJijumCode + ''',';
  stSql := stSql + '''' + stDepartCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_COMPANY_DepartName(aCompanyCode, aJijumCode,
  aDepartCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_COMPANY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' CO_JIJUMCODE,';
  stSql := stSql + ' CO_DEPARTCODE,';
  stSql := stSql + ' CO_NAME,';
  stSql := stSql + ' CO_GUBUN,';
  stSql := stSql + ' CO_UPDATECHECK )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''3'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_COMPANY_JijumName(aCompanyCode, aJijumCode,
  aName: string): Boolean;
var
  stSql : string;
  stDepartCode : string;
begin
  stDepartCode := FillZeroNumber(0,G_nCompanyCodeLength);
  stSql := ' Insert Into TB_COMPANY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' CO_JIJUMCODE,';
  stSql := stSql + ' CO_DEPARTCODE,';
  stSql := stSql + ' CO_NAME,';
  stSql := stSql + ' CO_GUBUN,';
  stSql := stSql + ' CO_UPDATECHECK )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + stDepartCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''2'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_COMPANY_Value(aCompanyCode, aJijumCode,
  aDepartCode, aGubun, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_COMPANY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' CO_JIJUMCODE,';
  stSql := stSql + ' CO_DEPARTCODE,';
  stSql := stSql + ' CO_NAME,';
  stSql := stSql + ' CO_GUBUN,';
  stSql := stSql + ' CO_UPDATECHECK )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aGubun + ''',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_CONFIG_All(aCONFIGGROUP, aCONFIGCODE,
  aCONFIGVALUE, aDetail: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_CONFIG (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_CONFIGGROUP,';
  stSql := stSql + ' CO_CONFIGCODE,';
  stSql := stSql + ' CO_CONFIGVALUE,';
  stSql := stSql + ' CO_CONFIGDETAIL) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCONFIGGROUP + ''', ';
  stSql := stSql + '''' + aCONFIGCODE + ''', ';
  stSql := stSql + '''' + aCONFIGVALUE + ''',';
  stSql := stSql + '''' + aDetail + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_CURRENTDAEMON_Value(aCode,
  aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_CURRENTDAEMON(CU_STATECODE,CU_STATEVALUE) ';
  stSql := stSql + ' Values( '''+ aCode +''','''+aValue+''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDGROUPCODE_Value(aCode, aName,
  aApply, aUse: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DEVICECARDGROUPCODE (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'DG_CODE,';
  stSql := stSql + 'DG_NAME,';
  stSql := stSql + 'DG_APPLY,';
  stSql := stSql + 'DG_USE)';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aApply + ''',';
  stSql := stSql + '''' + aUse + ''' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNOEMPLOYEE_FieldName(aCompanyCode,
  aEmCode, aNodeNo, aEcuID, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNOEMPLOYEE( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CO_COMPANYCODE,';
  stSql := stSql + 'EM_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + '' + aFieldName + ')';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aEmCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aValue + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNOGROUP_ALARM(aGroupCode, aNodeNo,
  aECUID, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNOGROUP( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_GROUP,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'DE_USEALARM,';
  stSql := stSql + 'DE_USEACCESS,';
  stSql := stSql + 'DE_TIMECODE,';
  stSql := stSql + 'DE_PERMIT,';
  stSql := stSql + 'DE_RCVACK,';
  stSql := stSql + 'DE_UPDATETIME,';
  stSql := stSql + 'DE_UPDATEOPERATOR ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''' + aTimCode + ''',';
  stSql := stSql + '''' + aPermit + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNOGROUP_DOOR(aGroupCode, aNodeNo,
  aECUID, aDoorNO, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNOGROUP( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_GROUP,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  if aDoorNO = '1' then  stSql := stSql + 'DE_DOOR1,'
  else if aDoorNO = '2'then  stSql := stSql + 'DE_DOOR2,';
  stSql := stSql + 'DE_USEACCESS,';
  stSql := stSql + 'DE_TIMECODE,';
  stSql := stSql + 'DE_PERMIT,';
  stSql := stSql + 'DE_RCVACK,';
  stSql := stSql + 'DE_UPDATETIME,';
  stSql := stSql + 'DE_UPDATEOPERATOR ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''' + aTimCode + ''',';
  stSql := stSql + '''' + aPermit + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNOGROUP_FieldName(aCardGroup,
  aNodeNo, aEcuID, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNOGROUP( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_GROUP,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + '' + aFieldName + ')';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCardGroup + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aValue + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNO_ALARM(aCardNo, aNodeNo, aECUID,
  aTimCode, aPermit, aValue: string;aArmAreaNo:string='0'): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNO( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_CARDNO,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  if aArmAreaNo = '0' then stSql := stSql + 'DE_USEALARM,';
  stSql := stSql + 'DE_ALARM' + aArmAreaNo + ',';
  stSql := stSql + 'DE_USEACCESS,';
  stSql := stSql + 'DE_TIMECODE,';
  stSql := stSql + 'DE_PERMIT,';
  stSql := stSql + 'DE_RCVACK,';
  stSql := stSql + 'DE_UPDATETIME,';
  stSql := stSql + 'DE_UPDATEOPERATOR ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCardNo + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  if aArmAreaNo = '0' then stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''' + aTimCode + ''',';
  stSql := stSql + '''' + aPermit + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNO_DOOR(aCardNo, aNodeNo, aECUID,
  aDoorNO, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Insert Into TB_DEVICECARDNO( ';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CA_CARDNO,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'DE_DOOR' + aDoorNO + ',';
  stSql := stSql + 'DE_USEACCESS,';
  stSql := stSql + 'DE_TIMECODE,';
  stSql := stSql + 'DE_PERMIT,';
  stSql := stSql + 'DE_RCVACK,';
  stSql := stSql + 'DE_UPDATETIME,';
  stSql := stSql + 'DE_UPDATEOPERATOR ) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCardNo + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aECUID + ''',';
  stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''' + aTimCode + ''',';
  stSql := stSql + '''' + aPermit + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICECARDNO_NotExistCardGroupCode(aCardNo,
  aGroupPermitCode: string): Boolean;
var
  stSql : string;
begin
  if Trim(aCardNo) = '' then Exit;
  stSql := ' Insert INTO TB_DEVICECARDNO (GROUP_CODE, ';
  stSql := stSql + ' AC_NODENO, ';
  stSql := stSql + ' AC_ECUID, ';
  stSql := stSql + ' CA_CARDNO, ';
  stSql := stSql + ' DE_DOOR1, ';
  stSql := stSql + ' DE_DOOR2, ';
  stSql := stSql + ' DE_USEACCESS, ';
  stSql := stSql + ' DE_USEALARM, ';
  stSql := stSql + ' DE_TIMECODE, ';
  stSql := stSql + ' DE_PERMIT, ';
  stSql := stSql + ' DE_RCVACK, ';
  stSql := stSql + ' DE_UPDATETIME, ';
  stSql := stSql + ' DE_UPDATEOPERATOR) ';
  stSql := stSql + ' select ''' + G_stGroupCode + ''', ';
  stSql := stSql + ' b.AC_NODENO, ';
  stSql := stSql + ' b.AC_ECUID, ';
  stSql := stSql + ' ''' + aCardNO + ''', ';
  stSql := stSql + ' b.DE_DOOR1, ';
  stSql := stSql + ' b.DE_DOOR2, ';
  stSql := stSql + ' b.DE_USEACCESS, ';
  stSql := stSql + ' b.DE_USEALARM, ';
  stSql := stSql + ' b.DE_TIMECODE, ';
  stSql := stSql + ' b.DE_PERMIT, ';
  stSql := stSql + ' ''N'', ';
  stSql := stSql + ' '''+ formatDateTime('yyyymmddHHMMSS',Now) + ''', ';
  stSql := stSql + ' '''+ G_stAdminUserID + ''' ';
  stSql := stSql + ' From TB_DEVICECARDNOGROUP B  ';
  stSql := stSql + ' where B.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND B.CA_GROUP = ''' + aGroupPermitCode + ''' ';
  stSql := stSql + ' AND NOT EXISTS ';
  stSql := stSql + ' (SELECT * FROM TB_DEVICECARDNO A ';
  stSql := stSql + ' WHERE A.GROUP_CODE = b.GROUP_CODE ';
  stSql := stSql + ' AND A.AC_NODENO = b.AC_NODENO ';
  stSql := stSql + ' AND A.AC_ECUID = b.AC_ECUID  ';
  stSql := stSql + ' AND A.CA_CARDNO = ''' + aCardNO + ''')  ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICESCHEDULE_All(aNodeNo, aECUID, aDOORNO,
  aDayCode, a1Time, a2Time, a3Time, a4Time, a5Time, a1Mode, a2Mode, a3Mode,
  a4Mode, a5Mode, aRcvAck: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DEVICESCHEDULE (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'DO_DOORNO,';
  stSql := stSql + 'DE_DAYCODE,';
  stSql := stSql + 'DE_CELL1TIME,';
  stSql := stSql + 'DE_CELL2TIME,';
  stSql := stSql + 'DE_CELL3TIME,';
  stSql := stSql + 'DE_CELL4TIME,';
  stSql := stSql + 'DE_CELL5TIME,';
  stSql := stSql + 'DE_CELL1MODE,';
  stSql := stSql + 'DE_CELL2MODE,';
  stSql := stSql + 'DE_CELL3MODE,';
  stSql := stSql + 'DE_CELL4MODE,';
  stSql := stSql + 'DE_CELL5MODE,';
  stSql := stSql + 'DE_UPDATETIME,';
  stSql := stSql + 'DE_UPDATEOPERATOR,';
  stSql := stSql + 'DE_RCVACK )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aDoorNo + ''',';
  stSql := stSql + '''' + aDayCode + ''',';
  stSql := stSql + '''' + a1Time + ''',';
  stSql := stSql + '''' + a2Time + ''',';
  stSql := stSql + '''' + a3Time + ''',';
  stSql := stSql + '''' + a4Time + ''',';
  stSql := stSql + '''' + a5Time + ''',';
  stSql := stSql + '''' + a1Mode + ''',';
  stSql := stSql + '''' + a2Mode + ''',';
  stSql := stSql + '''' + a3Mode + ''',';
  stSql := stSql + '''' + a4Mode + ''',';
  stSql := stSql + '''' + a5Mode + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddhhnnss',now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''',';
  stSql := stSql + '''' + aRcvAck + ''' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_DEVICETYPE_Value(aType,
  aTypeName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_DEVICETYPE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' DE_DEVICETYPE,';
  stSql := stSql + ' DE_TYPENAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aType + ''', ';
  stSql := stSql + '''' + aTypeName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DOORGUBUN_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_DOORGUBUN (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' DG_CODE,';
  stSql := stSql + ' DG_NAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DOORPOSICODE_Value(aPosiCode,
  aCodeName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DOORPOSICODE(';
  stSql := stSql + 'AC_DOORPOSI,';
  stSql := stSql + 'AC_DOORPOSINAME)';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + aPosiCode + ''',';
  stSql := stSql + '''' + aCodeName + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DOOR_DeviceDoorInit(aNodeNo, aEcuID,
  aDoorNo, aNodeIp: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DOOR (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'DO_DOORNO,';
  stSql := stSql + 'DO_DOORNONAME,';
  stSql := stSql + 'LO_DONGCODE,';
  stSql := stSql + 'LO_FLOORCODE,';
  stSql := stSql + 'LO_AREACODE,';
  stSql := stSql + 'DO_LOCATEUSE,';
  stSql := stSql + 'DO_TOTWIDTH,';
  stSql := stSql + 'DO_TOTHEIGHT,';
  stSql := stSql + 'DO_CURX,';
  stSql := stSql + 'DO_CURY,';
  stSql := stSql + 'DO_UPDATE,';
  stSql := stSql + 'DO_VIEWSEQ )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aDoorNo + ''',';
  stSql := stSql + '''' + aNodeIp + '_' + aEcuID + '-' + aDoorNo + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''N'',';
  stSql := stSql + '1 ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_DOOR_DoorName(aNodeNo, aEcuID, aDoorNo,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_DOOR (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'DO_DOORNO,';
  stSql := stSql + 'DO_DOORNONAME,';
  stSql := stSql + 'LO_DONGCODE,';
  stSql := stSql + 'LO_FLOORCODE,';
  stSql := stSql + 'LO_AREACODE,';
  stSql := stSql + 'DO_LOCATEUSE,';
  stSql := stSql + 'DO_TOTWIDTH,';
  stSql := stSql + 'DO_TOTHEIGHT,';
  stSql := stSql + 'DO_CURX,';
  stSql := stSql + 'DO_CURY,';
  stSql := stSql + 'DO_UPDATE,';
  stSql := stSql + 'DO_VIEWSEQ )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aDoorNo + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''Y'',';
  stSql := stSql + '1 ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_EMPHIS_Value(aCompanyCode, aEmpID, aFdmsID,
  aWorkMode, aCardNo, aRegGubun, aEmpNM, aHandphone, aCompanyName, aJijumName,
  aDepartName, aPosiName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_EMPHIS(';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'CO_COMPANYCODE,';
  stSql := stSql + 'EM_CODE,';
  stSql := stSql + 'FDMS_ID,';
  stSql := stSql + 'MODE,';
  stSql := stSql + 'SEND_STATUS,';
  stSql := stSql + 'CA_CARDNO,';
  stSql := stSql + 'CA_CARDTYPE,';
  stSql := stSql + 'SEND_STATUS2,';
  stSql := stSql + 'EH_INSERTTIME,';
  stSql := stSql + 'EM_NAME,';
  stSql := stSql + 'EM_HANDPHONE,';
  stSql := stSql + 'COMPANY_NAME,';
  stSql := stSql + 'JIJUM_NAME,';
  stSql := stSql + 'DEPART_NAME,';
  stSql := stSql + 'PO_NAME ) ';
  stSql := stSql + 'VALUES ( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aEmpID + ''',';
  stSql := stSql + '' + aFdmsID + ',';
  stSql := stSql + '''' + aWorkMode + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + aCardNo + ''',';
  stSql := stSql + '''' + aRegGubun + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddhhnnss',now) + ''',';
  stSql := stSql + '''' + aEmpNM + ''',';
  stSql := stSql + '''' + aHandphone + ''',';
  stSql := stSql + '''' + aCompanyName + ''',';
  stSql := stSql + '''' + aJijumName + ''',';
  stSql := stSql + '''' + aDepartName + ''',';
  stSql := stSql + '''' + aPosiName + ''' )';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_EMPLOYEE_Value(aEmpID, aEmpNM, aCompanyCode,
  aJijumCode, aDepartCode, aPosiCode, aCompanyPhone, aJoinDate, aRetireDate,
  aZipcode, aAddr1, aAddr2, aHomePhone, aHandphone, aEmpImg, afdmsID,
  aEmTypeCode,aWorkCode, aGradeType,aCardGroup,aWeekCode,aTimeCodeUse,aTimeGroup,aTime1,aTime2,aTime3,aTime4,aMaster: string): Boolean;
var
  stSql : string;
begin
  if Not isDigit(aGradeType) then aGradeType := '0';
  if Not isDigit(aWorkCode) then aWorkCode := '1';


  stSql := 'Insert Into TB_EMPLOYEE(';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'EM_CODE,';
  stSql := stSql + 'CO_COMPANYCODE,';
  stSql := stSql + 'CO_JIJUMCODE,';
  stSql := stSql + 'CO_DEPARTCODE,';
  stSql := stSql + 'PO_POSICODE,';
  stSql := stSql + 'EM_NAME,';
  stSql := stSql + 'EM_COPHONE,';
  stSql := stSql + 'EM_HOMEPHONE,';
  stSql := stSql + 'EM_HANDPHONE,';
  stSql := stSql + 'ZI_ZIPCODE,';
  stSql := stSql + 'EM_ADDR1,';
  stSql := stSql + 'EM_ADDR2,';
  stSql := stSql + 'EM_JOINDATE,';
  stSql := stSql + 'EM_RETIREDATE,';
  stSql := stSql + 'AT_ATCODE,';
  stSql := stSql + 'FDMS_ID,';
  stSql := stSql + 'FDMS_RELAY,';
  stSql := stSql + 'EM_UPDATETIME,';
  stSql := stSql + 'EM_UPDATEOPERATOR, ';
  stSql := stSql + 'RG_CODE , ';
  stSql := stSql + 'EM_MASTER , ';
  stSql := stSql + 'DE_TIMECODEUSE , ';
  stSql := stSql + 'TC_GROUP , ';
  stSql := stSql + 'TC_TIME1 , ';
  stSql := stSql + 'TC_TIME2 , ';
  stSql := stSql + 'TC_TIME3 , ';
  stSql := stSql + 'TC_TIME4 , ';
  stSql := stSql + 'TC_WEEKCODE , ';
  stSql := stSql + 'WG_CODE , ';
  stSql := stSql + 'EM_GRADETYPE , ';
  stSql := stSql + 'CA_GROUP ) ';
  stSql := stSql + 'VALUES ( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aEmpID + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aJijumCode + ''',';
  stSql := stSql + '''' + aDepartCode + ''',';
  stSql := stSql + '''' + aPosiCode + ''',';
  stSql := stSql + '''' + aEmpNM + ''',';
  stSql := stSql + '''' + aCompanyPhone + ''',';
  stSql := stSql + '''' + aHomePhone + ''',';
  stSql := stSql + '''' + aHandphone + ''',';
  stSql := stSql + '''' + aZipcode + ''',';
  stSql := stSql + '''' + aAddr1 + ''',';
  stSql := stSql + '''' + aAddr2 + ''',';
  stSql := stSql + '''' + aJoinDate + ''',';
  stSql := stSql + '''' + aRetireDate + ''',';
  stSql := stSql + '''001'',';
  stSql := stSql + afdmsID + ',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''', ';
  stSql := stSql + '''' + aEmTypeCode + ''' ,';
  stSql := stSql + '''' + aMaster + ''' ,';
  stSql := stSql + '''' + aTimeCodeUse + ''' ,';
  stSql := stSql + '''' + aTimeGroup + ''' ,';
  stSql := stSql + '''' + aTime1 + ''' ,';
  stSql := stSql + '''' + aTime2 + ''' ,';
  stSql := stSql + '''' + aTime3 + ''' ,';
  stSql := stSql + '''' + aTime4 + ''' ,';
  stSql := stSql + '''' + aWeekCode + ''' ,';
  stSql := stSql + '' + aWorkCode + ' ,';
  stSql := stSql + '' + aGradeType + ' ,';
  stSql := stSql + '''' + aCardGroup + '''  )';
  result := dmDataBase.ProcessExecSQL(stSql);

  if aEmpImg <> '' then
  begin
    UpdateTB_EMPLOYEE_EMIMAGE(aCompanyCode,aEmpID,aEmpImg);
  end;

end;

function TdmZeronEventDBFunction.InsertIntoTB_FIREGUBUN_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_FIREGUBUN(FG_CODE,FG_NAME) ';
  stSql := stSql + ' Values(';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_FOODCODE_Value(aCode, aName, aStartTime,
  aEndTime, aAmt: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_FOODCODE(';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' FO_FOODCODE,';
  stSql := stSql + ' FO_CODENAME,';
  stSql := stSql + ' FO_STARTTIME,';
  stSql := stSql + ' FO_ENDTIME,';
  stSql := stSql + ' FO_AMT) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aStartTime + ''',';
  stSql := stSql + '''' + aEndTime + ''',';
  stSql := stSql + '' + aAmt + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_FORMNAME_Value(aFmCode, aFmName,
  aFmUse: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_FORMNAME(';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' FM_CODE,';
  stSql := stSql + ' FM_NAME,';
  stSql := stSql + ' FM_USE) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aFmCode + ''',';
  stSql := stSql + '''' + aFmName + ''',';
  stSql := stSql + '''' + aFmUse + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_GRADEPROGRAM_Value(aClassCode, aMenuGroup,
  aProgramid, aGubun: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_GRADEPROGRAM( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' GR_GRADECODE,';
  stSql := stSql + ' PR_PROGRAMID,';
  stSql := stSql + ' PR_GROUPCODE,';
  stSql := stSql + ' GR_GUBUN,';
  stSql := stSql + ' AC_UPDATEDATE,';
  stSql := stSql + ' AC_UPDATEOPERATOR,';
  stSql := stSql + ' GR_UPDATE,';
  stSql := stSql + ' GR_INSERT,';
  stSql := stSql + ' GR_DELETE)';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aClassCode + ''',';
  stSql := stSql + '''' + aProgramid + ''',';
  stSql := stSql + '''' + aMenuGroup + ''',';
  stSql := stSql + '''' + aGubun + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddhhnnss',now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''Y'',';
  stSql := stSql + '''Y'')';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_GRADE_Value(aCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_GRADE( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' GR_GRADECODE,';
  stSql := stSql + ' GR_GARDENAME,';
  stSql := stSql + ' GR_UPDATETIME,';
  stSql := stSql + ' GR_UPDATEOPERATOR )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmddhhnnss',now) + ''',';
  stSql := stSql + '''' + G_stAdminUserID + ''')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_HOLIDAY_DayName(aDate,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_HOLIDAY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' HO_DAY,';
  stSql := stSql + ' HO_DESC,';
  stSql := stSql + ' HO_SEND,';
  stSql := stSql + ' HO_STATE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aDate + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''I'')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_HOLIDAY_Value(aDate, aName, aACType,
  aATType: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_HOLIDAY( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' HO_DAY,';
  stSql := stSql + ' HO_DESC,';
  stSql := stSql + ' HO_ACUSE,';
  stSql := stSql + ' HO_ATUSE,';
  stSql := stSql + ' HO_SEND,';
  stSql := stSql + ' HO_STATE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aDate + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aACType + ''',';
  stSql := stSql + '''' + aATType + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''I'')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value(aDeviceType,
  aAlarmMode, aStatusCode, aFuncode, aEventCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_KTTMAPPINGCODE (';
  stSql := stSql + ' AL_ALARMDEVICETYPECODE,';
  stSql := stSql + ' AL_ALARMMODECODE,';
  stSql := stSql + ' AL_ALARMSTATUSCODE2,';
  stSql := stSql + ' KTTFUNCODE,';
  stSql := stSql + ' KTTEVENTCODE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + aDeviceType + ''', ';
  stSql := stSql + '''' + aAlarmMode + ''', ';
  stSql := stSql + '''' + aStatusCode + ''', ';
  stSql := stSql + '''' + aFuncode + ''', ';
  stSql := stSql + '''' + aEventCode + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_LOCATION_AreaName(aBuildingCode, aFloorCode,
  aAreaCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_LOCATION( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' LO_NAME,';
  stSql := stSql + ' LO_GUBUN,';
  stSql := stSql + ' LO_IMAGEUSE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aBuildingCode + ''',';
  stSql := stSql + '''' + aFloorCode + ''',';
  stSql := stSql + '''' + aAreaCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''2'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_LOCATION_BuildingName(aBuildingCode,
  aName: string): Boolean;
var
  stSql : string;
  stFloorCode : string;
  stAreaCode : string;
begin
  stFloorCode := FillZeroNumber(0,G_nFloorCodeLength);
  stAreaCode := FillZeroNumber(0,G_nAreaCodeLength);
  stSql := ' Insert Into TB_LOCATION( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' LO_NAME,';
  stSql := stSql + ' LO_GUBUN,';
  stSql := stSql + ' LO_IMAGEUSE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aBuildingCode + ''',';
  stSql := stSql + '''' + stFloorCode + ''',';
  stSql := stSql + '''' + stAreaCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_LOCATION_FloorName(aBuildingCode,
  aFloorCode, aName: string): Boolean;
var
  stSql : string;
  stAreaCode : string;
begin
  stAreaCode := FillZeroNumber(0,G_nAreaCodeLength);
  stSql := ' Insert Into TB_LOCATION( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' LO_NAME,';
  stSql := stSql + ' LO_GUBUN,';
  stSql := stSql + ' LO_IMAGEUSE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aBuildingCode + ''',';
  stSql := stSql + '''' + aFloorCode + ''',';
  stSql := stSql + '''' + stAreaCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''1'',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_LOCATION_Value(aBuildingCode, aFloorCode,
  aAreaCode, aGubun, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_LOCATION( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' LO_DONGCODE,';
  stSql := stSql + ' LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE,';
  stSql := stSql + ' LO_NAME,';
  stSql := stSql + ' LO_GUBUN,';
  stSql := stSql + ' LO_IMAGEUSE )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aBuildingCode + ''',';
  stSql := stSql + '''' + aFloorCode + ''',';
  stSql := stSql + '''' + aAreaCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aGubun + ''',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value(aAN_CODE, aAN_MODE,
  aAL_STATUSCODE2: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_NOTCARDALARMCODE (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AN_CODE,';
  stSql := stSql + ' AN_MODE,';
  stSql := stSql + ' AL_STATUSCODE2) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aAN_CODE + ''', ';
  stSql := stSql + '''' + aAN_MODE + ''', ';
  stSql := stSql + '''' + aAL_STATUSCODE2 + ''') ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertintoTB_PATROLALARMEVENT(aDate, aTime, aPatrolSeq,
  aNodeNo, aEcuID, aReaderno, aAlarmName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_PATROLALARMEVENT(';
  stSql := stSql + 'PE_DATE,';
  stSql := stSql + 'PE_TIME,';
  stSql := stSql + 'PT_SEQ,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'RE_READERNO,';
  stSql := stSql + 'PE_EVENTNAME)';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + aDate + ''',';
  stSql := stSql + '''' + aTime + ''',';
  stSql := stSql + '' + aPatrolSeq + ',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aReaderno + ''',';
  stSql := stSql + '''' + aAlarmName + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_PATROLSTATE_Value(aDate, aNodeNo, aEcuID,
  aReaderno, aPatrolSeq, aPatrolState, aUpdateTime: string): Boolean;
var
  stSql : string;
begin
(*
  stSql := 'Create Table TB_PATROLSTATE (';
  stSql := stSql + ' GROUP_CODE varchar(10) DEFAULT ''1234567890''  NOT NULL,';
  stSql := stSql + ' PS_DATE varchar(8) NOT NULL,';
  stSql := stSql + ' AC_NODENO integer NOT NULL,';
  stSql := stSql + ' AC_ECUID varchar(2) NOT NULL,';
  stSql := stSql + ' RE_READERNO varchar() NOT NULL,';
  stSql := stSql + ' PT_SEQ Integer NOT NULL,';
  stSql := stSql + ' PS_STATE char(3) NULL,';
  stSql := stSql + ' PS_UPDATETIME varchar(17) NULL,';
*)

  stSql := ' Insert Into TB_PATROLSTATE(';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'PS_DATE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'RE_READERNO,';
  stSql := stSql + 'PT_SEQ,';
  stSql := stSql + 'PS_STATE,';
  stSql := stSql + 'PS_UPDATETIME)';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aDate + ''',';
  stSql := stSql + '' + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aReaderno + ''',';
  stSql := stSql + '' + aPatrolSeq + ',';
  stSql := stSql + '''' + aPatrolState + ''',';
  stSql := stSql + '''' + aUpdateTime + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_PATROLTIME(aCode,aName, aStartTime,
  aEndTime: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_PATROLTIME(';
  stSql := stSql + 'PT_SEQ,';
  stSql := stSql + 'PT_NAME,';
  stSql := stSql + 'PT_STRARTTIME,';
  stSql := stSql + 'PT_ENDTIME)';
  stSql := stSql + ' Values( ';
  stSql := stSql + '' + aCode + ',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''' + aStartTime + ''',';
  stSql := stSql + '''' + aEndTime + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_PERMITCODE_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_PERMITCODE(';
  stSql := stSql + 'PE_PERMITCODE,';
  stSql := stSql + 'PE_PERMITNAME)';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aName + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_PERRELAYCONFIG_Value(aCode, aValue,
  aDetail: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_PERRELAYCONFIG(';
  stSql := stSql + 'PC_CONFIGCODE,';
  stSql := stSql + 'PC_CONFIGVALUE,';
  stSql := stSql + 'PC_CONFIGDETAIL) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + aCode + ''',';
  stSql := stSql + '''' + aValue + ''',';
  stSql := stSql + '''' + aDetail + ''')';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_POSI_PosiName(aCompanyCode, aPosiCode,
  aName: string): Boolean;
var
  stSql : string;
  stDepartCode : string;
begin
  stDepartCode := FillZeroNumber(0,G_nCompanyCodeLength);
  stSql := ' Insert Into TB_POSI( ';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' CO_COMPANYCODE,';
  stSql := stSql + ' PO_POSICODE,';
  stSql := stSql + ' PO_NAME,';
  stSql := stSql + ' PO_UPDATECHECK )';
  stSql := stSql + ' values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aCompanyCode + ''',';
  stSql := stSql + '''' + aPosiCode + ''',';
  stSql := stSql + '''' + aName + ''',';
  stSql := stSql + '''N'' ';
  stSql := stSql + ')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_PROGRAMGROUP_Value(aGroupCode, aGroupName,
  aVisible, aGubun: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_PROGRAMGROUP( ';
  stSql := stSql + ' GROUP_CODE, ';
  stSql := stSql + ' PR_GROUPCODE, ';
  stSql := stSql + ' PR_GROUPCODENAME, ';
  stSql := stSql + ' PR_VISIBLE, ';
  stSql := stSql + ' GUBUN ) ';
  stSql := stSql + ' Values( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + aGroupCode + ''',';
  stSql := stSql + '''' + aGroupName + ''',';
  stSql := stSql + '''' + aVisible + ''',';
  stSql := stSql + '''' + aGubun + ''' )';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_PROGRAMID_Value(aProgramID, aGroupCode,
  aProgramName, aVisible, aViewSeq, aConfigCode, aEnable: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_PROGRAMID (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' PR_PROGRAMID,';
  stSql := stSql + ' PR_GROUPCODE,';
  stSql := stSql + ' PR_PROGRAMNAME,';
  stSql := stSql + ' PR_VISIBLE,';
  stSql := stSql + ' PR_VIEWSEQ,';
  stSql := stSql + ' CO_CONFIGCODE,';
  stSql := stSql + ' PR_ENABLE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aProgramID + ''', ';
  stSql := stSql + '''' + aGroupCode + ''', ';
  stSql := stSql + '''' + aProgramName + ''', ';
  stSql := stSql + '''' + aVisible + ''', ';
  stSql := stSql + aViewSeq + ', ';
  stSql := stSql + '''' + aConfigCode + ''', ';
  stSql := stSql + '''' + aEnable + ''') ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_READER_PatrolValue(aNodeNo, aEcuID,
  aReaderNo, aPatrolUse, aReaderName,aTotWidth,aTotHeight,aCurX,aCurY: string): Boolean;
var
  stSql :string;
begin
  stSql := ' Insert Into TB_READER (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'RE_READERNO,';
  stSql := stSql + 'DO_DOORNO,';
  stSql := stSql + 'RE_PATROLUSE,';
  stSql := stSql + 'RE_PATROLNAME,';
  stSql := stSql + ' RE_PATROLTOTWIDTH , ';
  stSql := stSql + ' RE_PATROLTOTHEIGHT , ';
  stSql := stSql + ' RE_PATROLCURX , ';
  stSql := stSql + ' RE_PATROLCURY , ';
  stSql := stSql + 'SEND_ACK,';
  stSql := stSql + 'RE_USE )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aReaderNo + ''',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''' + aPatrolUse + ''',';
  stSql := stSql + '''' + aReaderName + ''',';
  stSql := stSql + '' + aTotWidth + ', ';
  stSql := stSql + '' + aTotHeight + ', ';
  stSql := stSql + '' + aCurX + ', ';
  stSql := stSql + '' + aCurY + ', ';
  stSql := stSql + '''N'',';
  stSql := stSql + '''N'')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_READER_ReaderInit(aNodeNo, aEcuID,
  aReaderNo, aNodeIp: string): Boolean;
var
  stSql :string;
begin
  stSql := ' Insert Into TB_READER (';
  stSql := stSql + 'GROUP_CODE,';
  stSql := stSql + 'AC_NODENO,';
  stSql := stSql + 'AC_ECUID,';
  stSql := stSql + 'RE_READERNO,';
  stSql := stSql + 'DO_DOORNO,';
  stSql := stSql + 'SEND_ACK,';
  stSql := stSql + 'RE_USE )';
  stSql := stSql + ' values (';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aReaderNo + ''',';
  stSql := stSql + '''0'',';
  stSql := stSql + '''N'',';
  stSql := stSql + '''N'')';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_RELAYGUBUN_Value(aCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_RELAYGUBUN (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' RG_CODE,';
  stSql := stSql + ' RG_NAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aName + ''') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_SEMESTER(aCode, aUse, aStartDate,
  aEndDate: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_SEMESTER (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' SE_CODE,';
  stSql := stSql + ' SE_USE,';
  stSql := stSql + ' SE_STARTDATE,';
  stSql := stSql + ' SE_ENDDATE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aUse + ''', ';
  stSql := stSql + '''' + aStartDate + ''', ';
  stSql := stSql + '''' + aEndDate + ''') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_SMALLSETMAPPING_Value(aDeviceType, aMode,
  aState, aSmallSetCode, aExtCode, aUse: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_SMALLSETMAPPING (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' AL_ALARMDEVICETYPECODE,';
  stSql := stSql + ' AL_ALARMMODECODE,';
  stSql := stSql + ' AL_ALARMSTATUSCODE2,';
  stSql := stSql + ' SM_EVENTCODE,';
  stSql := stSql + ' SM_EXTCODE,';
  stSql := stSql + ' SM_SENDUSE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aDeviceType + ''', ';
  stSql := stSql + '''' + aMode + ''', ';
  stSql := stSql + '''' + aState + ''', ';
  stSql := stSql + '''' + aSmallSetCode + ''', ';
  stSql := stSql + '''' + aExtCode + ''', ';
  stSql := stSql + '''' + aUse + ''') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_SONGHOFDCONFIG(aCode, aUse,
  aLimitCount: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_SONGHOFDCONFIG (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' SF_CODE,';
  stSql := stSql + ' SF_USE,';
  stSql := stSql + ' SF_COUNT) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '''' + aCode + ''', ';
  stSql := stSql + '''' + aUse + ''', ';
  stSql := stSql + '' + aLimitCount + ') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_SYSTEMLOG_log(aNodeNo, aEcuID, aType,
  aNumber, aCardNo, aData, aUserID: string): Boolean;
var
  stSql : string;
begin
  if aUserID = '' then aUserID := G_stAdminUserID;

    stSql := 'Insert into TB_SYSTEMLOG(';
    stSql := stSql + ' SY_DATE,SY_TIME,SY_CLIENTIP,SY_OPERATOR,SY_LOGDATA, ' ;
    stSql := stSql + ' AC_NODENO,AC_ECUID,AC_TYPE,CA_CARDNO,AC_NUMBER ';
    stSql := stSql + ') ';
    stSql := stSql + 'VALUES(';
    stSql := stSql + '''' + FormatDateTime('yyyymmdd',Now) + ''',';
    stSql := stSql + '''' + FormatDateTime('HHMMSS',Now) + ''',';
    stSql := stSql + '''' + copy(GetLocalIPAddr,1,24) + ''',';
    stSql := stSql + '''' + aUserID + ''',';
    stSql := stSql + '''' + aData + ''',';
    stSql := stSql + inttostr(strtoint(aNodeNo)) + ',';
    stSql := stSql + '''' + aEcuID + ''',';
    stSql := stSql + '''' + aType + ''',';
    stSql := stSql + '''' + aCardNo + ''',';
    stSql := stSql + '''' + aNumber + ''' ';
    stSql := stSql + ') ';

    result :=  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_TIMECODE_Value(aGroup, aTime1, aTime2,
  aTime3, aTime4, aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_TIMECODE (';
  stSql := stSql + ' TC_GROUP,';
  stSql := stSql + ' TC_TIME1,';
  stSql := stSql + ' TC_TIME2,';
  stSql := stSql + ' TC_TIME3,';
  stSql := stSql + ' TC_TIME4, ';
  stSql := stSql + ' TC_CHANGE) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + aGroup + ''', ';
  stSql := stSql + '''' + aTime1 + ''', ';
  stSql := stSql + '''' + aTime2 + ''', ';
  stSql := stSql + '''' + aTime3 + ''', ';
  stSql := stSql + '''' + aTime4 + ''', ';
  stSql := stSql + '''' + aChange + ''') ';
  result :=  dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.InsertIntoTB_WORKGUBUN_Value(aWorkCode, aWorkType,
  aWorkName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert Into TB_WORKGUBUN (';
  stSql := stSql + ' GROUP_CODE,';
  stSql := stSql + ' WG_CODE,';
  stSql := stSql + ' WG_TYPE,';
  stSql := stSql + ' WG_NAME) ';
  stSql := stSql + ' VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''', ';
  stSql := stSql + '' + aWorkCode + ', ';
  stSql := stSql + '''' + aWorkType + ''', ';
  stSql := stSql + '''' + aWorkName + ''') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.InsertIntoTB_ZONEDEVICE_ZoneInit(aNodeNo, aEcuID,
  aZoneNo, aNodeIP: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Insert Into TB_ZoneDevice(GROUP_CODE,AC_NODENO,AC_ECUID,';
  stSql := stSql + ' AL_ZONENUM,AL_ZONENAME,AL_LOCATEUSE,AL_TOTWIDTH,';
  stSql := stSql + ' AL_TOTHEIGHT,AL_CURX,AL_CURY,LO_DONGCODE,LO_FLOORCODE,';
  stSql := stSql + ' LO_AREACODE ) ';
  stSql := stSql + ' Values ( ';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + aNodeNo + ',';
  stSql := stSql + '''' + aEcuID + ''',';
  stSql := stSql + '''' + aZoneNo + ''',';
  stSql := stSql + '''' + aNodeIP + '_' + aEcuID + '-' + aZoneNo + ''',';
  stSql := stSql + '''N'',';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '0,';
  stSql := stSql + '''' + FillZeroNumber(0,G_nBuildingCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nFloorCodeLength) + ''',';
  stSql := stSql + '''' + FillZeroNumber(0,G_nAreaCodeLength) + ''' ';
  stSql := stSql + ') ';

  result :=  dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.logInSave(aLogInfo: TLogInfo): Boolean;
var
  stSql : string;
begin
  stSql := 'Insert into TB_SYSTEMLOG(';
  stSql := stSql + ' GROUP_CODE,SY_DATE,SY_TIME,SY_CLIENTIP,SY_OPERATOR,SY_LOGDATA,AC_NODENO,AC_ECUID,CA_CARDNO,AC_NUMBER ' ;
  stSql := stSql + ') ';
  stSql := stSql + 'VALUES(';
  stSql := stSql + '''' + G_stGroupCode + ''',';
  stSql := stSql + '''' + FormatDateTime('yyyymmdd',aLogInfo.Log_Time) + ''',';
  stSql := stSql + '''' + FormatDateTime('HHMMSS',aLogInfo.Log_Time) + ''',';
  stSql := stSql + '''' + aLogInfo.IP_Addr + ''',';
  stSql := stSql + '''' + aLogInfo.User_ID + ''',';
  stSql := stSql + '''' + aLogInfo.Log_Note + ''',0,''00'',''0000000000'',''0'' ';
  stSql := stSql + ') ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_DaemonGubunAll(
  aGubun: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_ACCESSDEVICE set AC_DAEMONGUBUN = ' + aGubun + ' ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_DefaultNodeDeviceName(aNodeNo,
  aNodeIP: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_ACCESSDEVICE set AC_DEVICENAME = ''' + aNodeIP + ''' + ''_'' + AC_ECUID '
    end else  stSql := ' Update TB_ACCESSDEVICE set AC_DEVICENAME = ''' + aNodeIP + ''' || ''_'' || AC_ECUID ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSDEVICE set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_DeviceName(aNodeNo, aEcuID, aName,
  aAcType, aPTType, aAtType, aFdType: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSDEVICE set ';
  stSql := stSql + ' AC_DEVICENAME = ''' + aName + ''', ';
  stSql := stSql + ' AC_ACTYPE = ''' + aAcType + ''', ';
  stSql := stSql + ' AC_ATTYPE = ''' + aAtType + ''', ';
  stSql := stSql + ' AC_FDTYPE = ''' + aFdType + ''', ';
  stSql := stSql + ' AC_PTTYPE = ''' + aPTType + ''', ';
  stSql := stSql + ' AC_UPDATE = ''Y'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_Field_IntValue(aNodeNo, aEcuID,
  aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSDEVICE set ' + aFieldName + ' = ' + aValue + ' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  if isDigit(aNodeNo) then stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  if aEcuID <> '' then stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_Field_StringValue(aNodeNo, aEcuID,
  aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSDEVICE set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  if isDigit(aNodeNo) then stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  if aEcuID <> '' then stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_NodeIP(aNodeNo,
  aNodeIP: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSDEVICE set AC_MCUIP = ''' + aNodeIP + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_GUBUN = ''0'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSDEVICE_SENDACKAll(
  aSendAck: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_ACCESSDEVICE set SEND_ACK = ''' + aSendAck + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ACCESSEVENT_Field_StringValue(aDate, aTime,
  aNodeNo, aEcuID, aDoorNo, aCardNo, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ACCESSEVENT set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AC_TIME = ''' + aTime + ''' ';
  if isDigit(aNodeNo) then stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  if aEcuID <> '' then stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  if aDoorNo <> '' then stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';
  if aCardNo <> '' then stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ADMIN_Value(auserid, ausername, auserPw,
  aGradeCode, aMaster, aCompanyCode, aJijumCode, aDepartCode, aBuildingGrade,
  aDongCode, aFloorCode, aAreaCode: string): Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := ' Update TB_ADMIN set ';
  stSql := stSql + ' AD_USERPW = ''' + auserPw + ''',';
  stSql := stSql + ' AD_USERNAME = ''' + ausername + ''',';
  stSql := stSql + ' GR_GRADECODE = ''' + aGradeCode + ''',';
  stSql := stSql + ' AD_MASTER = ''' + aMaster + ''',';
  stSql := stSql + ' CO_COMPANYCODE = ''' + aCompanyCode + ''',';
  stSql := stSql + ' CO_JIJUMCODE = ''' + aJijumCode + ''',';
  stSql := stSql + ' CO_DEPARTCODE = ''' + aDepartCode + ''',';
  stSql := stSql + ' AD_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + ' AD_UPDATEOPERATER = ''' + G_stAdminUserID + ''', ';
  stSql := stSql + ' AD_BUILDINGGRADE = ''' + aBuildingGrade + ''', ';
  stSql := stSql + ' LO_DONGCODE = ''' + aDongCode + ''', ';
  stSql := stSql + ' LO_FLOORCODE = ''' + aFloorCode + ''', ';
  stSql := stSql + ' LO_AREACODE  = ''' + aAreaCode + ''' ';
  stSql := stSql + ' where GROUP_CODE =''' + G_stGroupCode + '''';
  stSql := stSql + ' AND AD_USERID = ''' + auserid + '''';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_AlarmDevice_BuildingPosition(aNodeNo, aEcuID,
  aBuildingCode, aFloorCode, aAreaCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ALARMDEVICE set ';
  stSql := stSql + ' LO_DONGCODE = ''' + aBuildingCode + ''', ';
  stSql := stSql + ' LO_FLOORCODE = ''' + aFloorCode + ''', ';
  stSql := stSql + ' LO_AREACODE = ''' + aAreaCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ALARMDEVICE_DefaultDeviceAlarmDeviceName(
  aNodeNo, aEcuID, aName: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_ALARMDEVICE set AL_ZONENAME = ''' + aName + ''' '
    end else  stSql := ' Update TB_ALARMDEVICE set AL_ZONENAME = ''' + aName + ''' ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
    stSql := stSql + ' AND ( AL_UPDATE is null or AL_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ALARMDEVICE_DefaultNodeAlarmDeviceName(aNodeNo,
  aNodeIP: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_ALARMDEVICE set AL_ZONENAME = ''' + aNodeIP + ''' + ''_'' + AC_ECUID '
    end else  stSql := ' Update TB_ALARMDEVICE set AL_ZONENAME = ''' + aNodeIP + ''' || ''_'' || AC_ECUID ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    if G_nDBType = MSSQL then
    begin
      stSql := stSql + ' AND AC_NODENO + AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO + AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end else
    begin
      stSql := stSql + ' AND AC_NODENO || AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO || AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end;
    stSql := stSql + ' AND ( AL_UPDATE is null or AL_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ALARMDEVICE_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ALARMDEVICE set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ALARMDEVICE_DeviceName(aNodeNo, aEcuID,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ALARMDEVICE set ';
  stSql := stSql + ' AL_ZONENAME = ''' + aName + ''', ';
  stSql := stSql + ' AL_UPDATE = ''Y'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ALARMDEVICE_TelNumber(aNodeNo, aEcuID,
  aTelNumber, aMemo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ALARMDEVICE set ';
  stSql := stSql + ' AL_TELNO = ''' + aTelNumber + ''', ';
  stSql := stSql + ' AL_MEMO = ''' + aMemo + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ALARMEVENT_AlarmCheck(aDate, aTime, aNodeNo,
  aEcuID, aMsgNo, aCheckOk, aCheckCode, aCheckUser,
  aCheckMessage: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_ALARMEVENT set ';
  stSql := stSql + ' AL_CHECKOK = ''' + aCheckOk + ''',';
  stSql := stSql + ' AL_CHECKCODE = ''' + aCheckCode + ''',';
  stSql := stSql + ' AL_CHECKMSG = ''' + aCheckMessage + ''',';
  stSql := stSql + ' al_updatetime = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + ' AL_CHECKUSER = ''' + aCheckUser + ''' ';
  stSql := stSql + ' Where AL_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AL_TIME = ''' + aTime + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo;
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AL_MSGNO = ''' + aMsgNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ALARMEVENT_Field_StringValue(aDate, aTime,
  aNodeNo, aEcuID, aMsgNo, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ALARMEVENT Set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' Where AL_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AL_TIME = ''' + aTime + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo;
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AL_MSGNO = ''' + aMsgNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ARMAREA_Field_IntValue(aNodeNo, aEcuID,
  aArmAreaNo, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ARMAREA Set ' + aFieldName + ' = ' + aValue + ' ';
  stSql := stSql + ' WHERE GROUP_CODE = ''' + G_stGroupCode + '''  ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ' ;
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AR_AREANO = ''' + aArmAreaNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ARMAREA_Field_StringValue(aNodeNo, aEcuID,
  aArmAreaNo, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ARMAREA Set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' WHERE GROUP_CODE = ''' + G_stGroupCode + '''  ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ' ;
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND AR_AREANO = ''' + aArmAreaNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ARMAREA_FromAlarmDeviceMemo: Boolean;
var
  stSql : string;
begin
  if G_nDBType = MDB then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.AR_TELNO = b.AL_TELNO, ';
    stSql := stSql + '     a.AR_MEMO = b.AL_MEMO, ';
    stSql := stSql + '     a.AG_ARMCODE = b.AG_ARMCODE ';
    stSql := stSql + ' From TB_ARMAREA A,TB_ALARMDEVICE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = B.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = B.AC_ECUID ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = MSSQL then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.AR_TELNO = b.AL_TELNO, ';
    stSql := stSql + '     a.AR_MEMO = b.AL_MEMO, ';
    stSql := stSql + '     a.AG_ARMCODE = b.AG_ARMCODE ';
    stSql := stSql + ' From TB_ARMAREA A,TB_ALARMDEVICE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = B.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = B.AC_ECUID ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = POSTGRESQL then
  begin
    stSql := 'UPDATE TB_ARMAREA SET ';
    stSql := stSql + ' AR_TELNO = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' AL_TELNO ';
    stSql := stSql + ' FROM TB_ALARMDEVICE ';
    stSql := stSql + ' WHERE TB_ARMAREA.GROUP_CODE = TB_ALARMDEVICE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ARMAREA.AC_NODENO = TB_ALARMDEVICE.AC_NODENO ';
    stSql := stSql + ' AND TB_ARMAREA.AC_ECUID = TB_ALARMDEVICE.AC_ECUID ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' AR_MEMO = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' AL_MEMO ';
    stSql := stSql + ' FROM TB_ALARMDEVICE ';
    stSql := stSql + ' WHERE TB_ARMAREA.GROUP_CODE = TB_ALARMDEVICE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ARMAREA.AC_NODENO = TB_ALARMDEVICE.AC_NODENO ';
    stSql := stSql + ' AND TB_ARMAREA.AC_ECUID = TB_ALARMDEVICE.AC_ECUID ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' AG_ARMCODE = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' AG_ARMCODE ';
    stSql := stSql + ' FROM TB_ALARMDEVICE ';
    stSql := stSql + ' WHERE TB_ARMAREA.GROUP_CODE = TB_ALARMDEVICE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ARMAREA.AC_NODENO = TB_ALARMDEVICE.AC_NODENO ';
    stSql := stSql + ' AND TB_ARMAREA.AC_ECUID = TB_ALARMDEVICE.AC_ECUID ';
    stSql := stSql + ' ) ';
    stSql := stSql + ' where TB_ALARMDEVICE.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = FIREBIRD then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.AR_TELNO = b.AL_TELNO, ';
    stSql := stSql + '     a.AR_MEMO = b.AL_MEMO, ';
    stSql := stSql + '     a.AG_ARMCODE = b.AG_ARMCODE ';
    stSql := stSql + ' From TB_ARMAREA A,TB_ALARMDEVICE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = B.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = B.AC_ECUID ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end;
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_BACKtime(aDate, aCompanyCode, aEMCode,
  aTime, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_ATEVENT ';
  stSql := stSql + 'set AT_BACKTIME = ''' + aTime + ''', ';
  stSql := stSql + ' AT_SUMMARY = ''N'', ';
  if aJijumCode <> '' then stSql := stSql + 'CO_JIJUMCODE = ''' + aJijumCode + ''',';
  if aDepartCode <> '' then stSql := stSql + 'CO_DEPARTCODE = ''' + aDepartCode + ''',';
  if aEmName <> '' then stSql := stSql + 'EM_NAME = ''' + aEmName + ''',';
  stSql := stSql + ' AT_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  result := dmDataBase.ProcessEventExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_CompanyCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_ATEVENT set CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_EmInfoInit: Boolean;
var
  stSql : string;
begin
  if G_nDBType = MDB then
  begin
    stSql := 'UPDATE TB_ATEVENT a ';
    stSql := stSql + ' INNER JOIN TB_EMPLOYEE b ';
    stSql := stSql + ' ON( a.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = b.EM_CODE ) ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' WHERE A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = MSSQL then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' From TB_ATEVENT A,TB_EMPLOYEE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.CO_COMPANYCODE = B.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = B.EM_CODE ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = POSTGRESQL then
  begin
    stSql := 'UPDATE TB_ATEVENT SET ';
    stSql := stSql + ' CO_JIJUMCODE = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' CO_JIJUMCODE ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_ATEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ATEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_ATEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' CO_DEPARTCODE = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' CO_DEPARTCODE ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_ATEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ATEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_ATEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' EM_NAME =  ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' EM_NAME ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_ATEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_ATEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_ATEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ) ';
    stSql := stSql + ' where TB_ATEVENT.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = FIREBIRD then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' From TB_ATEVENT A,TB_EMPLOYEE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.CO_COMPANYCODE = B.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = B.EM_CODE ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end;

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_Intime(aDate, aCompanyCode, aEMCode,
  aAttendCode, aWeekCode, aTime, aAtInCode, aJijumCode, aDepartCode,
  aEmName: string): Boolean;
var
  stSql : string;

begin
  stSql := 'Update TB_ATEVENT set ';
  stSql := stSql + 'AT_ATCODE = ''' + aAttendCode + ''',';
  stSql := stSql + 'AT_WEEKCODE = ''' + aWeekCode + ''',';
  stSql := stSql + 'AT_INTIME = ''' + aTime + ''',';
  stSql := stSql + 'AT_INCODE = ''' + aAtInCode + ''',';
  if aJijumCode <> '' then stSql := stSql + 'CO_JIJUMCODE = ''' + aJijumCode + ''',';
  if aDepartCode <> '' then stSql := stSql + 'CO_DEPARTCODE = ''' + aDepartCode + ''',';
  if aEmName <> '' then stSql := stSql + 'EM_NAME = ''' + aEmName + ''',';
  stSql := stSql + 'AT_SUMMARY = ''N'' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AT_DATE = ''' + aDate + ''' ';
  stSql := stsql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEMCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_LEAVEtime(aDate, aCompanyCode, aEMCode,
  aTime, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql : string;
begin

  stSql := 'update TB_ATEVENT ';
  stSql := stSql + 'set AT_LEAVETIME = ''' + aTime + ''', ';
  stSql := stSql + ' AT_SUMMARY = ''N'', ';
  if aJijumCode <> '' then stSql := stSql + ' CO_JIJUMCODE = ''' + aJijumCode + ''', ';
  if aDepartCode <> '' then stSql := stSql + ' CO_DEPARTCODE = ''' + aDepartCode + ''', ';
  if aEmName <> '' then stSql := stSql + ' EM_NAME = ''' + aEmName + ''', ';
  stSql := stSql + ' AT_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  result := dmDataBase.ProcessEventExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ATEVENT_OutTime(aDate, aCompanyCode, aEMCode,
  aNowTime, aAtOutCode, aJijumCode, aDepartCode, aEmName: string): Boolean;
var
  stSql : string;
begin

  stSql := 'update TB_ATEVENT ';
  stSql := stSql + 'set AT_OUTTIME = ''' + aNowTime + ''', ';
  stSql := stSql + ' AT_OUTCODE = ''' + aAtOutCode + ''', ';
  stSql := stSql + ' AT_SUMMARY = ''N'', ';
  if aJijumCode <> '' then stSql := stSql + ' CO_JIJUMCODE = ''' + aJijumCode + ''', ';
  if aDepartCode <> '' then stSql := stSql + ' CO_DEPARTCODE = ''' + aDepartCode + ''', ';
  if aEmName <> '' then stSql := stSql + ' EM_NAME = ''' + aEmName + ''', ';
  stSql := stSql + ' AT_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' and AT_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' and CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' and EM_CODE = ''' + aEMCode + ''' ';

  result := dmDataBase.ProcessEventExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CARDFINGER_FingerUserIDPermit(aFdmsNo,
  aPermit: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_CARDFINGER set ';
  stSql := stSql + ' FP_PERMIT = ''' + aPermit + ''', ';
  stSql := stSql + ' FP_CHANGE = ''Y'' ';
  stSql := stSql + ' where FP_USERID = ' + aFdmsNo + '';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_CARDGROUPCODE_Field_StringValue(aCode,
  aFieldName, aData: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_CARDGROUPCODE set ' + aFieldName + ' = ''' + aData + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP = ' + aCode + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_CARD_CardType(aCardNo, aCardGubun,
  aCardType: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_CARD set ';
  stSql := stSql + ' CA_GUBUN = ''' + aCardGubun + ''', ';
  stSql := stSql + ' CA_CARDTYPE = ''' + aCardType + ''' ' ;
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CARD_CompanyCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_CARD set CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CARD_DOORGRADEInitialize(
  aDoorGrade: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_CARD set CA_DOORGRADE = ''' + aDoorGrade + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_CARD_EmCode(aCardNo,aCardGubun,aCardType, aCompanyCode,
  aEmCode: string): Boolean;
var
  stSql :string;
begin
  stSql := 'Update TB_CARD ';
  stSql := stSql + ' Set CO_COMPANYCODE = ''' + aCompanyCode + ''', ' ;
  stSql := stSql + ' EM_CODE = ''' + aEmCode + ''' ' ;
  if aCardGubun <> ''  then stSql := stSql + ' ,CA_GUBUN = ''' + aCardGubun + ''' ';
  if aCardType <> ''  then stSql := stSql + ' ,CA_CARDTYPE = ''' + aCardType + ''' ' ;
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CARD_PoitionNum(aCardNo: string;
  aPositionNumber: integer): Boolean;
var
  stSql :string;
begin
  stSql := 'Update TB_CARD ';
  stSql := stSql + ' Set POSITIONNUM = ' + inttostr(aPositionNumber) ;
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_COMPANY_CompanyName(aCompanyCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_COMPANY set CO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''1'' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_COMPANY_DepartName(aCompanyCode, aJijumCode,
  aDepartCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_COMPANY set CO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_DEPARTCODE = ''' + aDepartCode + ''' ';
  //stSql := stSql + ' AND CO_GUBUN = ''3'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_COMPANY_JijumName(aCompanyCode, aJijumCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_COMPANY set CO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' AND CO_GUBUN = ''2'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CONFIG_Value(aCONFIGGROUP, aCONFIGCODE,
  aCONFIGVALUE: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_CONFIG ';
  stSql := stSql + ' Set CO_CONFIGVALUE = ''' + aCONFIGVALUE + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_CONFIGGROUP = ''' + aCONFIGGROUP + ''' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''' + aCONFIGCODE + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_CURRENTDAEMON_Value(aCode,
  aValue: String): Boolean;
var
  stSql : string;
begin
  Result := False;
  stSql := 'Update TB_CURRENTDAEMON Set CU_STATEVALUE = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CU_STATECODE = ''' + aCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDGROUPCODE_Apply(aGroupCode,
  aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDGROUPCODE set DG_APPLY = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND DG_CODE = ''' + aGroupCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDGROUPCODE_ApplyChange(
  aGroupPermitCode, aOldApply, aNewApply: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDGROUPCODE set DG_APPLY = ''' + aNewApply + ''' ';
  stSql := stSql + ' Where Group_Code = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND DG_CODE = ''' + aGroupPermitCode + ''' ';
  if aOldApply <> '' then stSql := stSql + ' AND DG_APPLY = ''' + aOldApply + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDGROUPCODE_Name(aGroupCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDGROUPCODE set DG_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND DG_CODE = ''' + aGroupCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDGROUPCODE_Use(aGroupCode,
  aUse: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDGROUPCODE set DG_USE = ''' + aUse + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND DG_CODE = ''' + aGroupCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNOEMPLOYEE_Field_StringValue(
  aCompanyCode, aEmCode, aNodeNo, aEcuID, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNOEMPLOYEE Set ';
  stSql := stSql + '' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE =''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE =''' + aEmCode + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNOGROUP_ALARM(aGroupCode, aNodeNo,
  aECUID, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNOGROUP Set ';
  stSql := stSql + 'DE_USEALARM = ''' + aValue + ''',';
  stSql := stSql + 'DE_TIMECODE = ''' + aTimCode + ''',';
  stSql := stSql + 'DE_PERMIT = ''' + aPermit + ''',';
  stSql := stSql + 'DE_RCVACK = ''N'',';
  stSql := stSql + 'DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + 'DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP =''' + aGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNOGROUP_DOOR(aGroupCode, aNodeNo,
  aECUID, aDoorNO, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNOGROUP Set ';
  if aDoorNO = '1' then  stSql := stSql + 'DE_DOOR1 = ''' + aValue + ''','
  else if aDoorNO = '2'then  stSql := stSql + 'DE_DOOR2 = ''' + aValue + ''',';
  stSql := stSql + 'DE_USEACCESS = ''Y'',';
  stSql := stSql + 'DE_TIMECODE = ''' + aTimCode + ''',';
  stSql := stSql + 'DE_PERMIT = ''' + aPermit + ''',';
  stSql := stSql + 'DE_RCVACK = ''N'',';
  stSql := stSql + 'DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + 'DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP =''' + aGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNOGROUP_Field_StringValue(aCardGroup,
  aNodeNo, aEcuID, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNOGROUP Set ';
  stSql := stSql + '' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_GROUP =''' + aCardGroup + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_ALARM(aCardNo, aNodeNo, aECUID,
  aTimCode, aPermit, aValue: string;aArmAreaNo:string='0'): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO Set ';
  if aArmAreaNo = '0' then stSql := stSql + 'DE_USEALARM = ''' + aValue + ''',';
  stSql := stSql + 'DE_ALARM' + aArmAreaNo + ' = ''' + aValue + ''',';
  stSql := stSql + 'DE_TIMECODE = ''' + aTimCode + ''',';
  stSql := stSql + 'DE_PERMIT = ''' + aPermit + ''',';
  stSql := stSql + 'DE_RCVACK = ''N'',';
  stSql := stSql + 'DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + 'DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO =''' + aCardNo + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_AllRCVACK(OrgState,
  NewState: String): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_DEVICECARDNO Set DE_RCVACK = ''' + NewState + ''' ';     //송신중으로 변경
  stSql := stSql + ' Where DE_RCVACK = ''' + OrgState + ''' ';
  stSql := stSql + ' AND GROUP_CODE = ''' + G_stGroupCode + ''' ' ;

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_CardRecv(aCardNo,
  aRecv: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO set ';
  stSql := stSql + ' DE_RCVACK = ''' + aRecv + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_CardStop(aCardNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO set ';
  stSql := stSql + ' DE_PERMIT = ''N'', ';
  stSql := stSql + ' DE_RCVACK = ''N'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO = ''' + aCardNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_DOOR(aCardNo, aNodeNo, aECUID,
  aDoorNO, aTimCode, aPermit, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO Set ';
  stSql := stSql + 'DE_DOOR' + aDoorNO + ' = ''' + aValue + ''',';
  stSql := stSql + 'DE_USEACCESS = ''Y'',';
  if aTimCode <> '' then stSql := stSql + 'DE_TIMECODE = ''' + aTimCode + ''',';
  if aPermit <> '' then stSql := stSql + 'DE_PERMIT = ''' + aPermit + ''',';
  stSql := stSql + 'DE_RCVACK = ''N'',';
  stSql := stSql + 'DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + 'DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
  stSql := stSql + ' Where GROUP_CODE =''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CA_CARDNO =''' + aCardNo + ''' ';
  stSql := stSql + ' AND AC_NODENO =' + aNodeNo ;
  stSql := stSql + ' AND AC_ECUID = ''' + aECUID + '''';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_ExistCardGroupCode(aCardNo,
  aGroupPermitCode: string): Boolean;
var
  stSql : string;
begin
  if G_nDBType = MSSQL then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.DE_DOOR1 = b.DE_DOOR1, ';
    stSql := stSql + '     a.DE_DOOR2 = b.DE_DOOR2, ';
    stSql := stSql + '     a.DE_USEACCESS = b.DE_USEACCESS, ';
    stSql := stSql + '     a.DE_USEALARM = b.DE_USEALARM, ';
    stSql := stSql + '     a.DE_TIMECODE = b.DE_TIMECODE, ';
    stSql := stSql + '     a.DE_PERMIT = b.DE_PERMIT, ';
    stSql := stSql + '     a.DE_RCVACK = ''N'', ';
    stSql := stSql + '     a.DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''', ';
    stSql := stSql + '     a.DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
    //stSql := stSql + '     a.downseq = 0 ';
    stSql := stSql + ' From TB_DEVICECARDNO A,TB_DEVICECARDNOGROUP B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = B.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = B.AC_ECUID ';
    stSql := stSql + ' AND B.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' AND A.CA_CARDNO = ''' + aCardNO + ''' ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = POSTGRESQL then
  begin
    stSql := 'UPDATE TB_DEVICECARDNO SET ';
    stSql := stSql + ' DE_DOOR1 = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' DE_DOOR1 ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_DOOR2 = ';
    stSql := stSql + '(SELECT ';
    stSql := stSql + ' DE_DOOR2 ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_USEACCESS =  ';
    stSql := stSql + '(SELECT  ';
    stSql := stSql + ' DE_USEACCESS ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_USEALARM = ';
    stSql := stSql + '(SELECT  ';
    stSql := stSql + ' DE_USEALARM  ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_TIMECODE = ';
    stSql := stSql + '(SELECT ';
    stSql := stSql + ' DE_TIMECODE ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_PERMIT = ';
    stSql := stSql + '(SELECT ';
    stSql := stSql + ' DE_PERMIT ';
    stSql := stSql + ' FROM TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' WHERE TB_DEVICECARDNO.GROUP_CODE = TB_DEVICECARDNOGROUP.GROUP_CODE ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_NODENO = TB_DEVICECARDNOGROUP.AC_NODENO ';
    stSql := stSql + ' AND TB_DEVICECARDNO.AC_ECUID = TB_DEVICECARDNOGROUP.AC_ECUID ';
    stSql := stSql + ' AND TB_DEVICECARDNOGROUP.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' DE_RCVACK = ''N'', ';
    stSql := stSql + ' DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''', ';
    stSql := stSql + ' DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
    //stSql := stSql + ' downseq = 0 ';
    stSql := stSql + ' where TB_DEVICECARDNO.CA_CARDNO = ''' + aCardNO + ''' ';
    stSql := stSql + ' AND TB_DEVICECARDNO.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = MDB then
  begin
    stSql := 'UPDATE TB_DEVICECARDNO a ';
    stSql := stSql + ' INNER JOIN ( select * from TB_DEVICECARDNOGROUP ';
    stSql := stSql + ' Where CA_GROUP = ''' + aGroupPermitCode + ''' ) b ';
    stSql := stSql + ' ON( a.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND a.AC_NODENO = b.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = b.AC_ECUID ) ';
    stSql := stSql + ' Set a.DE_DOOR1 = b.DE_DOOR1, ';
    stSql := stSql + '     a.DE_DOOR2 = b.DE_DOOR2, ';
    stSql := stSql + '     a.DE_USEACCESS = b.DE_USEACCESS, ';
    stSql := stSql + '     a.DE_USEALARM = b.DE_USEALARM, ';
    stSql := stSql + '     a.DE_TIMECODE = b.DE_TIMECODE, ';
    stSql := stSql + '     a.DE_PERMIT = b.DE_PERMIT, ';
    stSql := stSql + '     a.DE_RCVACK = ''N'', ';
    stSql := stSql + '     a.DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''', ';
    stSql := stSql + '     a.DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
    //stSql := stSql + '     a.downseq = 0 ';
    stSql := stSql + ' WHERE A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND A.CA_CARDNO = ''' + aCardNO + ''' ';
  end else if G_nDBType = FIREBIRD then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.DE_DOOR1 = b.DE_DOOR1, ';
    stSql := stSql + '     a.DE_DOOR2 = b.DE_DOOR2, ';
    stSql := stSql + '     a.DE_USEACCESS = b.DE_USEACCESS, ';
    stSql := stSql + '     a.DE_USEALARM = b.DE_USEALARM, ';
    stSql := stSql + '     a.DE_TIMECODE = b.DE_TIMECODE, ';
    stSql := stSql + '     a.DE_PERMIT = b.DE_PERMIT, ';
    stSql := stSql + '     a.DE_RCVACK = ''N'', ';
    stSql := stSql + '     a.DE_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''', ';
    stSql := stSql + '     a.DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''' ';
    stSql := stSql + ' From TB_DEVICECARDNO A,TB_DEVICECARDNOGROUP B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.AC_NODENO = B.AC_NODENO ';
    stSql := stSql + ' AND a.AC_ECUID = B.AC_ECUID ';
    stSql := stSql + ' AND B.CA_GROUP = ''' + aGroupPermitCode + ''' ';
    stSql := stSql + ' AND A.CA_CARDNO = ''' + aCardNO + ''' ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end;

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_HIS_DeviceIDChange(aNodeNo,
  aNewEcuID, aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO_HIS set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DEVICECARDNO_PROMISE_DeviceIDChange(aNodeNo,
  aNewEcuID, aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICECARDNO_PROMISE set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.updateTB_DEVICESCHEDULE_All(aNodeNo, aECUID, aDOORNO,
  aDayCode, a1Time, a2Time, a3Time, a4Time, a5Time, a1Mode, a2Mode, a3Mode,
  a4Mode, a5Mode, aRcvAck: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DEVICESCHEDULE set ';
  stSql := stSql + ' DE_CELL1TIME = ''' + a1Time + ''',';
  stSql := stSql + ' DE_CELL2TIME = ''' + a2Time + ''',';
  stSql := stSql + ' DE_CELL3TIME = ''' + a3Time + ''',';
  stSql := stSql + ' DE_CELL4TIME = ''' + a4Time + ''',';
  stSql := stSql + ' DE_CELL5TIME = ''' + a5Time + ''',';
  stSql := stSql + ' DE_CELL1MODE = ''' + a1Mode + ''',';
  stSql := stSql + ' DE_CELL2MODE = ''' + a2Mode + ''',';
  stSql := stSql + ' DE_CELL3MODE = ''' + a3Mode + ''',';
  stSql := stSql + ' DE_CELL4MODE = ''' + a4Mode + ''',';
  stSql := stSql + ' DE_CELL5MODE = ''' + a5Mode + ''',';
  stSql := stSql + ' DE_UPDATETIME = ''' + FormatDateTime('yyyymmddhhnnss',Now) + ''',';
  stSql := stSql + ' DE_UPDATEOPERATOR = ''' + G_stAdminUserID + ''',';
  stSql := stSql + ' DE_RCVACK = ''' + aRcvAck + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';
  stSql := stSql + ' AND DE_DAYCODE = ''' + aDayCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_BuildingPosition(aNodeNo, aEcuID, aDoorNo,
  aBuildingCode, aFloorCode, aAreaCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set ';
  stSql := stSql + ' LO_DONGCODE = ''' + aBuildingCode + ''',';
  stSql := stSql + ' LO_FLOORCODE = ''' + aFloorCode + ''',';
  stSql := stSql + ' LO_AREACODE = ''' + aAreaCode + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_DefaultDeviceDoorName(aNodeNo, aEcuID,
  aName: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_DOOR set DO_DOORNONAME = ''' + aName + ''' + ''-'' + DO_DOORNO  '
    end else  stSql := ' Update TB_DOOR set DO_DOORNONAME = ''' + aName + ''' || ''-'' || DO_DOORNO ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
    stSql := stSql + ' AND ( DO_UPDATE is null or DO_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_DefaultNodeDoorName(aNodeNo,
  aNodeIP: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_DOOR set DO_DOORNONAME = ''' + aNodeIP + ''' + ''_'' + AC_ECUID + ''-'' + DO_DOORNO '
    end else  stSql := ' Update TB_DOOR set DO_DOORNONAME = ''' + aNodeIP + ''' || ''_'' || AC_ECUID || ''-'' || DO_DOORNO ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    if G_nDBType = MSSQL then
    begin
      stSql := stSql + ' AND AC_NODENO + AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO + AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end else
    begin
      stSql := stSql + ' AND AC_NODENO || AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO || AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end;
    stSql := stSql + ' AND ( DO_UPDATE is null or DO_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_DoorName(aNodeNo, aEcuID, aDoorNo,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set DO_DOORNONAME = ''' + aName + ''', ';
  stSql := stSql + ' DO_UPDATE = ''Y'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_Door_Field_IntValue(aNodeNo, aEcuID, aDoorNo,
  aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set ' + aFieldName + ' = ' + aValue + ' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_Door_Field_StringValue(aNodeNo, aEcuID, aDoorNo,
  aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_DOOR_Schedule(aNodeNo, aEcuID, aDoorNo,
  aSchedule: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_DOOR set DO_SCHUSE = ''' + aSchedule + ''', ';
  stSql := stSql + ' SEND_ACK = ''N'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND DO_DOORNO = ''' + aDoorNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_Apply(aCompanyCode, aEmCode, aOldApply,
  aNewApply: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_EMPLOYEE set DG_APPLY = ''' + aNewApply + ''' ';
  stSql := stSql + ' Where Group_Code = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';
  if aOldApply <> '' then stSql := stSql + ' AND DG_APPLY = ''' + aOldApply + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.updateTB_EMPLOYEE_CardPermitGroup(aCompanyCode, aEmCode,
  aCardPermitGroup, aApply: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set DG_CODE = ''' + aCardPermitGroup + ''', ';
  stSql := stSql + ' DG_APPLY = ''' + aApply + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_CompanyCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_DepartCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode, aJijumCode, aDepartCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set CO_COMPANYCODE = ''' + aCompanyCode + ''', ';
  stSql := stSql + 'CO_JIJUMCODE = ''' + aJijumCode + ''', ';
  stSql := stSql + 'CO_DEPARTCODE = ''' + aDepartCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_EMIMAGE(aCompanyCode, aEmpID,
  aEmpImg: string): Boolean;
var
  stSql : string;
  TempAdoQuery :TADOQuery;
  stImg : string;
begin
  result := False;

  stSql := 'Update TB_EMPLOYEE set EM_IMAGE = :EM_IMAGE ';
  stSql := stSql + ' Where  GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmpID + ''' ';

  Try
    CoInitialize(nil);
    TempAdoQuery := TADOQuery.Create(nil);
    TempAdoQuery.Connection := dmDataBase.ADOConnection;
    TempAdoQuery.DisableControls;

    with TempAdoQuery do
    begin
      Close;
      Sql.Clear;
      Sql.Text := stSql;

      if G_nDBType = MSSQL then
      begin
        if FileExists(aEmpImg) then
          Parameters.ParamByName( 'EM_IMAGE' ).LoadFromFile( aEmpImg, ftGraphic );
      end else
      begin
        if G_stFileServerDir = '' then
        begin
          Exit;
        end;
        if FileExists(aEmpImg) then
        begin
          if copy(G_stFileServerDir,length(G_stFileServerDir),1) = '\' then stImg := G_stFileServerDir + aCompanyCode + aEmpID + '.jpg'
          else stImg := G_stFileServerDir + '\' + aCompanyCode + aEmpID + '.jpg';
          if aEmpImg <> stImg then
          begin
            CopyFile(pchar(aEmpImg), pchar(stImg), True);
          end;
          Parameters.ParamByName( 'EM_IMAGE' ).Value := stImg;
        end;
      end;
      Try
        ExecSQL;
      Except
        ON E: Exception do
          begin
            LogSave(G_stExeFolder + '\..\Log\DB' + FormatDateTime('yyyymmdd',Now) + '.log','DBError('+ E.Message + ')' + stSql);
            Exit;
          end;
      End;
    end;
  Finally
    TempAdoQuery.EnableControls;
    TempAdoQuery.Free;
    CoUninitialize;
  End;
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_EmTypeChange(aOrgCompanyCode,
  aOrgEmCode, aEmType: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set RG_CODE = ''' + aEmType + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_Field_IntValue(aCompanyCode, aEmCode,
  aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set ' + aFieldName + ' = ' + aValue + ' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_Field_StringValue(aCompanyCode,
  aEmCode, aFieldName, aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_JijumCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode, aJijumCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set CO_COMPANYCODE = ''' + aCompanyCode + ''', ';
  stSql := stSql + 'CO_JIJUMCODE = ''' + aJijumCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.updateTB_EMPLOYEE_LimitDate(aCompanyCode, aEmCode,
  aDate: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set EM_RETIREDATE = ''' + aDate + '''  ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_NULLWGCODE(aCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' update TB_EMPLOYEE set WG_CODE = ' + aCode + ' where WG_CODE is Null ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_PosiCodeChange(aOrgCompanyCode,
  aOrgEmCode, aPosiCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set PO_POSICODE = ''' + aPosiCode + '''  ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_RGCODEisNull: Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_EMPLOYEE set RG_CODE = ''001'' ';
  stSql := stSql + ' where RG_CODE IS NULL ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_EMPLOYEE_Value(aOldCompanyCode,aOldEmCode,aEmpID, aEmpNM, aCompanyCode,
  aJijumCode, aDepartCode, aPosiCode, aCompanyPhone, aJoinDate, aRetireDate,
  aZipcode, aAddr1, aAddr2, aHomePhone, aHandphone, aEmpImg, afdmsID,
  aEmTypeCode,aWorkCode, aGradeType,aCardGroup,aWeekCode,aTimeCodeUse,aTimeGroup,aTime1,aTime2,aTime3,aTime4,aMaster: string): Boolean;
var
  stSql : string;
begin
  if Not isDigit(aWorkCode) then aWorkCode := '1';
  if Not isDigit(aGradeType) then aGradeType := '0';

  stSql := 'Update TB_EMPLOYEE set ';
  stSql := stSql + 'CO_COMPANYCODE = ''' + aCompanyCode + ''',';
  stSql := stSql + 'CO_JIJUMCODE = ''' + aJijumCode + ''',';
  stSql := stSql + 'CO_DEPARTCODE = ''' + aDepartCode + ''',';
  stSql := stSql + 'EM_CODE = ''' + aEmpID + ''',';
  stSql := stSql + 'PO_POSICODE = ''' + aPosiCode + ''',';
  stSql := stSql + 'EM_NAME = ''' + aEmpNM + ''',';
  stSql := stSql + 'EM_COPHONE = ''' + aCompanyPhone + ''',';
  stSql := stSql + 'EM_HOMEPHONE = ''' + aHomePhone + ''',';
  stSql := stSql + 'EM_HANDPHONE = ''' + aHandphone + ''',';
  stSql := stSql + 'EM_ADDR1 = ''' + aAddr1 + ''',';
  stSql := stSql + 'EM_ADDR2 = ''' + aAddr2 + ''',';
  stSql := stSql + 'EM_JOINDATE = ''' + aJoinDate + ''',';
  stSql := stSql + 'EM_RETIREDATE = ''' + aRetireDate + ''',';
  stSql := stSql + 'FDMS_ID = '+ afdmsID + ',';
  stSql := stSql + 'FDMS_RELAY = ''N'',';
  stSql := stSql + 'EM_UPDATETIME = ''' + FormatDateTime('yyyymmddHHMMSS',Now) + ''',';
  stSql := stSql + 'EM_UPDATEOPERATOR = ''' + G_stAdminUserID + ''', ';
  stSql := stSql + 'RG_CODE = ''' + aEmTypeCode + ''', ';
  stSql := stSql + 'EM_MASTER = ''' + aMaster + ''', ';
  stSql := stSql + 'DE_TIMECODEUSE = ''' + aTimeCodeUse + ''', ';
  stSql := stSql + 'TC_GROUP = ''' + aTimeGroup + ''', ';
  stSql := stSql + 'TC_TIME1 = ''' + aTime1 + ''', ';
  stSql := stSql + 'TC_TIME2 = ''' + aTime2 + ''', ';
  stSql := stSql + 'TC_TIME3 = ''' + aTime3 + ''', ';
  stSql := stSql + 'TC_TIME4 = ''' + aTime4 + ''', ';
  stSql := stSql + 'TC_WEEKCODE = ''' + aWeekCode + ''', ';
  stSql := stSql + 'WG_CODE = ' + aWorkCode + ', ';
  stSql := stSql + 'EM_GRADETYPE = ' + aGradeType + ', ';
  stSql := stSql + 'CA_GROUP = ''' + aCardGroup + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + '''';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOldCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOldEmCode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  if aEmpImg <> '' then
  begin
    UpdateTB_EMPLOYEE_EMIMAGE(aCompanyCode,aEmpID,aEmpImg);
  end;

end;

function TdmZeronEventDBFunction.UpdateTB_FOODEVENT_CompanyCodeChange(aOrgCompanyCode,
  aOrgEmCode, aCompanyCode: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_FOODEVENT set CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aOrgCompanyCode + ''' ';
  stSql := stSql + ' AND EM_CODE = ''' + aOrgEmCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_FOODEVENT_EmInfoInit: Boolean;
var
  stSql : string;
begin
  if G_nDBType = MDB then
  begin
    stSql := 'UPDATE TB_FOODEVENT a ';
    stSql := stSql + ' INNER JOIN TB_EMPLOYEE b ';
    stSql := stSql + ' ON( a.GROUP_CODE = b.GROUP_CODE ';
    stSql := stSql + ' AND a.CO_COMPANYCODE = b.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = b.EM_CODE ) ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' WHERE A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = MSSQL then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' From TB_FOODEVENT A,TB_EMPLOYEE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.CO_COMPANYCODE = B.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = B.EM_CODE ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = POSTGRESQL then
  begin
    stSql := 'UPDATE TB_FOODEVENT SET ';
    stSql := stSql + ' CO_JIJUMCODE = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' CO_JIJUMCODE ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_FOODEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_FOODEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_FOODEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' CO_DEPARTCODE = ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' CO_DEPARTCODE ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_FOODEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_FOODEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_FOODEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ), ';
    stSql := stSql + ' EM_NAME =  ';
    stSql := stSql + ' (SELECT ';
    stSql := stSql + ' EM_NAME ';
    stSql := stSql + ' FROM TB_EMPLOYEE ';
    stSql := stSql + ' WHERE TB_FOODEVENT.GROUP_CODE = TB_EMPLOYEE.GROUP_CODE ';
    stSql := stSql + ' AND TB_FOODEVENT.CO_COMPANYCODE = TB_EMPLOYEE.CO_COMPANYCODE ';
    stSql := stSql + ' AND TB_FOODEVENT.EM_CODE = TB_EMPLOYEE.EM_CODE ';
    stSql := stSql + ' ) ';
    stSql := stSql + ' where TB_FOODEVENT.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end else if G_nDBType = FIREBIRD then
  begin
    stSql := ' Update A ';
    stSql := stSql + ' Set a.CO_JIJUMCODE = b.CO_JIJUMCODE, ';
    stSql := stSql + '     a.CO_DEPARTCODE = b.CO_DEPARTCODE, ';
    stSql := stSql + '     a.EM_NAME = b.EM_NAME ';
    stSql := stSql + ' From TB_FOODEVENT A,TB_EMPLOYEE B ';
    stSql := stSql + ' WHERE A.GROUP_CODE = B.GROUP_CODE ';
    stSql := stSql + ' AND A.CO_COMPANYCODE = B.CO_COMPANYCODE ';
    stSql := stSql + ' AND a.EM_CODE = B.EM_CODE ';
    stSql := stSql + ' AND A.GROUP_CODE = ''' + G_stGroupCode + ''' ';
  end;

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_FOOD_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_FOOD set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_FTPLIST_RETRYCOUNTInitialize: Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_FTPLIST set FL_RETRYCOUNT = 0 ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_GRADEPROGRAM_DELETEValue(aAdminClassCode,aMenuGroup, aProgramID,
  aDeleteGrade: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_GRADEPROGRAM set GR_DELETE = ''' + aDeleteGrade + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aAdminClassCode + ''' ';
  stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgramid + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_GRADEPROGRAM_INSERTValue(aAdminClassCode,aMenuGroup, aProgramID,
  aInsertGrade: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_GRADEPROGRAM set GR_INSERT = ''' + aInsertGrade + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aAdminClassCode + ''' ';
  stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgramid + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_GRADEPROGRAM_UPDATEValue(aAdminClassCode,aMenuGroup, aProgramID,
  aUpdateGrade: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_GRADEPROGRAM set GR_UPDATE = ''' + aUpdateGrade + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aAdminClassCode + ''' ';
  stSql := stSql + ' AND PR_PROGRAMID = ''' + aProgramid + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_GRADE_GradeName(aCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_GRADE set GR_GARDENAME = ''' + aName + ''' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND GR_GRADECODE = ''' + aCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_HOLIDAY_DayName(aDate, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_HOLIDAY set HO_STATE = ''I'', ';
  stSql := stSql + ' HO_DESC = ''' + aName + ''', ';
  stSql := stSql + ' HO_SEND = ''N'' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND HO_DAY = ''' + aDate + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.updateTB_HOLIDAY_Value(aDate, aName, aACType,
  aATType: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_HOLIDAY set HO_STATE = ''I'', ';
  stSql := stSql + ' HO_DESC = ''' + aName + ''', ';
  stSql := stSql + ' HO_ACUSE = ''' + aACType + ''', ';
  stSql := stSql + ' HO_ATUSE = ''' + aATType + ''', ';
  stSql := stSql + ' HO_SEND = ''N'' ';
  stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND HO_DAY = ''' + aDate + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_LOCATION_AreaName(aBuildingCode, aFloorCode,
  aAreaCode, aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_LOCATION set LO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_AREACODE = ''' + aAreaCode + ''' ';
  //stSql := stSql + ' AND LO_GUBUN = ''2'' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_LOCATION_BuildingName(aBuildingCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_LOCATION set LO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''0'' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_LOCATION_BuildingPosition(aBuildingCode,
  aParentImageWidth, aParentImageHeight, aCurX, aCurY: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_LOCATION set ';
  stSql := stSql + ' LO_TOTWIDTH = ' + aParentImageWidth + ', ';
  stSql := stSql + ' LO_TOTHEIGHT = ' + aParentImageHeight + ', ';
  stSql := stSql + ' LO_CURX = ' + aCurX + ', ';
  stSql := stSql + ' LO_CURY = ' + aCurY + '  ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + copy(aBuildingCode,1,3) + ''' ';
  if G_nBuildingStep > 0 then  stSql := stSql + ' AND LO_FLOORCODE = ''' + copy(aBuildingCode,4,3) + ''' ';
  if G_nBuildingStep > 1 then  stSql := stSql + ' AND LO_AREACODE = ''' + copy(aBuildingCode,7,3) + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''' + inttostr(G_nBuildingStep) + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_LOCATION_FloorName(aBuildingCode, aFloorCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_LOCATION set LO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND LO_DONGCODE = ''' + aBuildingCode + ''' ';
  stSql := stSql + ' AND LO_FLOORCODE = ''' + aFloorCode + ''' ';
  stSql := stSql + ' AND LO_GUBUN = ''1'' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_NOTCARDALARMCODE_Statuscode2(aCode, aMode,
  aStatusCode: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_NOTCARDALARMCODE set AL_STATUSCODE2 = ''' + aStatusCode + ''' ';
  stSql := stsql + ' Where AN_CODE = ''' + aCode + ''' ';
  stSql := stSql + ' AND AN_MODE = ''' + aMode + ''' ';
  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_PATROLSTATE_State(aDate, aNodeNo, aEcuID,
  aReaderno, aPatrolSeq, aPatrolState, aUpdateTime: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_PATROLSTATE set PS_STATE = ''' + aPatrolState + ''', ';
  stSql := stSql + ' PS_UPDATETIME = ''' + aUpdateTime + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PS_DATE = ''' + aDate + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderno + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aPatrolSeq + ' ';
  stSql := stSql + ' AND PS_STATE < ''' + aPatrolState + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_PATROLTIME_Value(aSeq, aName, aStart,
  aEnd: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_PATROLTIME set PT_NAME = ''' + aName + ''', ';
  stSql := stSql + ' PT_STRARTTIME = ''' + aStart + ''', ';
  stSql := stSql + ' PT_ENDTIME = ''' + aEnd + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND PT_SEQ = ' + aSeq + ' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_POSI_PosiName(aCompanyCode, aPosiCode,
  aName: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_POSI set PO_NAME = ''' + aName + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND CO_COMPANYCODE = ''' + aCompanyCode + ''' ';
  stSql := stSql + ' AND PO_POSICODE = ''' + aPosiCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_PROGRAMID_SetVisible: Boolean;
var
  stSql : string;
begin
  stSql := 'UPDATE TB_PROGRAMID a  ' ;
  stSql := stSql + ' SET PR_VISIBLE = ( ' ;
  stSql := stSql + '    SELECT CO_CONFIGVALUE ' ;
  stSql := stSql + '    FROM TB_CONFIG b  ' ;
  stSql := stSql + '    where b.CO_CONFIGGROUP = ''MOSTYPE'' ' ;
  stSql := stSql + '    AND a.CO_CONFIGCODE = b.CO_CONFIGCODE) ' ;
  stSql := stSql + ' WHERE a.PR_VISIBLE <> ''D'' ' ;

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_READER_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_READER set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_READER_PatrolDelete(aNodeNo, aEcuID,
  aReaderNo: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_READER set RE_PATROLUSE = ''0'' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_READER_PatrolValue(aNodeNo, aEcuID, aReaderNo,
  aPatrolUse, aReaderName,aTotWidth,aTotHeight,aCurX,aCurY: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_READER set RE_PATROLUSE = ''' + aPatrolUse + ''', ';
  stSql := stSql + ' RE_PATROLNAME = ''' + aReaderName + ''', ';
  stSql := stSql + ' RE_PATROLTOTWIDTH = ' + aTotWidth + ', ';
  stSql := stSql + ' RE_PATROLTOTHEIGHT = ' + aTotHeight + ', ';
  stSql := stSql + ' RE_PATROLCURX = ' + aCurX + ', ';
  stSql := stSql + ' RE_PATROLCURY = ' + aCurY + ' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';
  stSql := stSql + ' AND RE_READERNO = ''' + aReaderNo + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_RELAYGUBUN_Field_StringValue(aCode, aFieldName,
  aValue: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_RELAYGUBUN set ' + aFieldName + ' = ''' + aValue + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND RG_CODE = ''' + aCode + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_TIMECODE_Value(aGroup, aTime1, aTime2, aTime3,
  aTime4, aChange: string): Boolean;
var
  stSql : string;
begin
  stSql := 'Update TB_TIMECODE Set ';
  stSql := stSql + ' TC_TIME1 = ''' + aTime1 + ''',';
  stSql := stSql + ' TC_TIME2 = ''' + aTime2 + ''',';
  stSql := stSql + ' TC_TIME3 = ''' + aTime3 + ''',';
  stSql := stSql + ' TC_TIME4 = ''' + aTime4 + ''', ';
  stSql := stSql + ' TC_CHANGE = ''' + aChange + ''' ';
  stSql := stSql + ' Where TC_GROUP = ''' + aGroup + '''';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TdmZeronEventDBFunction.UpdateTB_ZONEDEVICE_DefaultDeviceAlarmDeviceName(aNodeNo,
  aEcuID, aName: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_ZONEDEVICE set AL_ZONENAME = ''' + aName + ''' + ''-'' + AL_ZONENUM '
    end else  stSql := ' Update TB_ZONEDEVICE set AL_ZONENAME = ''' + aName + ''' || ''-'' || AL_ZONENUM ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    stSql := stSql + ' AND AC_ECUID = ''' + aEcuID + ''' ';

    stSql := stSql + ' AND ( AL_UPDATE is null or AL_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ZONEDEVICE_DefaultNodeAlarmDeviceName(aNodeNo,
  aNodeIP: string): Boolean;
var
  stSql : string;
begin
    if G_nDBType = MSSQL then
    begin
      stSql := ' Update TB_ZONEDEVICE set AL_ZONENAME = ''' + aNodeIP + ''' + ''_'' + AC_ECUID + ''-'' + AL_ZONENUM '
    end else  stSql := ' Update TB_ZONEDEVICE set AL_ZONENAME = ''' + aNodeIP + ''' || ''_'' || AC_ECUID || ''-'' || AL_ZONENUM ';
    stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
    stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
    if G_nDBType = MSSQL then
    begin
      stSql := stSql + ' AND AC_NODENO + AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO + AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end else
    begin
      stSql := stSql + ' AND AC_NODENO || AC_ECUID IN ';
      stSql := stSql + ' (select AC_NODENO || AC_ECUID from TB_ACCESSDEVICE ';
      stSql := stSql + ' Where GROUP_CODE = ''' + G_stGroupCode + ''' ';
      stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
      stSql := stSql + ' AND ( AC_UPDATE is null or AC_UPDATE = ''N'' ) ';
      stSql := stSql + ' ) ';
    end;
    stSql := stSql + ' AND ( AL_UPDATE is null or AL_UPDATE = ''N'' ) ';

  result := dmDataBase.ProcessExecSQL(stSql);
end;

function TdmZeronEventDBFunction.UpdateTB_ZONEDEVICE_DeviceIDChange(aNodeNo, aNewEcuID,
  aOldEcuID: string): Boolean;
var
  stSql : string;
begin
  stSql := ' Update TB_ZONEDEVICE set AC_ECUID = ''' + aNewEcuID + ''' ';
  stSql := stSql + ' where GROUP_CODE = ''' + G_stGroupCode + ''' ';
  stSql := stSql + ' AND AC_NODENO = ' + aNodeNo + ' ';
  stSql := stSql + ' AND AC_ECUID = ''' + aOldEcuID + ''' ';

  result := dmDataBase.ProcessExecSQL(stSql);

end;

end.
