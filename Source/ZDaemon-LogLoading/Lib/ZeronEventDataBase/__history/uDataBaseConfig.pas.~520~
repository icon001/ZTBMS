unit uDataBaseConfig;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, AdvPanel,
  W7Classes, W7Buttons, Vcl.ImgList,System.iniFiles,Data.DB,Data.Win.ADODB,JclMime,
  ActiveX;

type
  TDataBaseConfig = class(TComponent)
  private
    FCancel: Boolean;
    FDBConnected: Boolean;
    class function FindSelf:TComponent;
    procedure SetCancel(const Value: Boolean);
    procedure SetDBConnected(const Value: Boolean);
  public
    { Public declarations }
    Procedure ShowDataBaseConfig;
    Function DataBaseConnect(aMessage:Boolean=True):Boolean;
  public
    Function SmallSetTableVersionCheck : Boolean;
    Function GetSmallSetTableVersion:integer;
    function SmallsetTable001VersionMake: Boolean;
    function SmallsetTable002VersionMake: Boolean;
    function SmallsetTable003VersionMake: Boolean;
    function SmallsetTable004VersionMake: Boolean;
  public
    Function PatrolTableVersionCheck : Boolean;
    Function GetPatrolTableVersion:integer;
    function PatrolTable001VersionMake: Boolean;
    function PatrolTable002VersionMake: Boolean;
    function PatrolTable003VersionMake: Boolean;
    function PatrolTable004VersionMake: Boolean;
    function PatrolTable005VersionMake: Boolean;
  public
    Function TableVersionCheck:Boolean;
    Function GetTableVersion:integer;
    function Table001VersionMake: Boolean;
    function Table002VersionMake: Boolean;
    function Table003VersionMake: Boolean;
    function Table004VersionMake: Boolean;
    function Table005VersionMake: Boolean;
    function Table006VersionMake: Boolean;
    function Table007VersionMake: Boolean;
    function Table008VersionMake: Boolean;
    function Table009VersionMake: Boolean;
    function Table010VersionMake: Boolean;
    function Table011VersionMake: Boolean;
    function Table012VersionMake: Boolean;
    function Table013VersionMake: Boolean;
    function Table014VersionMake: Boolean;
    function Table015VersionMake: Boolean;
    function Table016VersionMake: Boolean;
    function Table017VersionMake: Boolean;
    function Table018VersionMake: Boolean;
    function Table019VersionMake: Boolean;
    function Table020VersionMake: Boolean;
    function Table021VersionMake: Boolean;
    function Table022VersionMake: Boolean;
    function Table023VersionMake: Boolean;
    function Table024VersionMake: Boolean;
    function Table025VersionMake: Boolean;
    function Table026VersionMake: Boolean;
    function Table027VersionMake: Boolean;
    function Table028VersionMake: Boolean;
    function Table029VersionMake: Boolean;
    function Table030VersionMake: Boolean;
    function Table031VersionMake: Boolean;
    function Table032VersionMake: Boolean;
    function Table033VersionMake: Boolean;
    function Table034VersionMake: Boolean;
    function Table035VersionMake: Boolean;
    function Table036VersionMake: Boolean;
    function Table037VersionMake: Boolean;
    function Table038VersionMake: Boolean;
    function Table039VersionMake: Boolean;
    function Table040VersionMake: Boolean;
    function Table041VersionMake: Boolean;
    function Table042VersionMake: Boolean;
    function Table043VersionMake: Boolean;
    function Table044VersionMake: Boolean;
    function Table045VersionMake: Boolean;
    function Table046VersionMake: Boolean;
    function Table047VersionMake: Boolean;
    function Table048VersionMake: Boolean;
    function Table049VersionMake: Boolean;
    function Table050VersionMake: Boolean;
    function Table051VersionMake: Boolean;
    function Table052VersionMake: Boolean;
    function Table053VersionMake: Boolean;
    function Table054VersionMake: Boolean;
    function Table055VersionMake: Boolean;
    function Table056VersionMake: Boolean;
    function Table057VersionMake: Boolean;
    function Table058VersionMake: Boolean;
    function Table059VersionMake: Boolean;
    function Table060VersionMake: Boolean;
    function Table061VersionMake: Boolean;
    function Table062VersionMake: Boolean;
    function Table063VersionMake: Boolean;
    function Table064VersionMake: Boolean;
    function Table065VersionMake: Boolean;
    function Table066VersionMake: Boolean;
    function Table067VersionMake: Boolean;
    function Table068VersionMake: Boolean;
    function Table069VersionMake: Boolean;
    function Table070VersionMake: Boolean;
    function Table071VersionMake: Boolean;
    function Table072VersionMake: Boolean;
    function Table073VersionMake: Boolean;
    function Table074VersionMake: Boolean;
    function Table075VersionMake: Boolean;
    function Table076VersionMake: Boolean;
    function Table077VersionMake: Boolean;
    function Table078VersionMake: Boolean;
    function Table079VersionMake: Boolean;
    function Table080VersionMake: Boolean;
    function Table081VersionMake: Boolean;
    function Table082VersionMake: Boolean;
    function Table083VersionMake: Boolean;
    function Table084VersionMake: Boolean;
    function Table085VersionMake: Boolean;  //KTT관제 연동
    function Table086VersionMake: Boolean;
    function Table087VersionMake: Boolean;
    function Table088VersionMake: Boolean;
    function Table089VersionMake: Boolean;
    function Table090VersionMake: Boolean;  //KTT관제 연동
    function Table091VersionMake: Boolean;  //KTT관제 연동
    function Table092VersionMake: Boolean;  //KTT관제 연동
    function Table093VersionMake: Boolean;
    function Table094VersionMake: Boolean;
    function Table095VersionMake: Boolean;
    function Table096VersionMake: Boolean;
    function Table097VersionMake: Boolean;
    function Table098VersionMake: Boolean;
    function Table099VersionMake: Boolean;
    function Table100VersionMake: Boolean;
    function Table101VersionMake: Boolean;
    function Table102VersionMake: Boolean;
    function Table103VersionMake: Boolean;
    function Table104VersionMake: Boolean;
    function Table105VersionMake: Boolean;
    function Table106VersionMake: Boolean;
    function Table107VersionMake: Boolean;
    function Table108VersionMake: Boolean;
    function Table109VersionMake: Boolean;
    function Table110VersionMake: Boolean;
    function Table111VersionMake: Boolean;
    function Table112VersionMake: Boolean;
    function Table113VersionMake: Boolean;
    function Table114VersionMake: Boolean;
    function Table115VersionMake: Boolean;
    function Table116VersionMake: Boolean;
    function Table117VersionMake: Boolean;
    function Table118VersionMake: Boolean;
    function Table119VersionMake: Boolean;
    function Table120VersionMake: Boolean;
    function Table121VersionMake: Boolean;
    function Table122VersionMake: Boolean;
    function Table123VersionMake: Boolean;
    function Table124VersionMake: Boolean;
    function Table125VersionMake: Boolean;
    function Table126VersionMake: Boolean;
    function Table127VersionMake: Boolean;
    function Table128VersionMake: Boolean;
    function Table129VersionMake: Boolean;
    function Table130VersionMake: Boolean;
    function Table131VersionMake: Boolean;
    function Table132VersionMake: Boolean;
    function Table133VersionMake: Boolean;
    function Table134VersionMake: Boolean;
    function Table135VersionMake: Boolean;
    function Table136VersionMake: Boolean;
    function Table137VersionMake: Boolean;
    function Table138VersionMake: Boolean;
    function Table139VersionMake: Boolean;
    function Table140VersionMake: Boolean;
    function Table141VersionMake: Boolean;
    function Table142VersionMake: Boolean;
    function Table143VersionMake: Boolean;
    function Table144VersionMake: Boolean;
    function Table146VersionMake: Boolean;
    function Table147VersionMake: Boolean;
    function Table148VersionMake: Boolean;
    function Table149VersionMake: Boolean;
    function Table150VersionMake: Boolean;
    function Table151VersionMake: Boolean;
    function Table152VersionMake: Boolean;
    function Table153VersionMake: Boolean;
    function Table154VersionMake: Boolean;
    function Table155VersionMake: Boolean;
    function Table156VersionMake: Boolean;
    function Table157VersionMake: Boolean;
    function Table158VersionMake: Boolean;
    function Table159VersionMake: Boolean;
    function Table160VersionMake: Boolean;
    function Table161VersionMake: Boolean;
    function Table162VersionMake: Boolean;
    function Table163VersionMake: Boolean;
    function Table164VersionMake: Boolean;
    function Table165VersionMake: Boolean;
    function Table166VersionMake: Boolean;
    function Table167VersionMake: Boolean;
    function Table168VersionMake: Boolean;
    function Table169VersionMake: Boolean;
    function Table170VersionMake: Boolean;
    function Table171VersionMake: Boolean;
    function Table172VersionMake: Boolean;
    function Table173VersionMake: Boolean;
    function Table174VersionMake: Boolean;
    function Table175VersionMake: Boolean;
    function Table176VersionMake: Boolean;
    function Table177VersionMake: Boolean;
    function Table178VersionMake: Boolean;
    function Table179VersionMake: Boolean;
    function Table180VersionMake: Boolean;
    function Table181VersionMake: Boolean;
    function Table182VersionMake: Boolean;
    function Table183VersionMake: Boolean;
    function Table184VersionMake: Boolean;
    function Table185VersionMake: Boolean;
  private
    function PositionNumberValueSetting:Boolean;
    function CheckPersonRelay : string;
    function CheckSamyuk : Boolean;
    function CheckFdms : Boolean;
    function NotGradePermitDelete:Boolean;
  public
    class Function GetObject:TDataBaseConfig;   //자기자신을 찾는것  class 는 폼생성전에도 사용가능
  Published
    { Published declarations }
    Property Cancel:Boolean read FCancel write SetCancel;
    Property DBConnected : Boolean read FDBConnected write SetDBConnected;
  end;

  TfmDataBaseConfig = class(TForm)
    rg_DBType: TRadioGroup;
    AdvPanel1: TAdvPanel;
    edPasswd: TEdit;
    edDataBaseName: TEdit;
    Label5: TLabel;
    Label4: TLabel;
    edUserid: TEdit;
    Label3: TLabel;
    Label2: TLabel;
    edServerPort: TEdit;
    edServerIP: TEdit;
    Label1: TLabel;
    btn_Save: TW7SpeedButton;
    btn_Close: TW7SpeedButton;
    procedure FormCreate(Sender: TObject);
    procedure btn_SaveClick(Sender: TObject);
    procedure btn_CloseClick(Sender: TObject);
    procedure rg_DBTypeClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fmDataBaseConfig: TfmDataBaseConfig;

implementation
uses
  uCommonFunction,
  uCommonVariable,
  uDataBase,
  uDBVariable,
  uDBCreate,
  uDBFunction;

{$R *.dfm}

{ TDataBaseConfig }

function TDataBaseConfig.CheckFdms: Boolean;
var
  stSql : string;
begin
  result := False;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''RELAY'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''fdmsUSE'' ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    Try
      if UpperCase(FindField('CO_CONFIGVALUE').AsString) = 'TRUE' then result := True;
    Except
      Exit;
    End;
  end;
end;

function TDataBaseConfig.CheckPersonRelay: string;
var
  stSql : string;
begin
  result := '0';
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''RELAY'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''PER_RELAY'' ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    Try
      result := FindField('CO_CONFIGVALUE').AsString;
    Except
      Exit;
    End;
  end;
end;

function TDataBaseConfig.CheckSamyuk: Boolean;
var
  stSql : string;
begin
  result := False;
  if CheckPersonRelay = '1' then result := True;  //삼육대연동이면 True

end;

function TDataBaseConfig.DataBaseConnect(aMessage: Boolean): Boolean;
var
  ini_fun : TiniFile;
  stDBHost : string;
  stDBPort : string;
  stDBUserID : string;
  stDBUserPw : string;
  stDBName : string;
  stConnectString : string;
  stConnectString1 : string;
  stDBType : string;
begin
  if DBConnected then Exit;
  result := False;
  CanCel := False;
  G_stExeFolder  := ExtractFileDir(Application.ExeName);
  Try
    ini_fun := TiniFile.Create(G_stExeFolder + '\Zmos.INI');

    stDBHost  := ini_fun.ReadString('DBConfig','Host','127.0.0.1');
    stDBPort := ini_fun.ReadString('DBConfig','Port','1433');
    stDBUserID := ini_fun.ReadString('DBConfig','UserID','sa');
    stDBUserPw := MimeDecodeString(ini_fun.ReadString('DBConfig','UserPW',''));  //saPasswd
    stDBName := lowerCase(ini_fun.ReadString('DBConfig','DBNAME',''));
    G_stGroupCode := ini_fun.ReadString('COMPANY','GROUPCODE','1234567890');
    stDBType := UpperCase(ini_fun.ReadString('DBConfig','TYPE','MSSQL'));

    if UpperCase(stDBType) = 'MSSQL' then G_nDBType := MSSQL
    else if UpperCase(stDBType) = 'PG' then G_nDBType := POSTGRESQL
    else if UpperCase(stDBType) = 'FB' then G_nDBType := FIREBIRD
    else if UpperCase(stDBType) = 'MDB' then G_nDBType := MDB;

    G_nBuildingCodeLength := ini_fun.ReadInteger('COMPANY','BUILDINGCODELENGTH',3);
    G_nMaxComPort := ini_fun.ReadInteger('RS232','MAXPORT',40);
    G_nCardRegisterPort := ini_fun.ReadInteger('FORM','CardRegisterPort',0);

    if G_nDBType = MSSQL then
    begin
      stConnectString := stConnectString + 'Provider=SQLOLEDB.1;';
      stConnectString := stConnectString + 'Password=' + stDBUserPw + ';';
      stConnectString := stConnectString + 'Persist Security Info=True;';
      stConnectString := stConnectString + 'User ID=' + stDBUserID + ';';
      stConnectString := stConnectString + 'Initial Catalog=' + stDBName + ';';
      stConnectString := stConnectString + 'Data Source=' + stDBHost  + ',' + stDBPort;
    end else if G_nDBType = POSTGRESQL then
    begin
      stConnectString := 'Provider=PostgreSQL OLE DB Provider;';
      stConnectString := stConnectString + 'Data Source=' + stDBHost + ';'   ;
      stConnectString := stConnectString + 'location=' + stDBName + ';';
      stConnectString := stConnectString + 'User Id='+ stDBUserID + ';';
      stConnectString := stConnectString + 'password=' + stDBUserPw;
    end else if G_nDBType = FIREBIRD then
    begin
      stConnectString := 'Provider=ZStyle IBOLE Provider;';
      stConnectString := stConnectString + 'Data Source=' + stDBHost + ':' + stDBName + ';';
      stConnectString := stConnectString + 'UID='+ stDBUserID + ';';
      stConnectString := stConnectString + 'Password=' + stDBUserPw + ';';
      stConnectString := stConnectString + 'DIALECT=3;';
      //IBOLE.dll 파일을 등록 할것
    end else //디폴트로 MDB로 인식하자
    begin
      stConnectString := 'Provider=Microsoft.Jet.OLEDB.4.0;';
      stConnectString := stConnectString + 'Data Source=' + G_stExeFolder + '\BMS.mdb' + ';';
      stConnectString := stConnectString + 'Persist Security Info=True;';
      stConnectString := stConnectString + 'Jet OLEDB:Database ';
    end;

    if G_nDBType <> MDB then
    begin
      stConnectString1 := stConnectString;
    end else
    begin
      //MDB 에서는 이벤트 DB 와 정보 DB를 구분하기 위함
      stConnectString1 := 'Provider=Microsoft.Jet.OLEDB.4.0;';
      stConnectString1 := stConnectString1 + 'Data Source=' + G_stExeFolder + '\BMS.mdb' + ';';
      stConnectString1 := stConnectString1 + 'Persist Security Info=True;';
      stConnectString1 := stConnectString1 + 'Jet OLEDB:Database ';
    end;

    with dmDataBase.ADOConnection do
    begin
      Connected := False;
      Try
        ConnectionString := stConnectString;
        LoginPrompt:= false ;
        Connected := True;
      Except
        on E : EDatabaseError do
          begin
            // ERROR MESSAGE-BOX DISPLAY
            if aMessage then
              ShowMessage(stConnectString + E.Message );
            Exit;
          end;
        else
          begin
            if aMessage then
              ShowMessage('데이터베이스 접속 에러' );
            Exit;
          end;
      End;
      CursorLocation := clUseServer;
      //CursorLocation := clUseClient;
    end;

    with dmDataBase.ADOEventConnection do
    begin
      Connected := False;
      Try
        ConnectionString := stConnectString1;
        LoginPrompt:= false ;
        Connected := True;
      Except
        on E : EDatabaseError do
          begin
            // ERROR MESSAGE-BOX DISPLAY
            if aMessage then
              ShowMessage(E.Message );
            Exit;
          end;
        else
          begin
            if aMessage then
              ShowMessage('데이터베이스 접속 에러' );
            Exit;
          end;
      End;
      CursorLocation := clUseServer;
      //CursorLocation := clUseClient;
    end;
    if Not TableVersionCheck then Exit;
    DBConnected := True;
    result := True;

    PatrolTableVersionCheck;
    SmallSetTableVersionCheck;
  Finally
    ini_fun.Free;
  End;

end;

class function TDataBaseConfig.FindSelf: TComponent;
var
  Loop:Integer;
begin
  Result:=Nil;
  for Loop:=0 to Application.ComponentCount-1 do begin
      if Application.Components[Loop] is TDataBaseConfig then begin
          Result:= Application.Components[Loop];
          Break;
      end;
  end;
end;

class function TDataBaseConfig.GetObject: TDataBaseConfig;
begin
   If FindSelf = Nil then TDataBaseConfig.Create(Application);
   Result := TDataBaseConfig(FindSelf);
end;

function TDataBaseConfig.GetPatrolTableVersion: integer;
var
  stSql : string;
begin
  result := 0;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''PATROL'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''TABLE_VER'' ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    Try
      result := strtoint(FindField('CO_CONFIGVALUE').AsString);
    Except
      Exit;
    End;
  end;
end;

function TDataBaseConfig.GetSmallSetTableVersion: integer;
var
  stSql : string;
begin
  result := 0;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''SMALLSET'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''TABLE_VER'' ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    Try
      result := strtoint(FindField('CO_CONFIGVALUE').AsString);
    Except
      Exit;
    End;
  end;
end;

function TDataBaseConfig.GetTableVersion: integer;
var
  stSql : string;
begin
  result := 0;
  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''COMMON'' ';
  stSql := stSql + ' AND CO_CONFIGCODE = ''TABLE_VER'' ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    Try
      result := strtoint(FindField('CO_CONFIGVALUE').AsString);
    Except
      Exit;
    End;
  end;
end;

function TDataBaseConfig.NotGradePermitDelete: Boolean;
var
  stSql :string;
begin
  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 = ''N'' ';
  stSql := stSql + ' AND DE_DOOR2 = ''N'' ';
  stSql := stSql + ' AND DE_USEALARM = ''N'' ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 is null ';
  stSql := stSql + ' AND DE_DOOR2 = ''N'' ';
  stSql := stSql + ' AND DE_USEALARM = ''N'' ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 is null ';
  stSql := stSql + ' AND DE_DOOR2 is null ';
  stSql := stSql + ' AND DE_USEALARM = ''N'' ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 is null ';
  stSql := stSql + ' AND DE_DOOR2 = ''N'' ';
  stSql := stSql + ' AND DE_USEALARM is null ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 is null ';
  stSql := stSql + ' AND DE_DOOR2 is null ';
  stSql := stSql + ' AND DE_USEALARM is null ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 = ''N'' ';
  stSql := stSql + ' AND DE_DOOR2 is null ';
  stSql := stSql + ' AND DE_USEALARM = ''N'' ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 = ''N'' ';
  stSql := stSql + ' AND DE_DOOR2 is null ';
  stSql := stSql + ' AND DE_USEALARM is null ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_DEVICECARDNO set DE_PERMIT = ''N'',DE_RCVACK = ''N'' ';
  stSql := stSql + ' Where DE_DOOR1 = ''N'' ';
  stSql := stSql + ' AND DE_DOOR2 = ''N'' ';
  stSql := stSql + ' AND DE_USEALARM is null ';
  stSql := stSql + ' AND DE_PERMIT = ''L'' ';
  result := dmDataBase.ProcessExecSQL(stSql);

end;

function TDataBaseConfig.PatrolTable001VersionMake: Boolean;
begin
  result := dmDBFunction.InsertIntoTB_CONFIG_All('PATROL','TABLE_VER','1');
end;

function TDataBaseConfig.PatrolTable002VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_READER_PatrolUse_Add;
  dmDBCreate.AlterTB_READER_PatrolName_Add;
  dmDBCreate.AlterTB_READER_PatrolTotWidth_Add;
  dmDBCreate.AlterTB_READER_PatrolTotHeight_Add;
  dmDBCreate.AlterTB_READER_PatrolCurX_Add;
  dmDBCreate.AlterTB_READER_PatrolCury_Add;
  dmDBCreate.CreateTB_PatrolTime;
  dmDBFunction.InsertIntoTB_PATROLTIME('1','순찰1','0000','2400');

  result := dmDBFunction.UpdateTB_CONFIG_Value('PATROL','TABLE_VER','2');
end;

function TDataBaseConfig.PatrolTable003VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_PATROLALARMEVENT;

  result := dmDBFunction.UpdateTB_CONFIG_Value('PATROL','TABLE_VER','3');
end;

function TDataBaseConfig.PatrolTable004VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CARDTYPE_Value('4','순찰카드');
  result := dmDBFunction.UpdateTB_CONFIG_Value('PATROL','TABLE_VER','4');
end;

function TDataBaseConfig.PatrolTable005VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_PATROLSTATE;

  result := dmDBFunction.UpdateTB_CONFIG_Value('PATROL','TABLE_VER','5');

end;

function TDataBaseConfig.PatrolTableVersionCheck: Boolean;
var
  nTableVersion : integer;
begin
  result := False;
  nTableVersion := GetPatrolTableVersion;
  if nTableVersion < 1 then PatrolTable001VersionMake;
  if nTableVersion < 2 then PatrolTable002VersionMake;
  if nTableVersion < 3 then PatrolTable003VersionMake;
  if nTableVersion < 4 then PatrolTable004VersionMake;
  if nTableVersion < 5 then PatrolTable005VersionMake;

  result := True;
end;

function TDataBaseConfig.PositionNumberValueSetting: Boolean;
var
  stSql : string;
  nPositionNumber : integer;
begin
  stSql := 'Select * from TB_CARD ';
  nPositionNumber := 1;

  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Clear;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    While Not Eof do
    begin
      dmDBFunction.UpdateTB_CARD_PoitionNum(FindField('CA_CARDNO').AsString,nPositionNumber);
      inc(nPositionNumber);
      Next;
    end;
  end;
end;

procedure TDataBaseConfig.SetCancel(const Value: Boolean);
begin
  FCancel := Value;
end;

procedure TDataBaseConfig.SetDBConnected(const Value: Boolean);
begin
  FDBConnected := Value;
end;

procedure TDataBaseConfig.ShowDataBaseConfig;
begin
  FDBConnected := False;

  fmDataBaseConfig:=TfmDataBaseConfig.Create(Nil);
  Try
    fmDataBaseConfig.ShowModal;
  Finally
    fmDataBaseConfig.Free;
  End;
end;

function TDataBaseConfig.SmallsetTable001VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('3MP','IP','220.90.216.90');
  dmDBFunction.InsertIntoTB_CONFIG_All('3MP','PORT','10020');
  dmDBFunction.InsertIntoTB_CONFIG_All('3MP','GATEWAYID','');
  dmDBFunction.InsertIntoTB_CONFIG_All('3MP','DEVICEID','');
  dmDBFunction.InsertIntoTB_CONFIG_All('3MP','DEVICEPW','');
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','DBTYPE','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','DBIP','127.0.0.1');
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','DBPORT','1433');
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','USERID','sa');
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','USERPW','sapasswd');
  result := dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','TABLE_VER','1');
end;

function TDataBaseConfig.SmallsetTable002VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('SMALLSET','DBNAME','zmos');
  result := dmDBFunction.UpdateTB_CONFIG_Value('SMALLSET','TABLE_VER','2');
end;

function TDataBaseConfig.SmallsetTable003VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ALARMEVENT_SmallSENDSTATUS_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_SmallSENDSTATUS_Add;
  dmDBCreate.CreateTB_SMALLSETMAPPING;

  stSql := ' Update TB_ACCESSEVENT set AC_SMSENDSTATUS = ''Y'' ';
  dmDataBase.ProcessEventExecSQL(stSql);

  stSql := ' Update TB_ALARMEVENT set AL_SMSENDSTATUS = ''Y'' ';
  dmDataBase.ProcessEventExecSQL(stSql);

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','A1','E400','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','A1','E400','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','C1','R400','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','C1','R400','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','A2','E610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','A2','E610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','A3','E610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','A3','E610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','A4','E610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','A4','E610','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','C2','R610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','C2','R610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','C3','R610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','C3','R610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','C4','R610','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','C4','R610','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','E1','E125','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','E1','E125','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','E1','E125','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','E1','E125','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','ZS','E130','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','ZS','E130','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','ZP','E130','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','ZP','E130','00','Y');
  (*
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','AF','EY08','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','AF','EY08','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','AF','EY08','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','AF','EY08','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','R1','EY09','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','R1','EY09','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','R2','EY09','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','R2','EY09','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','DL','EY14','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','DL','EY14','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','DL','EY14','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','DL','EY14','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','23','EY16','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','23','EY16','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','23','EY16','00','Y');

  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','LT','ELOP','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','LT','ELOP','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','LT','ELOP','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','LT','ELOP','00','Y');
  *)
  result := dmDBFunction.UpdateTB_CONFIG_Value('SMALLSET','TABLE_VER','3');
end;

function TDataBaseConfig.SmallsetTable004VersionMake: Boolean;
begin
  //DC 단선
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','DL','E302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','DL','E302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','DL','E302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','DL','E302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','DL','E302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','DL','E302','00','Y');
  //DC 복구
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','DR','R302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','DR','R302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','DR','R302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','DR','R302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','DR','R302','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','DR','R302','00','Y');
  //AC 단선
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','AF','E301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','AF','E301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','AF','E301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','AF','E301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','AF','E301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','AF','E301','00','Y');
  //AC 복구
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','AN','R301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','AN','R301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','AN','R301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','AN','R301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','AN','R301','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','AN','R301','00','Y');
  //전원리셋
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','R1','E305','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','R2','E305','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','R2','E305','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','R1','E305','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','R2','E305','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','R2','E305','00','Y');
  //카드리더 단선
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','A','31','E138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','D','31','E138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','N','31','E138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','A','NF','E138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','D','NF','E138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','N','NF','E138','00','Y');
  //카드리더 복구
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','A','32','R138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','D','32','R138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','N','32','R138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','A','NR','R138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','D','NR','R138','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('CD','N','NR','R138','00','Y');
  //프로그램댐퍼
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','EM','E306','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','EM','E306','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','EM','E306','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','EM','E306','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','EM','E306','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','EM','E306','00','Y');
  //가입자확장기 열림
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','CO','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','CO','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','CO','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','23','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','CO','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','CO','E137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','CO','E137','00','Y');
  //가입자확장기 닫힘
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','CC','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','CC','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','CC','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','24','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','CC','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','CC','R137','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','CC','R137','00','Y');
  //가입자확장기 단선
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','21','E701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','21','E701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','21','E701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','NF','E701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','NF','E701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','NF','E701','00','Y');
  //가입자확장기 복구
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','22','R701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','22','R701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','22','R701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','NR','R701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','NR','R701','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','NR','R701','00','Y');
  //TF단말확인
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','PF','E139','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','PF','E139','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','PF','E139','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','PF','E139','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','PF','E139','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','PF','E139','00','Y');
  //비상스위치발생
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','E1','E124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','E1','E124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','E1','E124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','E1','E124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','E1','E124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','E1','E124','00','Y');
  //비상스위치복구
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','A','E2','R124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','D','E2','R124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('MN','N','E2','R124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','A','E2','R124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','D','E2','R124','00','Y');
  dmDBFunction.InsertIntoTB_SMALLSETMAPPING_Value('EX','N','E2','R124','00','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('SMALLSET','TABLE_VER','4');
end;

function TDataBaseConfig.SmallSetTableVersionCheck: Boolean;
var
  nTableVersion : integer;
begin
  result := False;
  nTableVersion := GetSmallSetTableVersion;
  if nTableVersion < 1 then SmallSetTable001VersionMake;
  if nTableVersion < 2 then SmallSetTable002VersionMake;
  if nTableVersion < 3 then SmallSetTable003VersionMake;
  if nTableVersion < 4 then SmallSetTable004VersionMake;

  result := True;
end;

function TDataBaseConfig.Table001VersionMake: Boolean;
begin
  result := dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','TABLE_VER','1');
end;

function TDataBaseConfig.Table002VersionMake: Boolean;
begin
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','2');
end;

function TDataBaseConfig.Table003VersionMake: Boolean;
var
  stPath : string;
begin
  stPath := 'C:\Program Files\ACServer\ACCESS.mdb';
  if G_nDBTYPE = POSTGRESQL then stPath := 'C:\\Program Files\\ACServer\\ACCESS.mdb';
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','fdmsUSE','FALSE');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','fdmsPath',stPath);
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','fdmsPW','fdmsamho');
  dmDBCreate.AlterTB_EMPLOYEE_FDMSID_Add;
  dmDBCreate.AlterTB_EMPLOYEE_FDMSRELAY_Add;
  dmDBCreate.AlterTB_DOOR_FDMSID_Add;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','3');
end;

function TDataBaseConfig.Table004VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_FormName;
  dmDBFunction.InsertIntoTB_FORMNAME_Value('001','회사코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('002','회사명','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('011','지점코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('012','지점명','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('021','부서코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('022','부서명','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('031','직위코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('032','직위명','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('101','사번','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('102','이름','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('103','사내전화번호','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('104','입사일','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('105','퇴사일','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('106','사원','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','4');

end;

function TDataBaseConfig.Table005VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_ATINCODE_Value('101','정상출근','1','N');
  dmDBFunction.InsertIntoTB_ATINCODE_Value('102','외근후출근','1','N');
  dmDBFunction.InsertIntoTB_ATINCODE_Value('103','지각','2','N');
  dmDBFunction.InsertIntoTB_ATINCODE_Value('104','조기출근','4','N');
  dmDBFunction.InsertIntoTB_ATINCODE_Value('105','결근','3','N');
  dmDBFunction.InsertIntoTB_ATOUTCODE_Value('101','정상퇴근','1','N');
  dmDBFunction.InsertIntoTB_ATOUTCODE_Value('102','외근후퇴근','1','N');
  dmDBFunction.InsertIntoTB_ATOUTCODE_Value('103','조퇴','2','N');
  dmDBFunction.InsertIntoTB_ATOUTCODE_Value('104','연장근무','3','N');
  dmDBFunction.InsertIntoTB_ATOUTCODE_Value('105','야간근무','4','N');

  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOE02r','MOREPORT','경보이력보고서','Y','42','MONITORING','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','5');

end;

function TDataBaseConfig.Table006VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','LOGINTYPE','TRUE');
  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','ALARMVIEW','REAL');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','fdmsType','0');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','6');

end;

function TDataBaseConfig.Table007VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_ALARMSHOW;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','7');

end;

function TDataBaseConfig.Table008VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_EMPHIS;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','8');

end;

function TDataBaseConfig.Table009VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_SERVERCARDRELAY;
  dmDBCreate.CreateTB_SERVERCARDRELAYHIS;
  dmDBCreate.CreateTB_PERRELAYCONFIG;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','9');
end;

function TDataBaseConfig.Table010VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_DEVICECARDNOACKINDEX;
  dmDBCreate.AlterTB_EMPHIS_CARDNO_Add;
  dmDBCreate.AlterTB_EMPHIS_CARDTYPE_Add;
  dmDBCreate.AlterTB_EMPHIS_SENDSTATUS2_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','10');
end;

function TDataBaseConfig.Table011VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_WORKLOG;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','11');
end;

function TDataBaseConfig.Table012VersionMake: Boolean;
begin
  dmDBFunction.UpdateTB_CONFIG_Value('MOSTYPE','FOODDEVICE','DOOR');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','12');
end;

function TDataBaseConfig.Table013VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_CARD_POSITIONNUM_Add;

  PositionNumberValueSetting;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','13');
end;

function TDataBaseConfig.Table014VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('ATC04r','ATREPORT','실시간근태보고서','Y','23','ATTEND','Y');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','14');
end;

function TDataBaseConfig.Table015VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_READER_InOutCount_Add;
  dmDBCreate.CreateTB_INOUTCOUNT;
  dmDBCreate.CreateTB_INOUTGROUP;

  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','INOUTCOUNT','N');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','15');
end;

function TDataBaseConfig.Table016VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','DEVICESVER','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','DTOSPORT1','3000');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','DTOSPORT2','3001');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','DTOSPORT3','3002');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','16');

end;

function TDataBaseConfig.Table017VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_FTPLIST;
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','FTPPORT','3100');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','17');
end;

function TDataBaseConfig.Table018VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ALARMSTATUSCODE_ALARMSOUND_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','18');
end;

function TDataBaseConfig.Table019VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','SPECIALCD','0');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','19');
end;

function TDataBaseConfig.Table020VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_KTCARDISSUE;
  dmDBCreate.AlterTB_EMPHIS_INSERTTIME_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','20');
end;

function TDataBaseConfig.Table021VersionMake: Boolean;
begin
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','21');
end;

function TDataBaseConfig.Table022VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOB06i','MOMANAGE','KT카드발급','Y','11','MONITORING','Y');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','22');
end;

function TDataBaseConfig.Table023VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_RELAYGUBUN;
  dmDBCreate.AlterTB_EMPLOYEE_RelayGubun_Add;
  dmDBFunction.UpdateTB_EMPLOYEE_RGCODEisNull;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','23');

end;

function TDataBaseConfig.Table024VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_FORMNAME_Value('040','직원구분','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('041','직원코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('042','직원코드명칭','Y');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','24');

end;

function TDataBaseConfig.Table025VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_RELAYGUBUN_Value('001','정직원');
  dmDBFunction.InsertIntoTB_RELAYGUBUN_Value('002','외부인');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','25');
end;

function TDataBaseConfig.Table026VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_COMPANY_UPDATECHECK_Add;
  dmDBCreate.AlterTB_POSI_UPDATECHECK_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','26');

end;

function TDataBaseConfig.Table027VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ADMIN_BuildingGrade_Add;
  dmDBCreate.AlterTB_ADMIN_DongCode_Add;
  dmDBCreate.AlterTB_ADMIN_FloorCode_Add;
  dmDBCreate.AlterTB_ADMIN_AreaCode_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_DaemonGubun_Add;
  dmDBFunction.UpdateTB_ACCESSDEVICE_DaemonGubunAll('1');

  dmDBFunction.InsertIntoTB_FORMNAME_Value('901','빌딩코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('902','빌딩명칭','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('903','빌딩권한','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('911','층코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('912','층명칭','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('913','층권한','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('921','구역코드','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('922','구역명칭','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('923','구역권한','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('933','출입문권한','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','27');

end;

function TDataBaseConfig.Table028VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PROGRAMGROUP_Value('MODEVICE','관제-기기관리','Y','MONITORING');
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF00','MODEVICE','기기관리','D','50','MONITORING','Y');
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF01i','MODEVICE','위치정보관리','Y','51','MONITORING','Y');
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF02i','MODEVICE','컨트롤러관리','Y','52','MONITORING','Y');
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF03i','MODEVICE','출입문관리','Y','53','MONITORING','Y');
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF04i','MODEVICE','방범구역관리','Y','54','MONITORING','Y');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','28');
end;

function TDataBaseConfig.Table029VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','FTPUSE','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','MULTI','0');

  dmDBCreate.CreateTB_DAEMONMULTI;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','29');

end;

function TDataBaseConfig.Table030VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_CARD_DoorGrade_Add;
  dmDBFunction.UpdateTB_CARD_DOORGRADEInitialize('Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','30');
end;

function TDataBaseConfig.Table031VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOF05i','MODEVICE','출입문스케줄관리','Y','55','MONITORING','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','31');
end;

function TDataBaseConfig.Table032VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_DOORGUBUN;
  dmDBCreate.AlterTB_DOOR_DOGUBUN_Add;

  dmDBFunction.InsertIntoTB_DOORGUBUN_Value('001','구분1');
  dmDBFunction.InsertIntoTB_DOORGUBUN_Value('002','구분2');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','32');

end;

function TDataBaseConfig.Table033VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PROGRAMID_Value('MOE04r','MOREPORT','출입통계보고서','Y','44','MONITORING','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','33');
end;

function TDataBaseConfig.Table034VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','KHUADDDAY','','경희대입력연동날짜');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','KHUDELDAY','','경희대삭제연동날짜');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','34');
end;

function TDataBaseConfig.Table035VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','MAXPROCESS','10');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','35');
end;

function TDataBaseConfig.Table036VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSNO','4');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','36');
end;

function TDataBaseConfig.Table037VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_EMPHIS_EMNAME_Add;
  dmDBCreate.AlterTB_EMPHIS_HANDPHONE_Add;
  dmDBCreate.AlterTB_EMPHIS_COMPANYNAME_Add;
  dmDBCreate.AlterTB_EMPHIS_JIJUMNAME_Add;
  dmDBCreate.AlterTB_EMPHIS_DEPARTNAME_Add;
  dmDBCreate.AlterTB_EMPHIS_POSINAME_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','37');
end;

function TDataBaseConfig.Table038VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','CARDADDDAY','','경희대카드연동날짜');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','CARDDELDAY','','경희대카드삭제연동날짜');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','38');
end;

function TDataBaseConfig.Table039VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('F','유효기간만료');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','39');
end;

function TDataBaseConfig.Table040VersionMake: Boolean;
var
  stCardLen : string;
begin
  stCardLen := '24'; //성현지문카드길이

  if CheckPersonRelay = '3' then stCardLen := '32'; //경희대 성현지문카드길이 = 32자리

  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSCARDLN',stCardLen,'성현지문카드길이');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','40');
end;

function TDataBaseConfig.Table041VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('CARD','CARDFIXED','FALSE','카드길이고정유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('CARD','FIXEDLEN','11','카드길이');
  dmDBFunction.InsertIntoTB_CONFIG_All('CARD','FILLPOSI','0','채움문자위치 0:앞,1:뒤');
  dmDBFunction.InsertIntoTB_CONFIG_All('CARD','FILLCHAR','0','채움문자');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','41');
end;

function TDataBaseConfig.Table042VersionMake: Boolean;
var
  stCode1Name,stCode2Name : string;
begin
  dmDBCreate.CreateTB_CARDTYPE;

  stCode1Name := '일반카드';
  stCode2Name := '기타카드';
  if CheckSamyuk then  //삼육대인경우
  begin
    stCode1Name := '일반카드';
    stCode2Name := '모바일카드';
  end else if CheckFdms then  //지문연동인 경우
  begin
    stCode1Name := '지문연동카드';
    stCode2Name := '일반카드';
  end;

  dmDBFunction.InsertIntoTB_CARDTYPE_Value('1',stCode1Name);
  dmDBFunction.InsertIntoTB_CARDTYPE_Value('2',stCode2Name);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','42');
end;

function TDataBaseConfig.Table043VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('FIREORIGIN','FALSE');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','43');
end;

function TDataBaseConfig.Table044VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_HOLIDAY_State_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','44');
end;

function TDataBaseConfig.Table045VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_HoSend_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','45');

end;

function TDataBaseConfig.Table046VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('SEND_HOYY','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','46');

end;

function TDataBaseConfig.Table047VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('FI','FI 화재알람','1','3','1');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','47');
end;

function TDataBaseConfig.Table048VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('R1','RESET(경계모드)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('R2','RESET(해제모드)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('A1','경계모드변경(카드)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('A2','경계모드변경(관제)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('A3','경계모드변경(연동)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('A4','경계모드변경(서버)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('C1','해제모드변경(카드)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('C2','해제모드변경(관제)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('C3','해제모드변경(연동)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('C4','해제모드변경(서버)','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('R3','복구버튼','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('ZS','알람발생(쇼트)','1','3','1');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('ZP','알람발생(단선)','1','3','1');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('ZN','알람복구','1','0','0');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','48');

end;

function TDataBaseConfig.Table049VersionMake: Boolean;
begin
  //tb_employee 이름 사이즈 변경
  dmDBCreate.AlterTB_EMPLOYEE_EmName_Change;
  //알람상태코드 사이즈 변경
  dmDBCreate.AlterTB_ALARMSTATUSCODE_Code_Change;
  //알람 이벤트 상태코드 사이즈 변경
  dmDBCreate.AlterTB_ALARMEVENT_Code_Change;
  //알람 이벤트 oper 사이즈 변경
  dmDBCreate.AlterTB_ALARMEVENT_Oper_Change;
  //알람 이벤트 재정의 상태코드 생성
  dmDBCreate.AlterTB_ALARMEVENT_STATECODE2_Add;
  //알람상태 그룹 테이블 생성
  dmDBCreate.CreateTB_ALARMCODEGROUP;
  //알람 모드변경 제외 그룹 테이블 생성
  dmDBCreate.CreateTB_ALARMMODENOTCARD;
  //알람 모드변경 제외 데이터 인서트
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('001','***RESET**');
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('002','.KTLinkUs.');
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('003','ForceRelay');
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('004','0000000000');
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('005','RecoveryOK');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('ET','기타','0','0','0');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','49');

end;

function TDataBaseConfig.Table050VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','DAEMON_VER','0','데몬버젼');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','50');
end;

function TDataBaseConfig.Table051VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_NOTCARDALARMCODE;

  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('RESET','R1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('RESET','R2');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('RESET','WR');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('RESET','CR');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','A1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','A2');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','A3');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','A4');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','C1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','C2');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','C3');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('모드변경','C4');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','ZS');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','ZP');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','ZN');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','E1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','F1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','FI');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','G1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Alarm','Q1');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','NF');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','NR');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('AC전원','AF');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('AC전원','AN');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Data','BF');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','CC');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','CO');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('밧데리','DF');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('밧데리','DL');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('밧데리','DR');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기타','ET');

  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('001','a','R1');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('001','d','R2');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('002','a','A2');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('002','d','C2');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('003','a','A3');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('003','d','C3');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('004','a','A4');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('004','d','C4');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('005','a','R3');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('005','d','R3');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','51');
end;

function TDataBaseConfig.Table052VersionMake: Boolean;
begin
  //카드발급테이블에 여기서 발급했는지 여부
  dmDBCreate.AlterTB_KTCARDISSUE_Write_Add;

  //카드발급테이블에 발급일자
  dmDBCreate.AlterTB_KTCARDISSUE_WriteDate_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_COMPANYCODE_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_EMCODE_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_JIJUMCODE_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_DEPARTCODE_Add;
  dmDBCreate.AlterTB_ACCESSEVENT_EMNAME_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','52');
end;

function TDataBaseConfig.Table053VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','EMPLOYEE','0','0:사원별,1:카드별');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','53');
end;

function TDataBaseConfig.Table054VersionMake: Boolean;
begin

  dmDBCreate.CreateTB_MAPLOCATION;
  dmDBCreate.CreateTB_MAPPOSITION;
  dmDBCreate.CreateTB_MAPZONE;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','54');

end;

function TDataBaseConfig.Table055VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_UPDATE_Add;
  dmDBCreate.AlterTB_DOOR_UPDATE_Add;
  dmDBCreate.AlterTB_ALARMDEVICE_UPDATE_Add;
  dmDBCreate.AlterTB_ZONEDEVICE_UPDATE_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','55');

end;

function TDataBaseConfig.Table056VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_FTPLIST_RetryCount_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','56');

end;

function TDataBaseConfig.Table057VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_DOOR_OPENMONI_Add;
  dmDBCreate.AlterTB_DOOR_SENDDOOR_Add;
  dmDBCreate.AlterTB_DOOR_ALARMLONG_Add;
  dmDBCreate.AlterTB_DOOR_DSOPEN_Add;
  dmDBCreate.AlterTB_DOOR_REMOTEDOOR_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','57');

end;

function TDataBaseConfig.Table058VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','ATTYPE1','0','1:전사원정상출퇴근고정'); //전사원 교대타입에 따른 출퇴근처리
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','58');
end;

function TDataBaseConfig.Table059VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_DOOR_ControlTime_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','59');
end;

function TDataBaseConfig.Table060VersionMake: Boolean;
begin
  dmDBFunction.UpdateTB_FTPLIST_RETRYCOUNTInitialize;
  dmDBFunction.UpdateTB_ACCESSDEVICE_SENDACKAll('Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','60');

end;

function TDataBaseConfig.Table061VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','cardServer','0','카드서버연동유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','PER_RELAY','0','사원정보연동유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','PER_SRELAY','0','보내는사원정보연동유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','SENT_RELAY','0','전문연동유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','CARDNOTYPE','0','카드번호Type(고정/가변)');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','CARDNUM','0','카드숫자인식Type');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','CAPOSINUM','0','카드위치사용유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','DUPCARD','0','1인당카드중복여부');
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','FIRERECUSE','1','화재복구사용유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','FIREOPEN','0','화재감지시전체개방');
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','FIRESTATUS','FI','화재감지시상태값');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','ACEVENT','1','0.전체이력,1.카드이벤트만');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CONTRLPORT','10001','제어포트');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','STATEPORT','10011','상태포트');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','EVENTPORT','10021','이벤트포트');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','MULTISOCK','0','멀티소켓');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','61');

end;

function TDataBaseConfig.Table062VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ALARMEVENT_AlarmSound_Add;
  dmDBCreate.AlterTB_ALARMEVENT_AlarmGRADE_Add;
  dmDBCreate.AlterTB_ALARMEVENT_CheckUser_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','62');

end;

function TDataBaseConfig.Table063VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','USEARMLEN','FALSE');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','ALARMLEN','10');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','63');

end;

function TDataBaseConfig.Table064VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSEVENT_EMCODE_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','64');

end;

function TDataBaseConfig.Table065VersionMake: Boolean;
var
  stSql : string;
begin
  G_nDaemonServerVersion := dmDBFunction.GetDaemonVersion;
  if (G_nDaemonServerVersion > 0) and (G_nDaemonServerVersion < 4) then
  begin
    dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','SCHASYNC','0');
  end else
  begin
    dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','SCHASYNC','1');
  end;

  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','SCHDEVICE','0');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','65');

end;

function TDataBaseConfig.Table066VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','COMMLOG','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CARDLOG','0');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','66');

end;

function TDataBaseConfig.Table067VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_DeviceCode_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_RegSend_Add;
  dmDBCreate.AlterTB_ALARMDEVICE_RegSend_Add;
  dmDBCreate.AlterTB_DOOR_RegSend_Add;
  dmDBCreate.AlterTB_READER_DoorPosi_Add;
  dmDBCreate.AlterTB_READER_BuildPosi_Add;
  dmDBCreate.AlterTB_READER_RegSend_Add;
  dmDBCreate.AlterTB_ZONEDEVICE_DelayUse_Add;
  dmDBCreate.AlterTB_ZONEDEVICE_PortRecovery_Add;
  dmDBCreate.AlterTB_ZONEDEVICE_RegSend_Add;

  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('REGPW',MimeEncodeString('1234'));


  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','67');

end;

function TDataBaseConfig.Table068VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ALARMEVENT_Cardno_Add;
  dmDBCreate.AlterTB_ALARMDEVICE_TelNo_Add;
  dmDBCreate.AlterTB_ALARMDEVICE_memo_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','68');
end;

function TDataBaseConfig.Table069VersionMake: Boolean;
begin

  dmDBCreate.AlterTB_ACCESSDEVICE_LinkusSystemID_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_LinkusTelNo_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_ArmControlRing_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_DisArmControlRing_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_DeviceType_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_PowerType_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_OutDelay_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_InDelay_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_Jaejung_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_Door1Type_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_Door2Type_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_ReaderType_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','69');

end;

function TDataBaseConfig.Table070VersionMake: Boolean;
var
  stSql : string;
begin
  stSql := 'update TB_DOOR set DO_UPDATE = ''Y'' ';
  dmDataBase.ProcessExecSQL(stSql);

  stSql := 'update TB_ALARMDEVICE set AL_UPDATE = ''Y'' ';
  dmDataBase.ProcessExecSQL(stSql);

  stSql := 'update TB_ACCESSDEVICE set AC_PTTYPE = ''1'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','70');
end;

function TDataBaseConfig.Table071VersionMake: Boolean;
begin

  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('DEVICESORT','00000000');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','71');

end;

function TDataBaseConfig.Table072VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_READER_ReaderVer_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','72');

end;

function TDataBaseConfig.Table073VersionMake: Boolean;
begin

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','73');

end;

function TDataBaseConfig.Table074VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','fdmsEMCODE','FALSE'); //RUC 센터 때문에 추가 했는데... RUC 특화로 사용 안함
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','74');
end;

function TDataBaseConfig.Table075VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_DEVICESETTINGINFO;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','75');

end;

function TDataBaseConfig.Table076VersionMake: Boolean;
begin

  dmDBFunction.InsertIntoTB_PERRELAYCONFIG_Value('GETDATETIME','00000000000000','최종가져온시간');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','76');
end;

function TDataBaseConfig.Table077VersionMake: Boolean;
begin
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','77');

end;

function TDataBaseConfig.Table078VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','PCSERVERTM','1','PCServerDelayTime');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','78');

end;

function TDataBaseConfig.Table079VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','C_INTERVAL','5','ClientSendInterval(ms)');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','79');
end;

function TDataBaseConfig.Table080VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','INOUTTYPE','0','외출-0:사용안함,1:리더,2:버튼');
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','STARTWKNO','1','출근리더(버튼)번호');
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','OFFWKNO','2','퇴근리더(버튼)번호');
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','WKOUTNO','3','외출리더(버튼)번호');
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','WKINNO','4','복귀리더(버튼)번호');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','80');

end;

function TDataBaseConfig.Table081VersionMake: Boolean;
var
  stSql : string;
begin
  stSql := 'Delete From TB_ALARMSTATUSCODE ';
  stSql := stSql + ' Where AL_ALARMSTATUSCODE = ''F1'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','81');

end;

function TDataBaseConfig.Table082VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','ATPRSERVER','FALSE','근태전용서버');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','82');

end;

function TDataBaseConfig.Table083VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDBTYPE','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDBIP','127.0.0.1');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDBPORT','1433');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSUSER','sa');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDBNAME','sh_fpsystem');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','83');
end;

function TDataBaseConfig.Table084VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_ALARMGUBUNCODE;

  dmDBFunction.InsertIntoTB_ALARMGUBUNCODE_Value('001','구분1');
  dmDBFunction.InsertIntoTB_ALARMGUBUNCODE_Value('002','구분2');

  dmDBCreate.AlterTB_ALARMDEVICE_ARMGUBUN_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','84');
end;

function TDataBaseConfig.Table085VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTSUSES','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTSIP','121.170.197.175');
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTSPORT','7001');
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTCPORT','4101');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','85');

end;

function TDataBaseConfig.Table086VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.InsertIntoTB_ALARMMODENOTCARD_Value('006','CtrlCenter');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('006','a','R3');
  dmDBFunction.InsertIntoTB_NOTCARDALARMCODE_Value('006','d','R3');

  stSql := ' Update TB_ALARMEVENT set al_operator = ''CtrlCenter'' ';
  if G_nDBTYPE = PostGresql then stSql := stsql + ' Where substr(al_operator,1,10) = ''.KTLinkUs.'' '
  else if G_nDBTYPE = MSSQL then stSql := stsql + ' Where substring(al_operator,1,10) = ''.KTLinkUs.'' '
  else Exit;
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','86');

end;

function TDataBaseConfig.Table087VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CLIENTSEQ','N');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CLIENTTIME','5');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','87');

end;

function TDataBaseConfig.Table088VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSNOAUTO','Y','지문번호자동생성유무');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','88');
end;

function TDataBaseConfig.Table089VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_CONFIG_Value_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','89');

end;

function TDataBaseConfig.Table090VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('3','방범경계승인');
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('4','방범해제승인');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','90');
end;

function TDataBaseConfig.Table091VersionMake: Boolean;
var
  stSql : string;
begin
  //기기 테이블에 MUXID 추가
  dmDBCreate.AlterTB_ACCESSDEVICE_MuxID_Add;

  stSql := 'Update TB_ACCESSDEVICE set AC_MUXID = ''00'' ';
  dmDataBase.ProcessExecSQL(stSql);

  //기기 테이블에 데코더아이디 추가
  dmDBCreate.AlterTB_ACCESSDEVICE_DecoderID_Add;

  stSql := 'Update TB_ACCESSDEVICE set AC_DECODERID = ''KTT00'' ';
  dmDataBase.ProcessExecSQL(stSql);

  //알람 이벤트신호 Count
  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('KTALARMSEQ','0');

  //PAM Cycle Time - Pre Alive Manager  회선체크
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTPCYCLE','30');

  //관제이벤트 매핑 코드 테이블 생성
  dmDBCreate.CreateTB_KTTMAPPINGCODE;

  //가입자확장기 단선
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','21','11','E701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','21','11','E701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','21','11','E701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','NF','11','E701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','NF','11','E701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','NF','11','E701');
  //가입자확장기 복구
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','22','11','R701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','22','11','R701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','22','11','R701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','NR','11','R701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','NR','11','R701');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','NR','11','R701');
  //가입자확장기 열림
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','CO','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','CO','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','CO','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','23','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','CO','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','CO','11','E137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','CO','11','E137');
  //가입자확장기 닫힘
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','CC','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','CC','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','CC','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','24','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','CC','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','CC','11','R137');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','CC','11','R137');
  //카드리더 단선
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','31','11','E138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','31','11','E138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','31','11','E138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','NF','11','E138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','NF','11','E138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','NF','11','E138');
  //카드리더 복구
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','32','11','R138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','32','11','R138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','32','11','R138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','NR','11','R138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','NR','11','R138');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','NR','11','R138');
  //카드리더 열림
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','33','11','E136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','33','11','E136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','33','11','E136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','CO','11','E136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','CO','11','E136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','CO','11','E136');
  //카드리더 닫힘
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','34','11','R136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','34','11','R136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','34','11','R136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','A','CC','11','R136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','D','CC','11','R136');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('CD','N','CC','11','R136');
  //AC 단선
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','AF','11','E301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','AF','11','E301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','AF','11','E301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','AF','11','E301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','AF','11','E301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','AF','11','E301');
  //AC 복구
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','AN','11','R301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','AN','11','R301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','AN','11','R301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','AN','11','R301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','AN','11','R301');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','AN','11','R301');
  //카드경계모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','A1','11','E400');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','A1','11','E400');
  //카드해제모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','C1','11','R400');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','C1','11','R400');
  //강제경계모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','A3','11','E300');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','A3','11','E300');
  //강제해제모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','C3','11','R300');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','C3','11','R300');
  //PC경계모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','A4','11','E620');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','A4','11','E620');
  //PC해제모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','C4','11','R620');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','C4','11','R620');
  //관제경계모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','A2','11','E610');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','A2','11','E610');
  //관제해제모드변경
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','C2','11','R610');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','C2','11','R610');
  //전원리셋
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','R1','01','E305');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','R2','01','E305');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','R2','01','E305');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','R1','01','E305');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','R2','01','E305');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','R2','01','E305');
  //국선체크
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','PC','11','E600');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','PC','11','E600');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','PC','11','E600');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','PC','11','E600');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','PC','11','E600');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','PC','11','E600');
  //프로그램댐퍼
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','EM','11','E306');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','EM','11','E306');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','EM','11','E306');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','EM','11','E306');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','EM','11','E306');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','EM','11','E306');
  //TF단말확인
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','PF','11','E139');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','PF','11','E139');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','PF','11','E139');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','PF','11','E139');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','PF','11','E139');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','PF','11','E139');
  //DC 단선
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','DL','11','E302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','DL','11','E302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','DL','11','E302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','DL','11','E302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','DL','11','E302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','DL','11','E302');
  //DC 복구
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','DR','11','R302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','DR','11','R302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','N','DR','11','R302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','DR','11','R302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','DR','11','R302');
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','N','DR','11','R302');
  //침입
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','ZP','11','E130');  //오픈
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','ZS','11','E130');  //쇼트
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','ZP','11','E130');  //오픈
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','ZS','11','E130');  //쇼트
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','FI','11','E130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','E1','11','E130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','G1','11','E130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','Q1','11','E130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','FI','11','E130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','E1','11','E130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','G1','11','E130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','Q1','11','E130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','ZP','11','E130');  //오픈
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','ZS','11','E130');  //쇼트
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','ZP','11','E130');  //오픈
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','ZS','11','E130');  //쇼트
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','FI','11','E130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','E1','11','E130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','G1','11','E130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','Q1','11','E130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','FI','11','E130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','E1','11','E130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','G1','11','E130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','Q1','11','E130');  //설비
  //침입복구
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','ZN','11','R130');  //정상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','ZN','11','R130');  //정상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','F2','11','R130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','E2','11','R130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','G2','11','R130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','A','Q2','11','R130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','F2','11','R130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','E2','11','R130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','G2','11','R130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('MN','D','Q2','11','R130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','ZN','11','R130');  //정상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','ZN','11','R130');  //정상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','F2','11','R130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','E2','11','R130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','G2','11','R130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','A','Q2','11','R130');  //설비
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','F2','11','R130');  //화재
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','E2','11','R130');  //비상
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','G2','11','R130');  //가스
  dmDBFunction.InsertIntoTB_KTTMAPPINGCODE_Value('EX','D','Q2','11','R130');  //설비

  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('21','가입자확장기단선','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('22','가입자확장기복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('31','카드리더단선','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('32','카드리더복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('41','감지기확장기단선','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('42','감지기확장기복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('23','기계열림','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('24','기계닫힘','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('33','카드리더열림','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('34','카드리더닫힘','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('43','감지기확장기열림','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('44','감지기확장기닫힘','0','0','0');

  stSql := 'Update TB_ALARMSTATUSCODE set AL_ALARMNAME = ''화재알람'' where AL_ALARMSTATUSCODE = ''FI'' ';
  dmDataBase.ProcessExecSQL(stSql);
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('F2','화재존복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('E2','비상존복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('G2','가스존복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('Q2','설비존복구','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('EM','프로그램댐퍼','0','0','0');
  dmDBFunction.InsertIntoTB_ALARMSTATUSCODE_Value('PF','TF단말확인','0','0','0');

  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','21');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','22');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','31');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','32');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','41');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('Network','42');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','23');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','24');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','33');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','34');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','43');
  dmDBFunction.InsertIntoTB_ALARMCODEGROUP_Value('기기관련','44');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','91');
end;

function TDataBaseConfig.Table092VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','DDNSUSES','0');
  //DDNS Server IP
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','DDNS_SIP','121.170.197.180');
  //DDNS Server PORT
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','DDNS_SPORT','9300');
  //DDNS Query Server IP
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','DDNS_QIP','121.170.197.180');
  //DDNS Query Server PORT
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','DDNS_QPORT','9301');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','92');

end;

function TDataBaseConfig.Table093VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','RELAYUSE','0');
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','RELAYNO','6');
  dmDBFunction.InsertIntoTB_CONFIG_All('FIRE','RELAYTIME','2');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','93');
end;

function TDataBaseConfig.Table094VersionMake: Boolean;
begin
  //TB_ALARMDEVIC 이름 사이즈 변경
  dmDBCreate.AlterTB_ALARMDEVICE_Name_Change;
  //TB_ACCESSDEVIC 이름 사이즈 변경
  dmDBCreate.AlterTB_ACCESSDEVICE_Name_Change;
  //TB_DOOR 이름 사이즈 변경
  dmDBCreate.AlterTB_DOOR_Name_Change;
  //TB_FOOD 이름 사이즈 변경
  dmDBCreate.AlterTB_FOOD_Name_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','94');

end;

function TDataBaseConfig.Table095VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('FOOD','DUPEVENT','0');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','95');

end;

function TDataBaseConfig.Table096VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_RELAYUNIVERCITY;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','96');
end;

function TDataBaseConfig.Table097VersionMake: Boolean;
begin
  NotGradePermitDelete;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','97');
end;

function TDataBaseConfig.Table098VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_KTTMAPPINGCODE_SendUse_Add;

  stSql := ' update TB_KTTMAPPINGCODE set senduse = ''Y'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','98');

end;

function TDataBaseConfig.Table099VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','DELCARDUSE','N');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','DCARDSTART','11');
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','DELCARDLEN','3');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','99');
end;

function TDataBaseConfig.Table100VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_ATWORKTYPE;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','100');
end;

function TDataBaseConfig.Table101VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ZONEDEVICE_Name_Change;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','101');
end;

function TDataBaseConfig.Table102VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','AUTOFCARD','N');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','102');
end;

function TDataBaseConfig.Table103VersionMake: Boolean;
var
  stSql : string;
  stTemp : string;
  stAW_YESTERDAYTIME : string; //어제 날짜 기준 시간
  stAW_SATURDAYTYPE : string; //토요일근무타입 0:공휴일,1:반휴일,2:평일
  stAW_DEVICETYPE : string; //0:업데이트,1:카드리더,2:버튼방식
  stAW_FIXATTYPE : string; //0:정상,1:전직원 정상 출퇴근
  stAW_NOTBACKUPTYPE : string; //0:미복귀시조퇴처리,1:미복귀시정상퇴근
  stAW_ATSTARTBUTTON : string; //출근조작버튼
  stAW_ATOFFBUTTON : string; //퇴근조작버튼
  stAW_INOUTDEVICETYPE : string; //외출-0:사용안함,1:리더,2:버튼
  stAW_WORKOUTBUTTON : string; //외출조작버튼
  stAW_WORKINBUTTON : string; //복귀조작버튼
begin
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','103');

  stSql := 'select * from TB_CONFIG ';
  stSql := stSql + ' where CO_CONFIGGROUP = ''ATTEND'' ';

  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;

    While Not Eof do
    begin
      if FindField('CO_CONFIGCODE').AsString = 'ATTYPE1' then stAW_FIXATTYPE := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'DEVICETYPE' then stAW_DEVICETYPE := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'INOUTTYPE' then stAW_INOUTDEVICETYPE := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'OFFWKNO' then stAW_ATOFFBUTTON := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'OUTTIME' then stAW_NOTBACKUPTYPE := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'SATURDAY' then stAW_SATURDAYTYPE := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'STARTWKNO' then stAW_ATSTARTBUTTON := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'WKINNO' then stAW_WORKINBUTTON := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'WKOUTNO' then stAW_WORKOUTBUTTON := FindField('CO_CONFIGVALUE').AsString
      else if FindField('CO_CONFIGCODE').AsString = 'YTIME' then stAW_YESTERDAYTIME := FindField('CO_CONFIGVALUE').AsString ;

      Next;
    end;
    stTemp := 'Insert Into TB_ATWORKTYPE(';
    stTemp := stTemp + 'AW_CODE,';
    stTemp := stTemp + 'AW_NAME,';
    stTemp := stTemp + 'AW_YESTERDAYTIME,';
    stTemp := stTemp + 'AW_SATURDAYTYPE,';
    stTemp := stTemp + 'AW_DEVICETYPE,';
    stTemp := stTemp + 'AW_FIXATTYPE,';
    stTemp := stTemp + 'AW_NOTBACKUPTYPE,';
    stTemp := stTemp + 'AW_ATSTARTBUTTON,';
    stTemp := stTemp + 'AW_ATOFFBUTTON,';
    stTemp := stTemp + 'AW_INOUTDEVICETYPE,';
    stTemp := stTemp + 'AW_WORKOUTBUTTON,';
    stTemp := stTemp + 'AW_WORKINBUTTON) ';
    stTemp := stTemp + ' Values( ';
    stTemp := stTemp + '''001'',';
    stTemp := stTemp + '''상시근무자'',';
    stTemp := stTemp + '''' + stAW_YESTERDAYTIME + ''',';
    stTemp := stTemp + '''' + stAW_SATURDAYTYPE + ''',';
    stTemp := stTemp + '''' + stAW_DEVICETYPE + ''',';
    stTemp := stTemp + '''' + stAW_FIXATTYPE + ''',';
    stTemp := stTemp + '''' + stAW_NOTBACKUPTYPE + ''',';
    stTemp := stTemp + '''' + stAW_ATSTARTBUTTON + ''',';
    stTemp := stTemp + '''' + stAW_ATOFFBUTTON + ''',';
    stTemp := stTemp + '''' + stAW_INOUTDEVICETYPE + ''',';
    stTemp := stTemp + '''' + stAW_WORKOUTBUTTON + ''',';
    stTemp := stTemp + '''' + stAW_WORKINBUTTON + ''') ';

    dmDataBase.ProcessExecSQL(stTemp);
  end;
end;

function TDataBaseConfig.Table104VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ATCODE_AWCODE_Add;

  stSql := 'Update TB_ATCODE set AW_CODE = ''001'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','104');
end;

function TDataBaseConfig.Table105VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_EMPLOYEE_AWCODE_Add;

  stSql := 'Update TB_EMPLOYEE set AW_CODE = ''001'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','105');

end;

function TDataBaseConfig.Table106VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ALARMSTATUSCODE_Gubun_Add;
  dmDBCreate.AlterTB_ALARMSTATUSCODEColor_Add;

  stSql := ' Update TB_ALARMSTATUSCODE set AL_COLOR = 255 ';
  dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_ALARMSTATUSCODE set AL_GUBUN = ''001'' ';
  stSql := stSql + ' Where AL_ALARMSTATUSCODE = ''00'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''AF'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''AN'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''BF'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''CC'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''CO'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''CR'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''DF'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''DL'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''DR'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''E1'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''EM'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''FI'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''G1'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''NF'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''NR'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''PF'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''Q1'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S1'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S2'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S3'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S4'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S5'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S6'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S7'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''S8'' ';
  stSql := stSql + ' OR AL_ALARMSTATUSCODE = ''WR'' ';
  dmDataBase.ProcessExecSQL(stSql);

  stSql := ' Update TB_ALARMSTATUSCODE set AL_GUBUN = ''002'' ';
  stSql := stSql + ' Where AL_GUBUN IS NULL ';
  dmDataBase.ProcessExecSQL(stSql);


  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','106');
end;

function TDataBaseConfig.Table107VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CURRENTDAEMON_Value('FDMSCARD','30');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','107');
end;

function TDataBaseConfig.Table108VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.CreateTB_FIREGUBUN;
  dmDBFunction.InsertIntoTB_FIREGUBUN_Value('001','전체');
  dmDBCreate.CreateTB_FIREGROUP;

  stSql := ' Insert into TB_FIREGROUP select ''1234567890'',AC_NODENO,''001'' from TB_ACCESSDEVICE where AC_ECUID = ''00'' ';
  dmDataBase.ProcessExecSQL(stSql);


  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','108');

end;

function TDataBaseConfig.Table109VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ATCODE_ATOUTRANGE_Add;
  dmDBCreate.AlterTB_ATCODE_ATSOUTRANGE_Add;
  dmDBCreate.AlterTB_ATCODE_ATHOUTRANGE_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','109');
end;

function TDataBaseConfig.Table110VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_ATLISTEVENT;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','110');

end;

function TDataBaseConfig.Table111VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_CLIENTSOCK;

  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CSOCKTYPE','0');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','111');
end;

function TDataBaseConfig.Table112VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_JAVARATYPE_Add;

  stSql := 'Update TB_ACCESSDEVICE set AC_JAVARATYPE = ''0'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','112');
end;

function TDataBaseConfig.Table113VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.UpdateTB_NOTCARDALARMCODE_Statuscode2('006','a','A2');
  dmDBFunction.UpdateTB_NOTCARDALARMCODE_Statuscode2('006','d','C2');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','113');
end;

function TDataBaseConfig.Table114VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_JAVARASCHEDULE;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','114');
end;

function TDataBaseConfig.Table115VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_CARDTYPE_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','115');
end;

function TDataBaseConfig.Table116VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_EMPLOYEE_COPHONE_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','116');
end;

function TDataBaseConfig.Table117VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','LONGTIMECD','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','117');
end;

function TDataBaseConfig.Table118VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_INOUTREADERGROUP;
  dmDBCreate.AlterTB_READER_INOUTGROUPCODE_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','118');
end;

function TDataBaseConfig.Table119VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_INOUTGROUPLIST;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','119');
end;

function TDataBaseConfig.Table120VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_INOUTGROUPLIST_NodeNo_Add;
  dmDBCreate.AlterTB_INOUTGROUPLIST_EcuID_Add;
  dmDBCreate.AlterTB_INOUTGROUPLIST_ReaderNo_Add;
  dmDBCreate.AlterTB_INOUTGROUPLIST_Time_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','120');
end;

function TDataBaseConfig.Table121VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','ASCIITOHEX','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','121');

end;

function TDataBaseConfig.Table122VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_DEVICECARDGROUPCODE;
  dmDBCreate.AlterTB_EMPLOYEE_DGCODE_Add;
  dmDBCreate.AlterTB_EMPLOYEE_DGAPPLY_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','122');
end;

function TDataBaseConfig.Table123VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('G','근태');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','123');

end;

function TDataBaseConfig.Table124VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_ACCESSINPUTTYPE;
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('R','원격제어');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('P','전화');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('B','퇴실버튼');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('S','스케줄');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('F','화재발생');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('f','원격화재');
  dmDBFunction.InsertIntoTB_ACCESSINPUTTYPE_Value('C','카드');

  dmDBCreate.CreateTB_DOORPOSICODE;
  dmDBFunction.InsertIntoTB_DOORPOSICODE_Value('0','내부');
  dmDBFunction.InsertIntoTB_DOORPOSICODE_Value('1','외부');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','124');

end;

function TDataBaseConfig.Table125VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ALARMEVENT_COMPANYCODE_Add;
  dmDBCreate.AlterTB_ALARMEVENT_EMCODE_Add;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','125');
end;

function TDataBaseConfig.Table126VersionMake: Boolean;
begin
  Exit;
  ///현재 DEVICETYPE은 미사용 ==> TB_ALARMDEVICETYPE 테이블을 사용중
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('MN','메인컨트롤러');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('EX','로컬컨트롤러');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('JP','조작표시기');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('PT','포인터');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('PR','프린터');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('PC','PC');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('AD','알람표시기');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('WR','무선중계기');
  dmDBFunction.InsertIntoTB_DEVICETYPE_Value('CD','카드리더');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','126');
end;

function TDataBaseConfig.Table127VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_ALARMMODECODE_Value('a','경계모드');
  dmDBFunction.InsertIntoTB_ALARMMODECODE_Value('d','해제모드');
  dmDBFunction.InsertIntoTB_ALARMMODECODE_Value('A','경계모드');
  dmDBFunction.InsertIntoTB_ALARMMODECODE_Value('D','해제모드');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','127');
end;

function TDataBaseConfig.Table128VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_LOCATION_TotWidth_Add;
  dmDBCreate.AlterTB_LOCATION_TotHeight_Add;
  dmDBCreate.AlterTB_LOCATION_CurX_Add;
  dmDBCreate.AlterTB_LOCATION_CurY_Add;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','128');
end;

function TDataBaseConfig.Table129VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_EMPLOYEE_EmName_Change('100');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','129');
end;

function TDataBaseConfig.Table130VersionMake: Boolean;
begin
  result := dmDBFunction.InsertIntoTB_CONFIG_All('CARD','READERTYPE','0','0.일반,1.스마트원');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','130');
end;

function TDataBaseConfig.Table131VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_EMPHIS_EMNAME_Change(100);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','131');
end;

function TDataBaseConfig.Table132VersionMake: Boolean;
var
  stSql : string;
  TempAdoQuery : TADOQuery;
begin
  stSql := 'update tb_alarmdevice set al_zonenum = ''00'' '; //AL_ZONENUM 에 데이터 값을 입력 한다
  dmDataBase.ProcessExecSQL(stSql);
  stSql := 'update TB_ALARMEVENT set AL_ZONECODE = ''00'' where AL_ZONECODE is null '; //AL_ZONECODE 에 데이터 값을 입력 한다
  dmDataBase.ProcessExecSQL(stSql);
  if G_nDBType = MDB then
  begin
    stSql := 'alter table tb_alarmdevice alter column al_zonenum  text(2) NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
  end else if G_nDBType = POSTGRESQL then
  begin
    stSql := 'ALTER TABLE tb_alarmdevice ALTER COLUMN al_zonenum SET DEFAULT ''00'' ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'ALTER TABLE tb_alarmdevice ALTER COLUMN al_zonenum SET NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'alter table tb_alarmdevice drop constraint tb_alarmdevice_pkey ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'alter table tb_alarmdevice add primary key (GROUP_CODE,AC_NODENO,AC_ECUID,AL_ZONENUM)';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'ALTER TABLE TB_ALARMEVENT ALTER COLUMN AL_ZONECODE SET DEFAULT ''00'' ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'ALTER TABLE TB_ALARMEVENT ALTER COLUMN AL_ZONECODE SET NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'alter table TB_ALARMEVENT drop constraint tb_alarmevent_pkey ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'alter table TB_ALARMEVENT add primary key (group_code, al_date, al_time, ac_nodeno, ac_ecuid, al_msgno,AL_ZONECODE)';
    dmDataBase.ProcessExecSQL(stSql);
  end else if G_nDBType = MSSQL then
  begin
    stSql := 'alter table tb_alarmdevice alter column al_zonenum varchar(2) NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := ' ALTER TABLE TB_ALARMDEVICE ADD DEFAULT ''00'' FOR AL_ZONENUM ';
    dmDataBase.ProcessExecSQL(stSql);

    stSql := 'alter table TB_ALARMEVENT alter column AL_ZONECODE varchar(2) NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := ' ALTER TABLE TB_ALARMEVENT ADD DEFAULT ''00'' FOR AL_ZONECODE ';
    dmDataBase.ProcessExecSQL(stSql);

    Try
      CoInitialize(nil);
      TempAdoQuery := TADOQuery.Create(nil);
      TempAdoQuery.Connection := dmDataBase.ADOConnection;
      TempAdoQuery.DisableControls;
      with TempAdoQuery do
      begin
        Close;
        //sql.Clear;
        stSql := 'select name from sysobjects where xtype= ''PK'' and parent_obj=(select id from sysobjects where name = ''tb_alarmdevice'')';
        sql.Text := stSql;
        Try
          Open;
        Except
          //에러처리
          Exit;
        End;
        if recordcount > 0 then
        begin
          stSql := 'ALTER TABLE tb_alarmdevice DROP ' + FindField('name').AsString ;
          dmDataBase.ProcessExecSQL(stSql);
        end;
        Close;
        //sql.Clear;
        stSql := 'select name from sysobjects where xtype= ''PK'' and parent_obj=(select id from sysobjects where name = ''tb_alarmevent'')';
        sql.Text := stSql;
        Try
          Open;
        Except
          //에러처리
          Exit;
        End;
        if recordcount > 0 then
        begin
          stSql := 'ALTER TABLE tb_alarmevent DROP ' + FindField('name').AsString ;
          dmDataBase.ProcessExecSQL(stSql);
        end;
      End;
    Finally
      TempAdoQuery.EnableControls;
      TempAdoQuery.Free;
      CoUninitialize;
    End;
    stSql := 'alter table tb_alarmdevice add constraint PK_alarmdevice PRIMARY KEY (GROUP_CODE,AC_NODENO,AC_ECUID,AL_ZONENUM)';
    dmDataBase.ProcessExecSQL(stSql);
    stSql := 'alter table tb_alarmevent add constraint PK_alarmevent PRIMARY KEY (group_code, al_date, al_time, ac_nodeno, ac_ecuid, al_msgno,AL_ZONECODE)';
    dmDataBase.ProcessExecSQL(stSql);
  end else if G_nDBType = FIREBIRD then
  begin
    stSql := 'alter table tb_alarmdevice alter column  al_zonenum varchar(2) DEFAULT ''00''  NOT NULL ';
    dmDataBase.ProcessExecSQL(stSql);
  end else Exit;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','132');

end;

function TDataBaseConfig.Table133VersionMake: Boolean;
begin
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','133');

end;

function TDataBaseConfig.Table134VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_TIMECODE;
  dmDBCreate.CreateTB_TIMECODEDEVICE;
  dmDBCreate.AlterTB_DOOR_TIMECODEUSE_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIMECODEUSE_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIMEGROUP_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIME1_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIME2_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIME3_Add;
  dmDBCreate.AlterTB_EMPLOYEE_TIME4_Add;
  dmDBCreate.AlterTB_EMPLOYEE_WEEKCODE_Add;

  result := dmDBFunction.InsertIntoTB_TIMECODE_Value('1','00000000','00000000','00000000','00000000','Y');
  result := dmDBFunction.InsertIntoTB_TIMECODE_Value('2','00000000','00000000','00000000','00000000','Y');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','134');

end;

function TDataBaseConfig.Table135VersionMake: Boolean;
begin
  //dmDBCreate.AlterTB_ACCESSDEVICE_TimeCodeSend_Add;
  dmDBCreate.AlterTB_ACCESSDEVICE_TIMECODEASYNC_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','135');
end;

function TDataBaseConfig.Table136VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','TIMEUSE','FALSE','타임코드 사용유무');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','136');
end;

function TDataBaseConfig.Table137VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDEPART','FALSE','부서코드연동유무');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','137');
end;

function TDataBaseConfig.Table138VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_DEVICECARDNODoor3_Add;
  dmDBCreate.AlterTB_DEVICECARDNODoor4_Add;
  dmDBCreate.AlterTB_DEVICECARDNODoor5_Add;
  dmDBCreate.AlterTB_DEVICECARDNODoor6_Add;
  dmDBCreate.AlterTB_DEVICECARDNODoor7_Add;
  dmDBCreate.AlterTB_DEVICECARDNODoor8_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm0_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm1_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm2_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm3_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm4_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm5_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm6_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm7_Add;
  dmDBCreate.AlterTB_DEVICECARDNOAlarm8_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','138');
end;

function TDataBaseConfig.Table139VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ATEVENT_JIJUMCODE_Add;
  dmDBCreate.AlterTB_ATEVENT_DEPARTCODE_Add;
  dmDBCreate.AlterTB_ATEVENT_EMNAME_Add;
  dmDBCreate.AlterTB_FOODEVENT_JIJUMCODE_Add;
  dmDBCreate.AlterTB_FOODEVENT_DEPARTCODE_Add;
  dmDBCreate.AlterTB_FOODEVENT_EMNAME_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','139');
end;

function TDataBaseConfig.Table140VersionMake: Boolean;
begin
  result := dmDBFunction.UpdateTB_ATEVENT_EmInfoInit;
  result := dmDBFunction.UpdateTB_FOODEVENT_EmInfoInit;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','140');
end;

function TDataBaseConfig.Table141VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','COMPANYCD','1','0:회사코드미사용,1:회사코드사용');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','141');
end;

function TDataBaseConfig.Table142VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ATDAYSUMMARY_JIJUMCODE_Add;
  dmDBCreate.AlterTB_ATDAYSUMMARY_DEPARTCODE_Add;
  dmDBCreate.AlterTB_ATDAYSUMMARY_EMNAME_Add;
  dmDBCreate.AlterTB_ATMONTHSUMMARY_JIJUMCODE_Add;
  dmDBCreate.AlterTB_ATMONTHSUMMARY_DEPARTCODE_Add;
  dmDBCreate.AlterTB_ATMONTHSUMMARY_EMNAME_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','142');
end;

function TDataBaseConfig.Table143VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_TIMECODEDEVICE_EACHCHANGE_Add;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','143');
end;

function TDataBaseConfig.Table144VersionMake: Boolean;
var
  stSql : string;
begin
  if G_nDBTYPE = MSSQL then
  begin
    dmDBCreate.CreateVw_SMS_EVENT;
  end;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','144');
end;

function TDataBaseConfig.Table146VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FACECOP','0','FACECOP연동유무');

  stSql := ' Insert Into TB_CARDTYPE(CT_CODE,CT_NAME) ';
  stSql := stSql + ' VALUES(''3'',''FACECOP'')';
  dmDataBase.ProcessExecSQL(stSql);

  dmDBCreate.CreateTB_FACECOP;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','146');
end;

function TDataBaseConfig.Table147VersionMake: Boolean;
begin

  dmDBCreate.AlterTB_ATLISTEVENT_CARDNOChange;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','147');

end;

function TDataBaseConfig.Table148VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_TIMETYPE_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','148');

end;

function TDataBaseConfig.Table149VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('ATTEND','REALREPORT','0','');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','149');
end;

function TDataBaseConfig.Table150VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_FORMNAME_Value('107','핸드폰','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('108','주소1','Y');
  dmDBFunction.InsertIntoTB_FORMNAME_Value('109','주소2','Y');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','150');
end;

function TDataBaseConfig.Table151VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FDMSDELETE','FALSE','');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','151');
end;

function TDataBaseConfig.Table152VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('FOOD','YSDAYTIME','0400','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','152');
end;

function TDataBaseConfig.Table153VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','EVENTDB','0','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','153');
end;

function TDataBaseConfig.Table154VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ZONEDEVICE_View_Add;
  stSql := 'Update TB_ZONEDEVICE set AL_VIEW =''Y'' ';
  dmDataBase.ProcessExecSQL(stSql);

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','154');
end;

function TDataBaseConfig.Table155VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','EVENTSTART','0000','');
  dmDBFunction.InsertIntoTB_CONFIG_All('COMMON','EVENTEND','2459','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','155');

end;

function TDataBaseConfig.Table156VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_CARD_MEMLOAD_Add;
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','156');
end;

function TDataBaseConfig.Table157VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','PWLENUSE','FALSE','');
  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','PWLENGTH','8','');
  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','PWCHAR','FALSE','');
  dmDBFunction.InsertIntoTB_CONFIG_All('MOSTYPE','PWCHANGE','30','');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','157');
end;

function TDataBaseConfig.Table158VersionMake: Boolean;
var
  stSql : string;
  i  : integer;
  stArmAreaUse : string;
  stArmAreaName : string;
begin

  dmDBCreate.CreateTB_ARMAREA;



  stSql := 'select * from tb_alarmdevice ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
    if recordCount < 1 then Exit;
    While Not Eof do
    begin
      for i := 0 to 8 do
      begin
        if i = 0 then
        begin
          stArmAreaUse := 'Y';
          stArmAreaName := FindField('AL_ZONENAME').AsString;
        end else
        begin
          stArmAreaUse := 'N';
          stArmAreaName := FindField('AL_ZONENAME').AsString + '_' + inttostr(i) + '구역';
        end;

        dmDBFunction.InsertIntoTB_ARMAREA(inttostr(FindField('AC_NODENO').AsInteger),
                             FindField('AC_ECUID').AsString,
                             inttostr(i),
                             stArmAreaName,
                             stArmAreaUse,
                             '',
                             inttostr(FindField('AL_VIEWSEQ').AsInteger),
                             FindField('AL_LOCATEUSE').AsString,
                             inttostr(FindField('AL_TOTWIDTH').AsInteger),
                             inttostr(FindField('AL_TOTHEIGHT').AsInteger),
                             inttostr(FindField('AL_CURX').AsInteger),
                             inttostr(FindField('AL_CURY').AsInteger),
                             FindField('LO_DONGCODE').AsString,
                             FindField('LO_FLOORCODE').AsString,
                             FindField('LO_AREACODE').AsString);
      end;
      Next;
    end;
  end;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','158');
end;

function TDataBaseConfig.Table159VersionMake: Boolean;
var
  stSql : string;
  i  : integer;
begin

  dmDBCreate.CreateTB_ADMINALARMAREA;


  stSql := 'select * from TB_ADMINALARMDEVICE ';
  with dmDataBase.ADOTempQuery do
  begin
    Close;
    Sql.Text := stSql;
    Try
      Open;
    Except
      Exit;
    End;
//    if recordCount < 1 then Exit;
    While Not Eof do
    begin
      for i := 0 to 8 do
      begin
        dmDBFunction.InsertIntoTB_ADMINALARMAREA(FindField('AD_USERID').AsString,FindField('AC_NODENO').asstring,
                             FindField('AC_ECUID').AsString,
                             FillZeroNumber(i,2),
                             FindField('AD_GUBUN').AsString,
                             '',
                             '');
      end;
      Next;
    end;
  end;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','159');
end;

function TDataBaseConfig.Table160VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_ARMAREA_TelNo_Add;
  dmDBCreate.AlterTB_ARMAREA_memo_Add;
  dmDBCreate.AlterTB_ARMAREA_ARMCODE_Add;
  dmDBCreate.AlterTB_ARMAREA_ARMCODE_Add;
  dmDBFunction.UpdateTB_ARMAREA_FromAlarmDeviceMemo;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','160');
end;

function TDataBaseConfig.Table161VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door3_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door4_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door5_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door6_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door7_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Door8_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm0_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm1_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm2_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm3_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm4_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm5_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm6_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm7_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_PROMISE_Alarm8_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door3_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door4_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door5_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door6_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door7_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Door8_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm0_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm1_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm2_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm3_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm4_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm5_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm6_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm7_Add;
  dmDBCreate.AlterTB_DEVICECARDNOGROUP_Alarm8_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door3_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door4_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door5_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door6_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door7_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Door8_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm0_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm1_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm2_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm3_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm4_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm5_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm6_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm7_Add;
  dmDBCreate.AlterTB_DEVICECARDNO_HIS_Alarm8_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','161');
end;

function TDataBaseConfig.Table162VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_CARDBYTE_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','162');
end;

function TDataBaseConfig.Table163VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_SOCKTYPE_Add;
  dmDBFunction.UpdateTB_ACCESSDEVICE_Field_IntValue('','','AC_SOCKTYPE','1');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','163');
end;

function TDataBaseConfig.Table164VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.AlterTB_DEVICECARDNO_MEMLOAD_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','164');
end;

function TDataBaseConfig.Table165VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_AlarmEvent_Index1;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','165');
end;

function TDataBaseConfig.Table166VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','CARDMEMORY','0','카드메모리로딩유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','GLANTIUSE','0','글로벌 안티패스사용유무');
  dmDBCreate.CreateTB_ANTIGROUPCODE;
  dmDBCreate.AlterTB_DOOR_AGCODE_Add;
  dmDBCreate.AlterTB_DOOR_AGANTINO_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','166');
end;

function TDataBaseConfig.Table167VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('H','폐쇄모드출입불가');
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('I','방범구역다름');
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('J','안티패스출입불가');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','167');
end;

function TDataBaseConfig.Table168VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','ARMAREAUSE','0','구역경계사용유무');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','168');
end;

function TDataBaseConfig.Table169VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FACECOPIP','127.0.0.1','FACECOP IP');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','169');
end;

function TDataBaseConfig.Table170VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FALASTTIME','','최종가져온시간');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','170');
end;

function TDataBaseConfig.Table171VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('RELAY','FA_RETIME','1','연동시간');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','171');
end;

function TDataBaseConfig.Table172VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','GLINITUSE','0','글로벌초기화사용유무');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','GLINITTIME','10','글로벌초기화시간');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','172');
end;

function TDataBaseConfig.Table173VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','GLINITSTM','0000','글로벌초기화시작시간');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','GLINITETM','2400','글로벌초기화종료시간');
  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','173');
end;

function TDataBaseConfig.Table174VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_EMPLOYEE_MASTER_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','174');
end;

function TDataBaseConfig.Table175VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('K','DS열림출입불가');
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('L','마스터모드출입불가');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','175');
end;

function TDataBaseConfig.Table176VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_SONGHOFDCONFIG;
  dmDBCreate.CreateTB_SEMESTER;
  dmDBCreate.CreateTB_FOODCodeCount;
  dmDBCreate.CreateTB_FOODDayCount;
  dmDBCreate.CreateTB_FOODWeekCount;
  dmDBCreate.CreateTB_FOODSemesterCount;

  dmDBFunction.InsertIntoTB_SONGHOFDCONFIG('DAY','Y','2');
  dmDBFunction.InsertIntoTB_SONGHOFDCONFIG('WEEK','Y','10');
  dmDBFunction.InsertIntoTB_SONGHOFDCONFIG('SEMESTER','Y','150');

  dmDBFunction.InsertIntoTB_SEMESTER('1','Y','0301','0614');
  dmDBFunction.InsertIntoTB_SEMESTER('2','Y','0817','1129');
  dmDBFunction.InsertIntoTB_SEMESTER('3','N','0101','0101');
  dmDBFunction.InsertIntoTB_SEMESTER('4','N','1231','1231');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','176');
end;

function TDataBaseConfig.Table177VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_PERMITCODE_Value('Z','횟수초과');
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','FOODPORT','3432','식수포트');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','177');
end;

function TDataBaseConfig.Table178VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_WORKGUBUN;
  dmDBCreate.AlterTB_EMPLOYEE_WORKCODE_Add;

  dmDBFunction.InsertIntoTB_WORKGUBUN_Value('1','1','재직');
  dmDBFunction.InsertIntoTB_WORKGUBUN_Value('2','2','휴직');
  dmDBFunction.InsertIntoTB_WORKGUBUN_Value('3','3','퇴직');
  dmDBFunction.UpdateTB_EMPLOYEE_NULLWGCODE('1');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','178');
end;

function TDataBaseConfig.Table179VersionMake: Boolean;
begin
  dmDBCreate.CreateTB_EMPLOYEECHANGE;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','179');
end;

function TDataBaseConfig.Table180VersionMake: Boolean;
begin
  dmDBFunction.InsertIntoTB_CONFIG_All('DAEMON','MODBUSPORT','502','모드버스포트');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','180');
end;

function TDataBaseConfig.Table181VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ALARMEVENT_KTTSENDSTATUS_Add;
  dmDBFunction.InsertIntoTB_CONFIG_All('KTT','KTTSENDSER','0','이벤트 송신 전용서버 사용유무');

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','181');
end;

function TDataBaseConfig.Table182VersionMake: Boolean;
var
  stSql : string;
begin
  if G_nDBTYPE = MSSQL then dmDBCreate.DropTB_COMPANY_PrimaryKey;
  dmDBCreate.AlterTB_COMPANY_DEPARTCODE_Change;
  if G_nDBTYPE = MSSQL then dmDBCreate.CreateTB_COMPANY_PrimaryKey;

  if G_nDBTYPE = MSSQL then dmDBCreate.DropTB_LOCATION_PrimaryKey;
  dmDBCreate.AlterTB_LOCATION_AREACODE_Change;
  if G_nDBTYPE = MSSQL then dmDBCreate.CreateTB_LOCATION_PrimaryKey;

  dmDBCreate.AlterTB_EMPLOYEE_DEPARTCODE_Change;
  dmDBCreate.AlterTB_ACCESSDEVICE_AREACODE_Change;
  dmDBCreate.AlterTB_ALARMDEVICE_AREACODE_Change;
  dmDBCreate.AlterTB_ARMAREA_AREACODE_Change;
  dmDBCreate.AlterTB_DOOR_AREACODE_Change;
  dmDBCreate.AlterTB_FOOD_AREACODE_Change;
  dmDBCreate.AlterTB_ZONEDEVICE_AREACODE_Change;

  dmDBCreate.AlterTB_ACCESSDEVICE_ArmAreaUse_Add;
  stSql := ' Update TB_ACCESSDEVICE set AC_ARMAREAUSE = ''N'' ';
  dmDataBase.ProcessExecSQL(stSql);
  dmDBCreate.AlterTB_HOLIDAY_ACUSE_Add;
  dmDBCreate.AlterTB_HOLIDAY_ATUSE_Add;
  stSql := ' Update TB_HOLIDAY set HO_ACUSE = ''1'',HO_ATUSE = ''1'' ';
  dmDataBase.ProcessExecSQL(stSql);
  dmDBCreate.AlterTB_COMPANY_VIEWSEQ_Add;
  dmDBCreate.AlterTB_LOCATION_VIEWSEQ_Add;
  dmDBCreate.AlterTB_POSI_VIEWSEQ_Add;


  if dmDBFunction.CheckTB_COMPANY_Blank <> 1 then
  begin
    dmDBFunction.InsertIntoTB_COMPANY_CompanyName('001','기본회사');
  end;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','182');
end;

function TDataBaseConfig.Table183VersionMake: Boolean;
var
  stSql : string;
begin
  dmDBCreate.CreateTB_CARDGROUPCODE;       //권한그룹 테이블 생성
  dmDBFunction.InsertIntoTB_CARDGROUPCODE_All('0','Group','0','1','1'); //최초그룹코드는 조회 없이 초기 권한 부분때문에 임의로 생성함

  dmDBCreate.CreateTB_DEVICECARDNOEMPLOYEE;
  dmDBCreate.AlterTB_EMPLOYEE_CAGROUP_Add;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','183');
end;

function TDataBaseConfig.Table184VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ATWORKTYPE_ATSTARTBUTTON_Change;
  dmDBCreate.AlterTB_ATWORKTYPE_ATOFFBUTTON_Change;
  dmDBCreate.AlterTB_ATWORKTYPE_WORKOUTBUTTON_Change;
  dmDBCreate.AlterTB_ATWORKTYPE_WORKINBUTTON_Change;

  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','184');
end;

function TDataBaseConfig.Table185VersionMake: Boolean;
begin
  dmDBCreate.AlterTB_ACCESSDEVICE_MEMLOAD_ADD;
  dmDBCreate.AlterTB_DOOR_MEMLOAD_ADD;
  dmDBCreate.AlterTB_ARMAREA_MEMLOAD_ADD;

  if DBTYPE = 'MDB' then stSql := MDBSql.AlterTB_ARMAREA_MEMLOAD_ADD
  else if DBTYPE = 'PG' then stSql := PostGreSql.AlterTB_ARMAREA_MEMLOAD_ADD
  else if DBTYPE = 'MSSQL' then stSql := MSSql.AlterTB_ARMAREA_MEMLOAD_ADD
  else if DBTYPE = 'FB' then stSql := FireBird.AlterTB_ARMAREA_MEMLOAD_ADD
  else Exit;
  DataModule1.ProcessExecSQL(stSql);

  if DBTYPE = 'MDB' then stSql := MDBSql.AlterTB_EMPLOYEE_EXPIREUSE_ADD
  else if DBTYPE = 'PG' then stSql := PostGreSql.AlterTB_EMPLOYEE_EXPIREUSE_ADD
  else if DBTYPE = 'MSSQL' then stSql := MSSql.AlterTB_EMPLOYEE_EXPIREUSE_ADD
  else if DBTYPE = 'FB' then stSql := FireBird.AlterTB_EMPLOYEE_EXPIREUSE_ADD
  else Exit;
  DataModule1.ProcessExecSQL(stSql);

  if DBTYPE = 'MDB' then stSql := MDBSql.CreateTB_EMPLOYEEEXPIRECHANGE
  else if DBTYPE = 'PG' then stSql := PostGreSql.CreateTB_EMPLOYEEEXPIRECHANGE
  else if DBTYPE = 'MSSQL' then stSql := MSSql.CreateTB_EMPLOYEEEXPIRECHANGE
  else if DBTYPE = 'FB' then stSql := FireBird.CreateTB_EMPLOYEEEXPIRECHANGE
  else Exit;
  DataModule1.ProcessExecSQL(stSql);

  if DBTYPE = 'PG' then PostGreSql.CreateTB_EMPLOYEEEXPIRE_Trigger
  else if DBTYPE = 'MSSQL' then MSSql.CreateTB_EMPLOYEEEXPIRE_Trigger;



  result := dmDBFunction.UpdateTB_CONFIG_Value('COMMON','TABLE_VER','185');

end;

Function TDataBaseConfig.TableVersionCheck:Boolean;
var
  nTableVersion : integer;
begin
  result := False;
  nTableVersion := GetTableVersion;

  if nTableVersion < 1 then Table001VersionMake;
  if nTableVersion < 2 then Table002VersionMake;
  if nTableVersion < 3 then Table003VersionMake;
  if nTableVersion < 4 then Table004VersionMake;
  if nTableVersion < 5 then Table005VersionMake;
  if nTableVersion < 6 then Table006VersionMake;
  if nTableVersion < 7 then Table007VersionMake;
  if nTableVersion < 8 then Table008VersionMake;
  if nTableVersion < 9 then Table009VersionMake;
  if nTableVersion < 10 then Table010VersionMake;
  if nTableVersion < 11 then Table011VersionMake;
  if nTableVersion < 12 then Table012VersionMake;
  if nTableVersion < 13 then Table013VersionMake;
  if nTableVersion < 14 then Table014VersionMake;
  if nTableVersion < 15 then Table015VersionMake;
  if nTableVersion < 16 then Table016VersionMake;
  if nTableVersion < 17 then Table017VersionMake;
  if nTableVersion < 18 then Table018VersionMake;
  if nTableVersion < 19 then Table019VersionMake;
  if nTableVersion < 20 then Table020VersionMake;
  if nTableVersion < 21 then Table021VersionMake;
  if nTableVersion < 22 then Table022VersionMake;
  if nTableVersion < 23 then Table023VersionMake;
  if nTableVersion < 24 then Table024VersionMake;
  if nTableVersion < 25 then Table025VersionMake;
  if nTableVersion < 26 then Table026VersionMake;
  if nTableVersion < 27 then Table027VersionMake;
  if nTableVersion < 28 then Table028VersionMake;
  if nTableVersion < 29 then Table029VersionMake;
  if nTableVersion < 30 then Table030VersionMake;
  if nTableVersion < 31 then Table031VersionMake;
  if nTableVersion < 32 then Table032VersionMake;
  if nTableVersion < 33 then Table033VersionMake;
  if nTableVersion < 34 then Table034VersionMake;
  if nTableVersion < 35 then Table035VersionMake;
  if nTableVersion < 36 then Table036VersionMake;
  if nTableVersion < 37 then Table037VersionMake;
  if nTableVersion < 38 then Table038VersionMake;
  if nTableVersion < 39 then Table039VersionMake;
  if nTableVersion < 40 then Table040VersionMake;
  if nTableVersion < 41 then Table041VersionMake;
  if nTableVersion < 42 then Table042VersionMake;
  if nTableVersion < 43 then Table043VersionMake;
  if nTableVersion < 44 then Table044VersionMake;
  if nTableVersion < 45 then Table045VersionMake;
  if nTableVersion < 46 then Table046VersionMake;
  if nTableVersion < 47 then Table047VersionMake;
  if nTableVersion < 48 then Table048VersionMake;
  if nTableVersion < 49 then Table049VersionMake;
  if nTableVersion < 50 then Table050VersionMake;
  if nTableVersion < 51 then Table051VersionMake;
  if nTableVersion < 52 then Table052VersionMake;
  if nTableVersion < 53 then Table053VersionMake;
  if nTableVersion < 54 then Table054VersionMake;
  if nTableVersion < 55 then Table055VersionMake;
  if nTableVersion < 56 then Table056VersionMake;
  if nTableVersion < 57 then Table057VersionMake;
  if nTableVersion < 58 then Table058VersionMake;
  if nTableVersion < 59 then Table059VersionMake;
  if nTableVersion < 60 then Table060VersionMake;
  if nTableVersion < 61 then Table061VersionMake;
  if nTableVersion < 62 then Table062VersionMake;
  if nTableVersion < 63 then Table063VersionMake;
//  if nTableVersion < 64 then Table64VersionMake; ==>EM_CODE 는 20자리만 가져가도 문제 없을듯
  if nTableVersion < 65 then Table065VersionMake;
  if nTableVersion < 66 then Table066VersionMake;
  if nTableVersion < 67 then Table067VersionMake;
  if nTableVersion < 68 then Table068VersionMake;
  if nTableVersion < 69 then Table069VersionMake;
  if nTableVersion < 70 then Table070VersionMake;
  if nTableVersion < 71 then Table071VersionMake;
  if nTableVersion < 72 then Table072VersionMake;
  if nTableVersion < 73 then Table073VersionMake;
  if nTableVersion < 74 then Table074VersionMake;
  if nTableVersion < 75 then Table075VersionMake;
  if nTableVersion < 76 then Table076VersionMake;
  //if nTableVersion < 77 then Table77VersionMake;
  if nTableVersion < 78 then Table078VersionMake;
  if nTableVersion < 79 then Table079VersionMake;
  if nTableVersion < 80 then Table080VersionMake;
  if nTableVersion < 81 then Table081VersionMake;
  if nTableVersion < 82 then Table082VersionMake;
  if nTableVersion < 83 then Table083VersionMake;
  if nTableVersion < 84 then Table084VersionMake;
  if nTableVersion < 85 then Table085VersionMake;
  if nTableVersion < 86 then Table086VersionMake;
  if nTableVersion < 87 then Table087VersionMake;
  if nTableVersion < 88 then Table088VersionMake;
  if nTableVersion < 89 then Table089VersionMake;
  if nTableVersion < 90 then Table090VersionMake;
  if nTableVersion < 91 then Table091VersionMake;
  if nTableVersion < 92 then Table092VersionMake;
  if nTableVersion < 93 then Table093VersionMake;
  if nTableVersion < 94 then Table094VersionMake;
  if nTableVersion < 95 then Table095VersionMake;
  if nTableVersion < 96 then Table096VersionMake;
  if nTableVersion < 97 then Table097VersionMake;
  if nTableVersion < 98 then Table098VersionMake;
  if nTableVersion < 99 then Table099VersionMake;
  if nTableVersion < 100 then Table100VersionMake;
  if nTableVersion < 101 then Table101VersionMake;
  if nTableVersion < 102 then Table102VersionMake;
  if nTableVersion < 103 then Table103VersionMake;
  if nTableVersion < 104 then Table104VersionMake;
  if nTableVersion < 105 then Table105VersionMake;
  if nTableVersion < 106 then Table106VersionMake;
  if nTableVersion < 107 then Table107VersionMake;
  if nTableVersion < 108 then Table108VersionMake;
  if nTableVersion < 109 then Table109VersionMake;
  if nTableVersion < 110 then Table110VersionMake;
  if nTableVersion < 111 then Table111VersionMake;
  if nTableVersion < 112 then Table112VersionMake;
  if nTableVersion < 113 then Table113VersionMake;
  if nTableVersion < 114 then Table114VersionMake;
  if nTableVersion < 115 then Table115VersionMake;
  if nTableVersion < 116 then Table116VersionMake;
  if nTableVersion < 117 then Table117VersionMake;
  if nTableVersion < 118 then Table118VersionMake;
  if nTableVersion < 119 then Table119VersionMake;
  if nTableVersion < 120 then Table120VersionMake;
  if nTableVersion < 121 then Table121VersionMake;
  if nTableVersion < 122 then Table122VersionMake;
  if nTableVersion < 123 then Table123VersionMake;
  if nTableVersion < 124 then Table124VersionMake;
  if nTableVersion < 125 then Table125VersionMake;
  if nTableVersion < 126 then Table126VersionMake;
  if nTableVersion < 127 then Table127VersionMake;
  if nTableVersion < 128 then Table128VersionMake;
  if nTableVersion < 129 then Table129VersionMake;
  if nTableVersion < 130 then Table130VersionMake;
  if nTableVersion < 131 then Table131VersionMake;
  if nTableVersion < 132 then Table132VersionMake;
  if nTableVersion < 133 then Table133VersionMake;
  if nTableVersion < 134 then Table134VersionMake;
  if nTableVersion < 135 then Table135VersionMake;
  if nTableVersion < 136 then Table136VersionMake;
  if nTableVersion < 137 then Table137VersionMake;
  if nTableVersion < 138 then Table138VersionMake;
  if nTableVersion < 139 then Table139VersionMake;
  if nTableVersion < 140 then Table140VersionMake;
  if nTableVersion < 141 then Table141VersionMake;
  if nTableVersion < 142 then Table142VersionMake;
  if nTableVersion < 143 then Table143VersionMake;
  if nTableVersion < 144 then Table144VersionMake;
  if nTableVersion < 146 then Table146VersionMake;
  if nTableVersion < 147 then Table147VersionMake;
  if nTableVersion < 148 then Table148VersionMake;
  if nTableVersion < 149 then Table149VersionMake;
  if nTableVersion < 150 then Table150VersionMake;
  if nTableVersion < 151 then Table151VersionMake;
  if nTableVersion < 152 then Table152VersionMake;
  if nTableVersion < 153 then Table153VersionMake;
  if nTableVersion < 154 then Table154VersionMake;
  if nTableVersion < 155 then Table155VersionMake;
  if nTableVersion < 156 then Table156VersionMake;
  if nTableVersion < 157 then Table157VersionMake;
  if nTableVersion < 158 then Table158VersionMake;
  if nTableVersion < 159 then Table159VersionMake;
  if nTableVersion < 160 then Table160VersionMake;
  if nTableVersion < 161 then Table161VersionMake;
  if nTableVersion < 162 then Table162VersionMake;
  if nTableVersion < 163 then Table163VersionMake;
  if nTableVersion < 164 then Table164VersionMake;
  if nTableVersion < 165 then Table165VersionMake;
  if nTableVersion < 166 then Table166VersionMake;
  if nTableVersion < 167 then Table167VersionMake;
  if nTableVersion < 168 then Table168VersionMake;
  if nTableVersion < 169 then Table169VersionMake;
  if nTableVersion < 170 then Table170VersionMake;
  if nTableVersion < 171 then Table171VersionMake;
  if nTableVersion < 172 then Table172VersionMake;
  if nTableVersion < 173 then Table173VersionMake;
  if nTableVersion < 174 then Table174VersionMake;
  if nTableVersion < 175 then Table175VersionMake;
  if nTableVersion < 176 then Table176VersionMake;
  if nTableVersion < 177 then Table177VersionMake;
  if nTableVersion < 178 then Table178VersionMake;
  if nTableVersion < 179 then Table179VersionMake;
  if nTableVersion < 180 then Table180VersionMake;
  if nTableVersion < 181 then Table181VersionMake;
  if nTableVersion < 182 then Table182VersionMake;
  if nTableVersion < 183 then Table183VersionMake;
  if nTableVersion < 184 then Table184VersionMake;
  if nTableVersion < 185 then Table185VersionMake;

  result := True;
end;

procedure TfmDataBaseConfig.FormCreate(Sender: TObject);
var
  ini_fun : TiniFile;
  stDBType : string;
begin
  Try
    if G_stExeFolder = '' then G_stExeFolder := ExtractFileDir(Application.ExeName);
    ini_fun := TiniFile.Create(G_stExeFolder + '\Zmos.ini');

    stDBType := UpperCase(ini_fun.ReadString('DBConfig','TYPE','MSSQL'));
    if UpperCase(stDBType) = 'MSSQL' then G_nDBType := MSSQL
    else if UpperCase(stDBType) = 'PG' then G_nDBType := POSTGRESQL
    else if UpperCase(stDBType) = 'FB' then G_nDBType := FIREBIRD
    else if UpperCase(stDBType) = 'MDB' then G_nDBType := MDB;

    rg_DBType.ItemIndex := G_nDBType;

    edServerIP.Text  := ini_fun.ReadString('DBConfig','Host','127.0.0.1');
    edServerPort.Text := ini_fun.ReadString('DBConfig','Port','1433');
    edUserid.Text := ini_fun.ReadString('DBConfig','UserID','sa');
    edPasswd.Text := MimeDecodeString(ini_fun.ReadString('DBConfig','UserPW',MimeEncodeString('sapasswd')));  //saPasswd
    edDataBaseName.Text := lowerCase(ini_fun.ReadString('DBConfig','DBNAME','zmos'));
  Finally
    ini_fun.Free;
  End;
  rg_DBTypeClick(sender);
end;

procedure TfmDataBaseConfig.rg_DBTypeClick(Sender: TObject);
begin
  if rg_DBType.ItemIndex = MDB then AdvPanel1.Visible := False
  else AdvPanel1.Visible := True;

end;

procedure TfmDataBaseConfig.btn_CloseClick(Sender: TObject);
begin
  TDataBaseConfig.GetObject.Cancel := True;
  Close;
end;

procedure TfmDataBaseConfig.btn_SaveClick(Sender: TObject);
var
  ini_fun : TiniFile;
begin
  Try
    if G_stExeFolder = '' then G_stExeFolder := ExtractFileDir(Application.ExeName);
    ini_fun := TiniFile.Create(G_stExeFolder + '\Zmos.INI');

    if rg_DBType.ItemIndex = 0 then ini_fun.WriteString('DBConfig','TYPE','MSSQL')
    else if rg_DBType.ItemIndex = 1 then ini_fun.WriteString('DBConfig','TYPE','PG')
    else if rg_DBType.ItemIndex = 1 then ini_fun.WriteString('DBConfig','TYPE','MDB')
    else if rg_DBType.ItemIndex = 1 then ini_fun.WriteString('DBConfig','TYPE','FB');

    ini_fun.WriteString('DBConfig','Host',Trim(edServerIP.Text));
    ini_fun.WriteString('DBConfig','Port',Trim(edServerPort.Text));
    ini_fun.WriteString('DBConfig','UserID',Trim(edUserid.Text));
    ini_fun.WriteString('DBConfig','UserPW',MimeEncodeString(Trim(edPasswd.Text)));
    ini_fun.WriteString('DBConfig','DBNAME',Trim(edDataBaseName.Text));

  Finally
    ini_fun.Free;
  End;

  TDataBaseConfig.GetObject.DataBaseConnect;
  Close;

end;

end.
